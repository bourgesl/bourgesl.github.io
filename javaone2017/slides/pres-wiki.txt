<[autotemplate]
usepackage=[utf8]{inputenc}
usepackage={array,multirow,multicol}
usepackage={textcomp}
usepackage={ragged2e}
usepackage={hyperref}
usepackage={appendixnumberbeamer}
usepackage=[absolute,overlay]{textpos}
hypersetup={colorlinks=true,linkcolor=,urlcolor=RoyalBlue}
documentclass=[aspectratio=169,12pt,xcolor=dvipsnames]{beamer}
title={Marlin renderer, a JDK-9 Success Story}
subtitle={Vector Graphics on Steroids for Java 2D and JavaFX}
author={Laurent Bourgès}
institute=[OSUG-DC, CNRS]{ \includegraphics[height=1.6cm,keepaspectratio]{../osug.png} \hspace{20pt} \includegraphics[height=1.3cm,keepaspectratio]{../cnrs.jpg} }
date={JavaOne 2017-10-04}
titleframe=False
usetheme=[inner/subsectionpage=progressbar,outer/numbering=fraction,outer/progressbar=frametitle]{metropolis}
[autotemplate]>
<[nowiki]
\textblockorigin{0pt}{0pt} % position origin (showboxes)

\definecolor{mRed}{RGB}{239, 41, 41}
\definecolor{mBlue}{RGB}{52, 101, 164}
\definecolor{mGreen}{RGB}{67, 195, 48}
\definecolor{mViolet}{RGB}{194, 84, 210}
\definecolor{mTurquoise}{RGB}{99, 187, 238}

\setbeamercolor{frametitle}{bg=RoyalBlue}
\setbeamercolor{footlineW}{bg=white}

\iftrue
 \setsansfont[BoldFont={Fira Sans SemiBold}]{Fira Sans Book}
\fi

\metroset{block=fill}

\setbeamerfont{block body}{size=\fontsize{9pt}{10.8}}
\setbeamerfont{block title}{size=\fontsize{9pt}{10.8}}

\setcounter{tocdepth}{1}

% My macros
\newcommand<>{\mCN}[1]{
\texttt{\textbf{#1}}
}
\newcommand<>{\mB}[1]{
\textbf{#1}
}
\newcommand<>{\mS}[1]{
\small{#1}
}
\newcommand<>{\mBRed}[1]{
\textbf{\textcolor{mRed}{#1}}
}
\newcommand<>{\mBBlue}[1]{
\textbf{\textcolor{mBlue}{#1}}
}
\newcommand<>{\mBGreen}[1]{
\textbf{\textcolor{mGreen}{#1}}
}


{\setbeamertemplate{background canvas}{ \includegraphics[height=\paperheight, width=\paperwidth]{../javaone-2017.jpg} }
\begin{frame}[plain]
\end{frame}}

{\setbeamertemplate{background canvas}{ \includegraphics[height=\paperheight, width=\paperwidth]{../javaone-marlin.png} }
\begin{frame}[plain]
\end{frame}}




{\setbeamertemplate{logo}{ \includegraphics[height=0.75cm,keepaspectratio]{../openjdk.png} \hspace{20pt} \includegraphics[height=1.5cm,keepaspectratio]{../javaone-logo-fixed.png} \hspace{30pt} }
\frame{\titlepage

\begin{textblock*}{3cm}(12.5cm,0.5cm)
\includegraphics[width=2.5cm,keepaspectratio]{../marlin-logo.png}
\end{textblock*}
}}


\setbeamercolor{footline}{fg=white,bg=RoyalBlue}

\setbeamertemplate{footline}
{%
  \leavevmode%
  \hbox{\begin{beamercolorbox}[wd=.3\paperwidth,ht=2ex,dp=1ex,leftskip=.3cm,rightskip=.3cm plus1fil]{footline}%
    \usebeamerfont{author in head/foot}\insertshortauthor \hspace{2pt} (\insertshortinstitute)
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.45\paperwidth,ht=2ex,dp=1ex,leftskip=.3cm,rightskip=.3cm plus1fil]{footlineW}%
    \usebeamercolor[fg]{normal text}
    \usebeamerfont{title in head/foot}\insertshorttitle
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.25\paperwidth,ht=2ex,dp=1ex,leftskip=.3cm,rightskip=.3cm plus1fil]{footlineW}%
    \usebeamercolor[fg]{normal text}
    \usebeamerfont{title in head/foot}\insertshortdate
    \usebeamerfont{page number in head/foot}
    \usebeamertemplate*{frame footer}
    \hfill
    \usebeamertemplate*{frame numbering}
  \end{beamercolorbox}}%
  \vskip0pt%
}

\makeatletter
\newsavebox{\mybox}
\setbeamertemplate{frametitle}{%
  \nointerlineskip%
  \savebox{\mybox}{%
      \begin{beamercolorbox}[%
          wd=\paperwidth,%
          sep=0pt,%
          leftskip=\metropolis@frametitle@padding,%
          rightskip=\metropolis@frametitle@padding,%
        ]{frametitle}%
      \metropolis@frametitlestrut@start\insertframetitle\metropolis@frametitlestrut@end%
      \end{beamercolorbox}%
    }
  \begin{beamercolorbox}[%
      wd=\paperwidth,%
      sep=0pt,%
      leftskip=\metropolis@frametitle@padding,%
      rightskip=\metropolis@frametitle@padding,%
    ]{frametitle}%
  \metropolis@frametitlestrut@start\insertframetitle\metropolis@frametitlestrut@end%
  \hfill%
    \raisebox{-\metropolis@frametitle@padding}{\includegraphics[height=\dimexpr\ht\mybox+\metropolis@frametitle@padding\relax,keepaspectratio]{../marlin-logo.png}}%
    \hspace*{-\metropolis@frametitle@padding}
  \end{beamercolorbox}%
}

\addtobeamertemplate{frametitle}{}{%
    \usebeamertemplate*{progress bar in head/foot}
}
\makeatother
[nowiki]>




==== Outline ====
\begin{multicols}{2}
\tableofcontents
\end{multicols}




== Context \& History ==

==== Role of an Anti-aliasing Renderer ====
* Geometry is defined by a '''mathematical description of a path'''
* '''Shapes''' may be complex: concave, convex, intersecting ...
* To draw to any kind of raster surface (image, screen), need to map the rendering of ideal path to raster coordinates
* '''Points on the path''' may rarely map exactly to '''raster coordinates'''
* '''Need to ascertain coverage (anti-aliasing) for each output pixel'''

<[nowiki]
\texttt{\small
\begin{tabular}{| c | c | c | c | c | c |}
\hline	
0x0 & 2x2 & 4x4 & 8x8 & 16x16 & 64x64 \\ 
\includegraphics[height=1.8cm,keepaspectratio]{../cropped/crop_0x0.png}
& \includegraphics[height=1.8cm,keepaspectratio]{../cropped/crop_1x1.png}
& \includegraphics[height=1.8cm,keepaspectratio]{../cropped/crop_2x2.png} 
& \includegraphics[height=1.8cm,keepaspectratio]{../cropped/crop_3x3.png}
& \includegraphics[height=1.8cm,keepaspectratio]{../cropped/crop_4x4.png}
& \includegraphics[height=1.8cm,keepaspectratio]{../cropped/crop_6x6.png} \\ \hline
\end{tabular}
}
[nowiki]>




==== Java2D API in a nutshell ====
'''Java2D is a great \& powerful Graphics API''':
* \mCN{Shape} interface (\texttt{java.awt.geom})
** Primitives: \mCN{Rectangle2D, Line2D, Ellipse2D, Arc2D} ...
** General \mCN{Path2D}: \mCN{moveTo(), lineTo(), quadTo(), curveTo(), closeTo()}
* \mCN{Stroke} interface: \mCN{BasicStroke} (width, dashes fields)
* \mCN{Paint} interface: \mCN{Color, GradientPaint, TexturePaint}
* \mCN{Composite} interface: \mCN{AlphaComposite}\mS{(Porter/Duff blending rules)}
* \mCN{Graphics} interface: '''\mCN{Graphics2D draw(Shape) or fill(Shape)} performs shape rendering operations'''




==== Background (before Marlin) ====
'''Anti-aliasing renderers available''' in Java:
* '''JDK 1.2''' included licensed '''closed-source''' technology from '''Ductus'''
** Ductus provides '''high performance, but single threaded'''
** State of the art for its time
** Ductus still ships with Oracle JDK-9
** \mCN{sun.dc.DuctusRenderingEngine} (native C code)

* However '''OpenJDK''' 1.6 replaced Ductus with '''"Pisces"'''
** Pisces developed + owned by Sun, in part for Java ME
** So could be '''open-sourced but performance much poorer'''
** \mCN{java2d.pisces.PiscesRenderingEngine} (java code)

Note: '''Other renderers for non-AA cases'''




==== Marlin renderer = OpenJDK's Pisces fork ====
Status in 2013:
* '''OpenGL \& D3D pipelines provide only few accelerated operations''' (blending), except the \href{https://brandonborkholder.github.io/glg2d/}{glg2d} \mCN{Graphics2D} implementation
* '''Pisces is slower''' but '''open-source''' (GPL)

'''2013.3: My first patches to OpenJDK-8''':
* '''Pisces patches''' to \url{2d-dev@openjdk.java.net}: too late for JDK-8
* Small interest / few feedbacks

'''Andréa Aimé''' (GeoServer team) '''pushed me to go on''':
* New '''MapBench''' tool: serialize \& replay rendering commands
* '''Fork OpenJDK's Pisces as a new open-source project'''




==== Marlin renderer @ github ====

 ==> 2014.1: '''Marlin renderer''' \& MapBench projects @ github (GPL v2)

* \url{https://github.com/bourgesl/marlin-renderer}
** branch ''''openjdk-dev': dev branch'''
** branch 'openjdk': in sync with OpenJDK-9 \& 10
** branch ''''use\_Unsafe': main for Marlin releases'''
** '''28 \href{https://github.com/bourgesl/marlin-renderer/releases}{Releases}''', \href{https://github.com/bourgesl/marlin-renderer/wiki}{Wiki}
* \url{https://github.com/bourgesl/mapbench}




==== Marlin \& MapBench projects @ github ====

'''Objectives''':
* '''Faster''' alternative with very good scalability
* Improve rendering '''quality'''
* Compatible with both Oracle \& Open JDK 7 / 8 / 9

'''Very big personal work''':

* '''Performance \& Test Driven Development''':
** '''Regression''' tests: MapDisplay (diff Pisces vs Marlin outputs)
** '''Performance''' tests: MapBench benchmarks (+ profiler)
* Major feedback (GeoServer) providing use cases \& testing releases




==== Marlin renderer back into OpenJDK-9 ====

* '''FOSDEM 2015''': Great discussion with OpenJDK managers (Dalibor \& Mario) on how to contribute the Marlin renderer back

 ==> I joined the '''graphics-rasterizer''' project in march 2015 to '''contribute Marlin as a new standalone renderer for OpenJDK-9'''

* '''I worked really hard''' (again, single developer) with Jim Graham \& Phil Race (reviewers) in 2015 to push 4 big patches $\approx$ '''10,000 LOC''' !
* Reviews improved a lot the code and Computer Grapĥics algorithms




==== JEP 265: Marlin renderer back into OpenJDK-9 ====

We proposed the JEP 265 in July 2015 and make it completed:
* '''JEP 265: Marlin Graphics Renderer'''
* \href{http://openjdk.java.net/jeps/265}{http://openjdk.java.net/jeps/265}
* '''Developer: Laurent Bourgès'''
* '''Reviewer: Jim Graham'''

* Marlin integrated in OpenJDK-9 b96 (dec 2015), enhancements in 2016
* Current '''integrated releases''' within OpenJDK:
<[nowiki]
\begin{table}
\begin{tabular}{c | l} \hline
JDK-9 & Marlin 0.7.4 \\ \hline
JDK-10 & Marlin 0.7.5 \\ \hline
\end{tabular}
\end{table}
[nowiki]>




==== Marlin Releases @ github ====
Major \href{https://github.com/bourgesl/marlin-renderer/releases/}{Releases}:
<[nowiki]
{\small
\begin{tabular}{l | l} \hline
\mB{Release} & Main features \\ \hline
\mB{0.3 \tiny{[2014.1]}} & Initial: renderer context, array cache, dirty array \\ \hline
\mB{0.4} & Internal settings made customizable from system properties \\ \hline
\mB{0.5 \tiny{[2014.3]}} & Use \mB{sun.misc.Unsafe} (off-heap memory) (may crash your JVM) \\ \hline
\mB{0.5.6 \tiny{[2015.3]}} & \mB{Optimized merge sort} for newly added edges \\ \hline
\mB{0.7 \tiny{[2015.8]}} & Improve \mB{coordinate rounding around sub-pixel center} \\
& Perform \mB{DDA in scan-line edge processing} \\
& Optimized \mB{cubic / quad flattening} \\ \hline
\mB{0.7.1} & Hybrid approach (raw or \mB{RLE}) to copy pixel coverages into mask \\ \hline
\end{tabular}
}
[nowiki]>




==== Marlin Releases @ github (continued) ====
Major \href{https://github.com/bourgesl/marlin-renderer/releases/}{Releases}:
<[nowiki]
{\small
\begin{tabular}{l | l} \hline
\mB{Release} & Main features \\ \hline
\mB{0.7.2 \tiny{[2015.11]}} & \mB{Improve large pixel chunk copies} (coverage) \\ \hline
\mB{0.7.3.3} & \mB{Handle coordinate overflow}: ignore (NaN / Infinity) \\ \hline
\mB{0.7.4 \tiny{[2016.6]}} & \mB{Array cache refactoring \& tuning [--> JDK-9]} \\ \hline
\mB{0.7.5 \tiny{[2016.12]}} & Added the \mB{Double pipeline for higher accuracy [--> JDK-10]} \\
& Optimized tile filling (almost empty / full) \\
& \mB{Higher precision of the curve conversion} to line segments \\ \hline
\mB{0.8.0 \tiny{[2017.8]}} & Added \mB{path clipper for stroked shapes} (cap, joins, tx) \\ \hline
\mB{0.8.1} & Added \mB{path clipper for filled shapes} (N.Z. winding rule) \\ \hline
\end{tabular}
}
[nowiki]>




==== Feedback on contributing to OpenJDK ====

* '''Very interesting experience''' \& many things learnt
* '''License issue: OCA''' for all contributors, no third-party code !
* '''Webrev process: great but heavy task''':
** Create webrevs (hg status, webrev.ksh with options)
** Push on \url{http://cr.openjdk.java.net/~lbourges/}
** Long review threads on mailing lists for my patches (~50 mails)
** Timezone difference: delays + no direct discussion
* '''Few Java2D / computer graphics skills''': small field + NO DOC !




==== Feedback on contributing to OpenJDK (continued) ====

In General:
* '''Missing active contributors in the Graphics stack''' (Java2D \& JavaFX) !
* CI: missing 'open' multi-platform machines to perform tests \& benchmarks outside of Oracle
* '''Funding community-driven effort ?'''
** Support collaboration with outsiders (meeting, costs)
** Promote Code challenges on focused items



== How Marlin works ? ==

==== How the Java2D pipeline works ? ====

Java2D uses only 1 RenderingEngine implementation at runtime:
* SunGraphics2D.draw/fill(shape)
* AAShapePipe.renderPath(shape, stroke)
** aatg = RenderingEngine.getAATileGenerator(shape, at)
*** Coverage mask computation (tiles) as alpha transparency [0-255]
** aatg.getAlpha(byte[] alpha, ...) to get next tile ...
** output pipeline.renderPathTile(byte[] alpha):
*** MaskFill operations (software / OpenGL pipeline) on dest surface

<[code][style=basic, language=java]
RenderingEngine:
    public static synchronized RenderingEngine getInstance();
    public AATileGenerator getAATileGenerator(Shape s, 
				AffineTransform at, ...);
 AATileGenerator:
    public int getTypicalAlpha();
    public void nextTile();
    public void getAlpha(byte tile\[\], ...);
[code]>




==== How Marlin works ? Pisces / Marlin pipeline ====

MarlinRenderingEngine.getAATileGenerator(shape, stroke...):
* use shape.getPathIterator() ==> apply the pipeline to path elements:
* Dasher (optional): 
** generates path dashes (curved or segments)
* Stroker (optional): 
** generates edges around of every path element
** generates edges for decorations (cap \& joins)
* Renderer:
** curve decimation into line segments
** addLine: basic clipping + convert float to sub-pixel coordinates
** determine the shape bounding box
** perform edge rendering into tile strides ie compute pixel coverages
** fill the MarlinCache with pixel coverages as byte[] (alpha)
* MarlinTileGenerator:
** provide tile data (32x32) from MarlinCache (packed byte[])




==== How Marlin works ? the AA algorithm ====

* Scan-line algorithm [8x8 super-sampling] to estimate pixel coverages
= Active Edge table (AET) variant with "java" pointers (integer-based)
* sort edges at each scan-line
* estimate sub-pixel coverage and accumulate in the alpha row
* Once a pixel row is done: copy pixel coverages into cache
* Once 32 (tile height) pixel rows are done: perform blending \& repeat !

<<<../ATAvR.png,height=3.5cm,keepaspectratio>>>
<<<../jsgb-gpu-bg-map.png,height=3cm,keepaspectratio>>>


==== How Marlin works ? the AA algorithm ====
* Java2D's internal drawing renders rectangular tiles.
* Marlin starts with the path defining the shape
* Takes the elements of the path and flattens curves
* Uses 8x8 super-sampling to estimate coverage.
* For each sample line calculates intersections.
* Sorts where the path edges cross the scan line
* Output is one byte per pixel representing alpha coverage.
* Process 32 entire pixel rows at a time and cache sample-line intersection info
* Provide 32x32 rectangular tiles needed by the internal Java2D rendering pipelines


==== Marlin performance optimizations ====
* Initially GC allocation issue:
** Many growing arrays + zero-fill
** Many arrays involved to store edge data, alpha pixel row ...
** Value-Types may be very helpful: manually coded here !
* Marlin RendererContext (TL/CLQ) = reused memory ==> almost no GC
** kept by weak / soft reference
** class instances + initial arrays takes 512Kb
** weak-referenced array cache for larger arrays
* Other considerations: 
** Unsafe: allocate/free memory + less bound checks
** zero-fill (recycle arrays) on used parts only !
** use dirty arrays when possible: C like !




==== Marlin performance optimizations ====
* Need good profiler: use oprofile + gather internal metrics

* Fine tuning of Pisces algorithms:
** Optimized Merge Sort (in-place)
** Custom rounding [float to int]
** DDA in Renderer with correct pixel center handling
** Tile stride approach (32px) instead of all shape mask 
** Pixel alpha transfers (RLE) ==> adaptive approach
** Optimized Pixel copies (block flags)

--0.3em--

A lot more ... 




== Visual quality Quiz ==

==== Visual quality - Blind test [Image 1] ====[standout]
Who is [Ductus, Pisces, Marlin] ?
<[nowiki]
\hspace*{-1.0cm}\includegraphics[height=\paperheight-3cm,keepaspectratio]{../test_z_625k-ductus_9.png}
[nowiki]>

==== Visual quality - Blind test [Image 2] ====[standout]
Who is [Ductus, Pisces, Marlin] ?
<[nowiki]
\hspace*{-1.0cm}\includegraphics[height=\paperheight-3cm,keepaspectratio]{../test_z_625k-marlin_9.png}
[nowiki]>

==== Visual quality - Blind test [Image 3] ====[standout]
Who is [Ductus, Pisces, Marlin] ? 
<[nowiki]
\hspace*{-1.0cm}\includegraphics[height=\paperheight-3cm,keepaspectratio]{../test_z_625k-pisces_9.png}
[nowiki]>

==== Visual quality - Test result [Image 1] ====[standout]
Answer: Ductus
<[nowiki]
\hspace*{-1.0cm}\includegraphics[height=\paperheight-3cm,keepaspectratio]{../test_z_625k-ductus_9.png}
[nowiki]>

==== Visual quality - Test result [Image 2] ====[standout]
Answer: Marlin
<[nowiki]
\hspace*{-1.0cm}\includegraphics[height=\paperheight-3cm,keepaspectratio]{../test_z_625k-marlin_9.png}
[nowiki]>

==== Visual quality - Test result [Image 3] ====[standout]
Answer: Pisces
<[nowiki]
\hspace*{-1.0cm}\includegraphics[height=\paperheight-3cm,keepaspectratio]{../test_z_625k-pisces_9.png}
[nowiki]>


==== Marlin visual quality ====[standout]
Who is [Ductus, Pisces, Marlin] ? 

<[nowiki]
\hspace*{-1.225cm}
\begin{tabular}{c c c}
  \includegraphics[height=3cm,keepaspectratio]{../test_z_625k-ductus_9.png} 
& \includegraphics[height=3cm,keepaspectratio]{../test_z_625k-marlin_9.png} 
& \includegraphics[height=3cm,keepaspectratio]{../test_z_625k-pisces_9.png} \\
1. Ductus & 2. Marlin & 3. Pisces
\end{tabular}
[nowiki]>
 ==> Quite an hard challenge !



== Marlin usage \& benchmarks ==

==== How to use Marlin ? ====

* Just download any Oracle JDK-9 or OpenJDK-9 release
** \href{http://www.oracle.com/technetwork/java/javase/downloads/index.html}{Oracle JDK}
** OpenJDK builds: \href{https://adoptopenjdk.net/}{AdoptOpenJDK.net} or \href{http://zulu.org/download/}{zulu.org}

--0.6em--

* For JDK 1.7 or JDK-8: 
** Download the latest \href{https://github.com/bourgesl/marlin-renderer/releases/}{Marlin release @ github}
* See \href{https://github.com/bourgesl/marlin-renderer/wiki/How-to-use}{How to use}
* Start your java program with:
<[code][style=basic, language=bash]
java -Xbootclasspath/a:../lib/marlin-0.7.5-Unsafe.jar
     -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine
     ...
[code]>




==== MapBench benchmarks ====

* MapBench tool:
** Multi-threaded java2d benchmark that replays serialized graphics commands: see \mCN{ShapeDumperGraphics2D}
** Calibration \& warm-up phase at startup + correct statistics [95th percentile...]
* Protocol:
** Disable Hyper-Threading (in BIOS)
** Use fixed CPU frequencies (2.0 GHz) on my laptop (i7-6820 HQ)
** Setup JVM: select JDK + basic jvm settings = CMS GC 2Gb Heap
** Use the profile 'shared images' to reduce GC overhead

 ==> Reduce variability (and CPU affinity issues)


==== MapBench tests ====
* Test showcase: 9 maps, 5 large ellipse \& spiral drawings
<[nowiki]
\hspace*{1.0cm}\includegraphics[height=6.5cm,keepaspectratio]{../all.png}
[nowiki]>


=== Comparing AA renderers in JDK-9 (Ductus, Pisces, Marlin) ===

==== Before Marlin (Oracle JDK-9 EA b181) ====
* Oracle JDK \mBRed{Ductus} \& \mBBlue{Pisces}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-before.png}
[nowiki]>

==== Before Marlin (Oracle JDK-9 EA b181) ====
* Oracle JDK \mBRed{Ductus} \& \mBBlue{Pisces}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-before.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Comparison}
* Ductus: faster (1T) but scalability issue !
* Pisces: slower but higher scalability
\end{block}
\end{textblock*}


==== With Marlin (Oracle JDK-9 EA b181) ====
* Oracle JDK \mBRed{Ductus}\& \mBBlue{Pisces} \& \mBGreen{Marlin}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-with-marlin.png}
[nowiki]>

==== With Marlin (Oracle JDK-9 EA b181) ====
* Oracle JDK \mBRed{Ductus}\& \mBBlue{Pisces} \& \mBGreen{Marlin}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-with-marlin.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Marlin renderer is the winner}
* Better performance compared to Ductus (or equal) or Pisces
* Perfect scalability
\end{block}
\end{textblock*}


==== Performance gains (1 thread) ====
* \mBGreen{Marlin} gains over Oracle JDK \mBRed{Ductus}\& \mBBlue{Pisces}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-with-marlin-gain-1T.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Marlin performance gains (single thread)}
* vs Ductus: '''10\%''' to 30\%
* vs Pisces: '''125\%''' (average), up to 300\% (stroked spiral test)
\end{block}
\end{textblock*}


==== Performance gains (2 thread) ====
* \mBGreen{Marlin} gains over Oracle JDK \mBRed{Ductus}\& \mBBlue{Pisces}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-with-marlin-gain-2T.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Marlin performance gains (2 threads)}
* vs Ductus: '''75\%''' (average)
* vs Pisces: '''140\%''' (average)
\end{block}
\end{textblock*}


==== Performance gains (4 thread) ====
* \mBGreen{Marlin} gains over Oracle JDK \mBRed{Ductus}\& \mBBlue{Pisces}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../compare-with-marlin-gain-4T.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Marlin performance gains (2 threads)}
* vs Ductus: '''250\%''' (average)
* vs Pisces: '''160\%''' (average)
\end{block}
\end{textblock*}


==== Marlin Performance Summary (JDK-9) ====
* Compared to \mBRed{Ductus}:
** Same performance (1T) but better scalability up to 250\% gain (4T)
* Compared to \mBBlue{Pisces}:
** 2x faster: 100\% to 150\% gain
* Perfect scalability 1T to 4T
<[nowiki]
\hspace*{2.0cm}\includegraphics[height=4cm,keepaspectratio]{../mean-compare-with-marlin-gain.png}
[nowiki]>



=== Comparing Marlin renderer changes between JDK-9 \& OpenJDK-10 ===

==== Marlin Performance changes (JDK-9 vs OpenJDK-10) ====
* Marlin 0.7.5 vs 0.7.4 (curve accuracy, large fills, Double variant)
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../diff-marlin-time.png}
[nowiki]>

==== Marlin Performance changes (JDK-9 vs OpenJDK-10) ====
* Marlin 0.7.5 vs 0.7.4 (curve accuracy, large fills, Double variant)
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../diff-marlin-time.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Minor timing changes}
* large fills: 10\% faster (large ellipse tests)
* curves: 10\% slower (lots of curves)
\end{block}
\end{textblock*}


==== Marlin Performance Summary (JDK-9 vs OpenJDK-10) ====
* Marlin 0.7.5 vs 0.7.4 (curve accuracy, large fills, Double variant)
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../diff-marlin-gain.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Same Marlin (average) performance in OpenJDK-10 as in JDK-9}
* Large fills are 10\% faster, improved curve accuracy is only 10\% slower
* '''No difference between Float and Double Marlin variants'''
\end{block}
\end{textblock*}


=== Studying Marlin \& Java2D internal stages ===

==== Marlin internal timings ====
* 3 stages in Java2D pipeline: Path Processing --> Rendering --> Blending
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../pipeline-marlin-gain.png}
[nowiki]>

==== Marlin internal timings ====
* 3 stages in Java2D pipeline: Path Processing --> Rendering --> Blending
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../pipeline-marlin-gain.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Stage cost ratios}
* Path processing: 20 to 30\% (stroked shapes) but 3\% (filled)
* Blending: '''25\%''' (average) but up to 75\% (large ellipse fills): ''Future work ?'' 
\end{block}
\end{textblock*}


== Marlin renderer tuning ==
==== Marlin renderer tuning ====

Marlin can be customized by using system properties:
* adjust sub-pixel sampling: 
** X/Y=3: [8x8] (by default)
** smaller values are faster but less accurate
** higher values are slower but more accurate
* pixel sizing: typical largest shape width / height (2048 by default)
* adjust tile size: 6 [64x64] seems better than 5 [32x32]

Debugging:
* log statistics to know what happens
* enable checks if SEG faults or artefacts !




==== Marlin System properties ====

<[nowiki]
{\small
\begin{table} 
\begin{tabular}{l | c | l}
\hline	
System property \\ {\scriptsize -Dsun.java2d.renderer.<KEY>=} & Values & Description \\ \hline
\hline	
useThreadLocal & \mB{true} - false & RdrCtx in TL or CLQ (false) \\ \hline
useRef & \mB{soft} - weak - hard & Reference type to RdrCtx \\ \hline
\hline	
pixelsize & \mB{2048} in [64-32K] & Typical shape W/H in pixels \\ \hline
subPixel\_log2\_X & \mB{3} in [1-8] & Sub-pixel count on X axis \\ \hline
subPixel\_log2\_Y & \mB{3} in [1-8] & Sub-pixel count in Y axis \\ \hline
tileSize\_log2 & \mB{5} in [3-8] & Pixel width/height for tiles \\ \hline
\hline	
doStats & true - \mB{false} & Log rendering statistics \\ \hline
doChecks & true - \mB{false} & Perform array checks \\ \hline
useLogger & true - \mB{false} & Use j.u.l.Logger \\ \hline
\end{tabular}
\end{table}
}
[nowiki]>

Log-2 values for sub-pixel \& tile sizes:
* subPixel = 3 means 8 x 8 
* tileSize = 5 means 32 x 32




==== Other Java 9 improvements ====
JDK-9 bug fixes from \href{http://bugs.openjdk.java.net}{http://bugs.openjdk.java.net}
* \href{https://bugs.openjdk.java.net/browse/JDK-6488522}{JDK-6488522} '''PNG writer''' should permit setting compression level --> '''set compression level to medium''' [4 vs 9]

* \href{https://bugs.openjdk.java.net/browse/JDK-8078464}{JDK-8078464} '''Path2D storage growth algorithms should be less linear'''
* \href{https://bugs.openjdk.java.net/browse/JDK-8084662}{JDK-8084662} Path2D copy constructors and clone method propagate size of arrays from source path 
* \href{https://bugs.openjdk.java.net/browse/JDK-8074587}{JDK-8074587} Path2D copy constructors do not trim arrays 
* \href{https://bugs.openjdk.java.net/browse/JDK-8078192}{JDK-8078192} Path2D storage trimming 
* \href{https://bugs.openjdk.java.net/browse/JDK-8169294}{JDK-8169294} JFX Path2D storage growth algorithms should be less linear 



== MarlinFX ==

==== MarlinFX project ====

2016: '''Port Marlin into JavaFX''' Prism engine
* \url{https://github.com/bourgesl/marlin-fx}
* '''Prism integration''':
** Only concerns complex paths (not ellipse or rounded rect., 3D meshes)
** Complete mask, no more tiles
** GPU back-end is faster but uploading texture may be costly
** but single-threaded (GUI)
** TBD: use Marlin to implement createStrokedShape()

* '''Double-precision variant to improve accuracy''' on very large shapes (stroke / dashes)

* '''Integrated in OpenJFX-9''' (dec 2016) but disabled by default



==== MarlinFX System properties ====
'sun.java2d.marlin' prefix --> 'javafx.prism.marlin' prefix

TODO: complete


==== My feedback on contributing to OpenJFX ====

Contrary to Marlin, OpenJFX patches were more quickly integrated into OpenJFX-9 (Jim Graham, again) !

TODO: complete


== MarlinFX usage \& benchmarks ==

==== How to use MarlinFX ? ====
'''MarlinFX is available in all JDK-9 builds''' (Oracle, Zulu, Gluon):
* Enable MarlinFX using prism settings:
<[code][style=basic, language=bash]
java -Dprism.marlinrasterizer=true ...
[code]>* Select Marlin Double or Float variant:
<[code][style=basic, language=bash]
java -Dprism.marlinrasterizer=true -Dprism.marlin.double=true ...
[code]>* To enable the Prism log, add \mCN{-Dprism.verbose=true}:
<[code][style=basic, language=bash]
Prism pipeline init order: es2 
Using Marlin rasterizer (double)
[code]>


==== DemoFX benchmarks ====
* OpenJFX-9 b146 '''first results with DemoFX''' Triangle test \mCN{[VSYNC]}
<[columns]
[[[0.45\textwidth]]]
\hspace*{0.5cm} '''58 fps vs 48 fps = 20\% gain'''
[[[0.5\textwidth]]]
<<<../chris_demoFX_marlinFX9.png,height=6cm,keepaspectratio>>>
[columns]>


==== MapBenchFX benchmarks ====

* '''MapBenchFX''': JavaFX application to render maps
** Port of the '''Java2D MapBench benchmark''' using FXGraphics2D
** \url{https://github.com/bourgesl/mapbench-fx}

<[nowiki]
\begin{tabular}{c c c}
  \includegraphics[height=2.5cm,keepaspectratio]{../MapDemo-FX_circles.png} 
& \includegraphics[height=2.5cm,keepaspectratio]{../MapDemo-FX_map_dc.png} 
& \includegraphics[height=2.5cm,keepaspectratio]{../MapDemo-FX_map_z625k.png} 
\end{tabular}
[nowiki]>


==== MarlinFX vs Native \& Java Pisces (Oracle JDK-9 EA b181) ====
* \mBRed{Native Pisces} \& \mBBlue{Java Pisces} \& \mBGreen{MarlinFX}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../fx9-marlin.png}
[nowiki]>

==== MarlinFX vs Native \& Java Pisces (Oracle JDK-9 EA b181) ====
* \mBGreen{MarlinFX} gains over \mBRed{Native Pisces} \& \mBBlue{Java Pisces}
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../fx9-marlin-gain.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{MarlinFX renderer is the winner (on linux) }
* vs Native Pisces: '''65\%''' (average)
* vs Java Pisces: '''70\%''' (average)
\end{block}
\end{textblock*}




== Perspectives and Future Work ==

==== We want You ====

'''I may have still spare time''' to improve Marlin... '''but no more alone''' !

--0.5em--
!'''We want You'''! = your help is needed:
* adopt the '''Java Client''' group
* '''Try your applications''' \& use cases with the Marlin renderer
* '''Contribute to the Marlin project''': let's implement new algorithms (gamma correction, clipping ...)
* Provide '''feedback''', please !




==== Quality Ideas ====
* '''Handle properly the gamma correction''': 
** in MaskFill for images (C macros) \& GPU back-ends
** '''Very important for visual quality'''
** note: Stroke's width must compensate the gamma correction to avoid having thiner / fatter shapes.

<<<../LinesTest-original-maskFill-crop.png,height=2.25cm,keepaspectratio>>> \hspace{4pt}
<<<../LinesTest-gamma-corrected-maskFill-crop.png,height=2.25cm,keepaspectratio>>>


==== Quality Ideas (continued) ====
* '''Analytical pixel coverage''': using signed area coverage for a trapezoid ==> compute the exact pixel area covered by the polygon
\centering
<<<../PolygonFillTrapezoidExample.png,height=4.5cm,keepaspectratio>>>




==== Performance ideas ====

* '''Clipping''' ('''coming''' in release 0.8): 
** implement early efficient path clipping (major impact on dashes)
** take care of affine transforms (margin), stroke's cap \& joins

* Cap \& join processing (Stroker): 
** do not emit extra collinear points for squared cap \& miter joins
** improve Polygon Simplifier ?

* '''Scan-line processing''' (8x8 sub-pixels):
** 8 scan-lines per pixel row ==> compute exact area covered in 1 row
** see algorithmic approach (AGG like): \url{http://nothings.org/gamedev/rasterize/}
** may be almost as fast but a lot more precise !



=== First results of the path clipping in Marlin 0.8.1 ===

==== Performance impact of the path clipping (Marlin 0.8.1) ====
* Marlin path clipper Off vs On [clip 400 x 400]:
<[nowiki]
\hspace*{-1cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../clip-marlin-time.png}
[nowiki]>

==== Performance impact of the path clipping (Marlin 0.8.1) ====
* Gain with Marlin path clipper enabled:
<[nowiki]
\hspace*{-1cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../clip-marlin-gain.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Promising Marlin's path clipper}
* '''25\%''' gain (average)
* up to '''65\%''' gain (complex shapes)
\end{block}
\end{textblock*}




== Conclusion ==

==== Conclusion ====
* '''Marlin renderer rocks in Java 9 !'''
** '''Performance goals''' met
*** '''Scales for multiple threads''' whereas Ductus does not
*** '''Single threaded performance''' generally '''as good or better'''
** '''Quality goals''' met
* '''Marlin is now the default AA renderer''' for Oracle JDK (and OpenJDK).
* '''MarlinFX''' will be the '''default renderer in OpenJFX-10'''
* '''Coming patches''' are promising for '''OpenJDK-10'''...
* !'''What future for Java Client \& Desktop ?'''!




==== That's all folks ! ====

* '''Please ask your questions''' or '''talk with me'''
* or send them to \url{marlin-renderer@googlegroups.com}

--0.6em--

Special thanks to:
* '''Andréa Aimé \& GeoServer team'''
* '''OpenJDK''' teams for their help, reviews \& support: 
** '''Jim Graham \& Phil Race''' (Java2D)
** Mario Torre \& Dalibor Topic
** Mark Reinhold
* ALL Marlin users




==== JavaOne Sponsors (gofundme) ====
Special Thanks to all my donators:
<[columns]
[[[0.56\textwidth]]]
* '''GeoServer Project Steering Comittee'''
* '''Gluon Software'''
** Thanks for all that you do to make JavaFX an awesome UI library
* '''Dirk Lemmermann'''
** What would I do without people like you? So here you go!
[[[0.48\textwidth]]]
* '''AZUL SYSTEMS'''
* '''OpenJDK''' members: \\ '''Mark Reinhold, !Jim Graham!, \\ Phil Race, Kevin Rushforth'''
* '''Manuel Timita'''
** Your work means a lot to us!
* H. K.
[columns]>

==== JavaOne Sponsors (gofundme) ====
* !'''Andréa Aimé'''!
** Laurent helped solving a significant performance/scalability problem in server side Java applications using java2d. Let's help him reach JavaOne and talk about his work!
* '''Chris Newland'''
** Laurent has made a big contribution to OpenJDK with his Marlin and Marlin-FX high performance renderers. Let's help him get to JavaOne 2017!
<[columns]
[[[0.4\textwidth]]]
* '''Simone Giannecchini'''
* Z. B.
* '''JUGS e.V.'''
[[[0.6\textwidth]]]
* Brad Hards
* Mario Ivankovits
* Peter-Paul Koonings (GeoNovation)
[columns]>



==== JavaOne Sponsors (gofundme) ====
<[columns]
[[[0.5\textwidth]]]
* '''Michael Paus'''
* Bart van den Eijnden (osgis.nl)
* Mario Zechner
* Jody Garnett
* Tom Schindl
* Thea Aldrich
* Cédric Champeau
* Ondrej Mihályi
* Thomas Enebo
* Hiroshi Nakamura
[[[0.5\textwidth]]]
* Reinhard Pointner
* Adler Fleurant
* Paul Bramy
* Sten Nordström
* Chris Holmes
* Michael Simons
* P. S.
* A. B.
* Igor Kolomiets
* Vincent Privat
[columns]>


==== JavaOne Sponsors (gofundme) ====
* Carl Dea
** I'm not going to JavaOne, but hearing about Laurent Bourgès making Java 2D faster caught my attention. Graphics and performance engineers are true heroes. They make users of the APIs look good, while their work under the covers really do the heavy lifting. Go Laurent!
* Mike Duigou
** Would love to see JavaOne sponsor opensource committers in future years
* M. H.
* J. M.

[frame]>


<[nowiki]
\appendix

\setbeamertemplate{footline}
{%
  \leavevmode%
  \hbox{\begin{beamercolorbox}[wd=.3\paperwidth,ht=2ex,dp=1ex,leftskip=.3cm,rightskip=.3cm plus1fil]{footline}%
    \usebeamerfont{author in head/foot}\insertshortauthor \hspace{2pt} (\insertshortinstitute)
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.45\paperwidth,ht=2ex,dp=1ex,leftskip=.3cm,rightskip=.3cm plus1fil]{footlineW}%
    \usebeamercolor[fg]{normal text}
    \usebeamerfont{title in head/foot}\insertshorttitle
  \end{beamercolorbox}%
  \begin{beamercolorbox}[wd=.25\paperwidth,ht=2ex,dp=1ex,leftskip=.3cm,rightskip=.3cm plus1fil]{footlineW}%
    \usebeamercolor[fg]{normal text}
    \usebeamerfont{title in head/foot}\insertshortdate
  \end{beamercolorbox}}%
  \vskip0pt%
}

\makeatletter
\newsavebox{\myboxB}
\setbeamertemplate{frametitle}{%
  \nointerlineskip%
  \savebox{\myboxB}{%
      \begin{beamercolorbox}[%
          wd=\paperwidth,%
          sep=0pt,%
          leftskip=\metropolis@frametitle@padding,%
          rightskip=\metropolis@frametitle@padding,%
        ]{frametitle}%
      \metropolis@frametitlestrut@start\insertframetitle\metropolis@frametitlestrut@end%
      \end{beamercolorbox}%
    }
  \begin{beamercolorbox}[%
      wd=\paperwidth,%
      sep=0pt,%
      leftskip=\metropolis@frametitle@padding,%
      rightskip=\metropolis@frametitle@padding,%
    ]{frametitle}%
  \metropolis@frametitlestrut@start\insertframetitle\metropolis@frametitlestrut@end%
  \hfill%
    \raisebox{-\metropolis@frametitle@padding}{\includegraphics[height=\dimexpr\ht\myboxB+\metropolis@frametitle@padding\relax,keepaspectratio]{../marlin-logo.png}}%
    \hspace*{-\metropolis@frametitle@padding}
  \end{beamercolorbox}%
}

\addtobeamertemplate{frametitle}{}{%
    \usebeamertemplate*{progress bar in head/foot}
}
\makeatother
[nowiki]>


== Extra ==

=== Comparing Marlin renderer releases using JDK-8 ===

==== Performance evolution between Marlin 0.3 \& 0.8.1 (JDK-8) ====
* Marlin 0.3 (2014.1) \& 0.5.6 (2015) \& 0.7.4 (JDK-9) \& 0.8.1 (2017)
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../release-marlin-time.png}
[nowiki]>

==== Performance evolution between Marlin 0.3 \& 0.8.1 (JDK-8) ====
* Marlin 0.5.6 \& 0.7.4 \& 0.8.1 vs 0.3
<[nowiki]
\hspace*{-1.0cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../release-marlin-gain.png}
[nowiki]>

\begin{textblock*}{12cm}(2cm,6.35cm)
\begin{block}{Marlin performance improved through releases}
* Loss in 0.5.6 (large ellipse fills) fixed in 0.7
* Important improvements on complex stroked shapes (spirals)
\end{block}
\end{textblock*}




=== Performance impact of the sub-pixel tuning ===

==== Performance impact of the sub-pixel tuning ====
* Sub-pixel settings [1x1 to 6x6]:
<[nowiki]
\hspace*{-1.cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../subpixel-marlin-time.png}
[nowiki]>

==== Performance gain \& loss of the sub-pixel tuning ====
* Gain \& Loss of Sub-pixel settings [1 x 1 to 6 x 6] VS [3 x 3]:
<[nowiki]
\hspace*{-1cm}\includegraphics[width=\paperwidth-1.5cm,keepaspectratio]{../subpixel-marlin-gain.png}
[nowiki]>


