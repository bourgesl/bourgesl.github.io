
bourgesl@bourgesl-HP-ZBook-15-G3:~/libs/graphics-rasterizer/jdk/jdk-gh$ bash run_jmh_sort.sh
Building target 'test' in configuration 'linux-x86_64-server-release'
Compiling 31 files for BUILD_JRTFS
Creating support/modules_libs/java.base/jrt-fs.jar
Compiling 186 files for BUILD_TOOLS_JDK
Compiling 2 files for COMPILE_DEPEND
Compiling 4 properties into resource bundles for jdk.httpserver
Compiling 11 properties into resource bundles for jdk.jartool
Compiling 71 files for COMPILE_CREATE_SYMBOLS
Compiling 11 properties into resource bundles for jdk.management.agent
Compiling 4 properties into resource bundles for jdk.jdi
Compiling 9 properties into resource bundles for jdk.jlink
Compiling 4 properties into resource bundles for jdk.jlink
Compiling 1 properties into resource bundles for jdk.jlink
Compiling 224 properties into resource bundles for jdk.localedata
Compiling 11 properties into resource bundles for java.base
Compiling 6 properties into resource bundles for java.base
Compiling 2 files for BUILD_BREAKITERATOR_BASE
Compiling 2 files for BUILD_BREAKITERATOR_LD
Compiling 11 properties into resource bundles for java.logging
Compiling 3192 files for java.base
Compiling 89 properties into resource bundles for java.desktop
Compiling 71 files for COMPILE_CREATE_SYMBOLS
Creating ct.sym classes
Updating support/src.zip
Compiling 127 files for java.compiler
Compiling 18 files for java.datatransfer
Compiling 10 files for java.instrument
Compiling 35 files for java.logging
Compiling 330 files for java.management
Compiling 1848 files for java.xml
Compiling 30 files for java.security.sasl
Compiling 106 files for java.rmi
Compiling 142 files for java.net.http
Compiling 15 files for java.scripting
Compiling 5 files for java.transaction.xa
Compiling 22 files for java.smartcardio
Compiling 61 files for jdk.internal.jvmstat
Compiling 120 files for jdk.charsets
Compiling 14 files for jdk.zipfs
Compiling 35 files for jdk.crypto.ec
Compiling 68 files for jdk.dynalink
Compiling 3 files for jdk.internal.ed
Compiling 4 files for jdk.incubator.concurrentCompiling 60 files for jdk.httpserver

Compiling 50 files for jdk.incubator.vector
Compiling 103 files for jdk.internal.le
Compiling 51 files for jdk.internal.opt
Compiling 203 files for jdk.internal.vm.ci
Compiling 31 files for jdk.jartool
Compiling 24 files for jdk.management
Compiling 1 files for jdk.jdwp.agent
Compiling 260 files for jdk.jfr
Compiling 4 files for jdk.jsobject
Compiling 11 files for jdk.jstatd
Compiling 15 files for jdk.management.jfr
Compiling 1838 files for jdk.localedata
Compiling 9 files for jdk.net
Compiling 2 files for jdk.nio.mapmode
Compiling 11 files for jdk.random
Compiling 33 files for jdk.sctp
Compiling 9 files for jdk.unsupported
Compiling 94 files for jdk.xml.dom
Compiling 15 files for java.prefs
Compiling 198 files for java.naming
Compiling 77 files for java.sql
Compiling 271 files for java.xml.crypto
Compiling 15 files for jdk.attach
Compiling 413 files for jdk.compiler
Compiling 76 files for jdk.crypto.cryptoki
Compiling 1 files for jdk.internal.vm.compiler
Compiling 1 files for jdk.internal.vm.compiler.management
Compiling 40 files for jdk.jcmd
Compiling 254 files for jdk.jdi
Compiling 16 files for jdk.naming.dns
Compiling 8 files for jdk.naming.rmi
Compiling 16 files for java.management.rmi
Compiling 212 files for java.security.jgss
Compiling 56 files for java.sql.rowset
Compiling 243 files for jdk.javadoc
Compiling 30 files for jdk.management.agent
Compiling 2769 files for java.desktop
Compiling 139 files for jdk.jdeps
Compiling 97 files for jdk.jshell
Compiling 30 files for jdk.security.auth
Compiling 16 files for jdk.security.jgss
Compiling 90 files for jdk.jlink
Compiling 1 files for java.se
Compiling 18 files for jdk.accessibility
Compiling 3 files for jdk.editpad
Compiling 963 files for jdk.hotspot.agent
Compiling 64 files for jdk.jconsole
Compiling 57 files for jdk.jpackage
Compiling 8 files for jdk.unsupported.desktop
Creating support/test/lib-test/jtreg/native/bin/jvm-test-launcher from 1 file(s)
Creating support/modules_libs/java.base/libverify.so from 1 file(s)
Creating support/modules_libs/java.base/libjava.so from 66 file(s)
Creating support/native/java.base/libfdlibm.a from 57 file(s)
Creating support/modules_libs/java.base/libzip.so from 5 file(s)
Creating support/modules_libs/java.base/libjimage.so from 6 file(s)
Creating support/modules_libs/java.base/libjli.so from 8 file(s)
Creating support/modules_libs/java.base/libnet.so from 14 file(s)
Creating support/modules_libs/java.base/libnio.so from 22 file(s)
Creating support/modules_libs/java.base/libjsig.so from 1 file(s)
Creating support/modules_libs/java.base/libsyslookup.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestSVEWithJNI.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCallsNative.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestDirtyInt.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestFloatJNIArgs.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestFloatSyncJNIArgs.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTest8026328.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIterateFramesNative.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNativeCallTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libXAbortProvoker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestJNIWeak.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestCSLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestPeriodicCollectionJNI.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libLinkToNativeRBP.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestJNICritical.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestJNIGlobalRefs.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestPinnedGarbage.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestStringCriticalWithDedup.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestHeapDump.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestJNIBlockFullGC.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestGCLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJniVersion.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIBooleanTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNativeSmallIntCalls.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetBootClassPathAppendProp.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNullClassBytesTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCompleteExit.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNestmatesJNI.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSameObject.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAsyncExceptionOnMonitorEnter.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libStopAtExit.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendAtExit.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAddToSystemCLSearchOnLoad.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libClassInitBarrier.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libArrayIndexOutOfBoundsExceptionTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libArrayStoreExceptionTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNoClassDefFoundErrorTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtest-rw.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtest-rwx.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHandshakeTransitionTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libUninitializedStrings.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libDefaultMethods.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCallWithJNIWeak.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libFastGetField.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbootLoaderTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libFindClassUtf8.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIsVirtualThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libPrivateInterfaceMethods.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libReturnJNIWeak.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libToStringTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libatExit.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestBadParam.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestCheckedEnsureLocalCapacity.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestCheckedJniExceptionCheck.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestCheckedReleaseArrayElements.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestCheckedReleaseCriticalArray.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcodegenAttach.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libregisterNativesWarning.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libterminatedThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestJNI.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libLoadLibraryClass.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetModule.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIMonitor.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAsyncGetCallTraceTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHasNoEntryPoint.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libReturnError.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAddModuleExportsAndOpensTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAddModuleReadsTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAddModuleUsesAndProvidesTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCanGenerateAllClassHook.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCompiledZombie.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libDynamicCodeGenerated.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libFieldAccessWatch.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGenerateEvents1.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGenerateEvents2.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libOverpassMethods.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetLocalVars.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetLocalWithoutSuspendTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJvmtiGetAllModulesTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetNamedModuleTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetOwnedMonitorInfoTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetOwnedMonitorInfoWithEATest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetOwnedMonitorStackDepthInfoTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetOwnedMonitorStackDepthInfoWithEATest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJvmtiGetSystemPropertyTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libOneGetThreadListStackTraces.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIterateHeapWithEscapeAnalysisEnabled.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHeapMonitorTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHiddenClassSigTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIsModifiableModuleTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMAAClassFileLoadHook.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMAAClassLoadPrepare.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMAAThreadStart.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNotifyFramePopTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libRedefineDoubleDelete.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libTestManyBreakpoints.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAllowedFunctions.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendWithCurrentThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendWithObjectMonitorEnter.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendWithObjectMonitorWait.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendWithRawMonitorEnter.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVMEventTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVMObjectAlloc.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbreakpoint01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassload01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassprep01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libexception01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libexcatch01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc04.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldmod01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldmod02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframepop01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframepop02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmentry01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmentry02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmexit01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmexit02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmcontenter01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmcontentered01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmonitorwait01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmonitorwaited01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind04.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsinglestep01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsinglestep02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsinglestep03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadend01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadend02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadstart01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadstart02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadstart03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libvmobjalloc01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetAllThreadsNullTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcontmon03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframecnt02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframecnt03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframeloc03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr09.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrinfo02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat04.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetStackTraceNotSuspendedStress.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetStackTraceSuspendedStress.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSetGetThreadLocalStorageStress.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liballthr01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcontmon01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcontmon02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframecnt01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframeloc01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframeloc02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetStackTraceCurrentThreadTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr04.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr05.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr06.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr07.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr08.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrinfo01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat05.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrd01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrd02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrdlst01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrdlst02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrd01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrd02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrd03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrdlst01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrdlst02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libBreakpointInYieldTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libContFramePopTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libContStackDepthTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libContYieldBreakPointTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libContinuationTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetSetLocalTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libInterruptThreadTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMethodExitTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNullAsCurrentThreadTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libPinnedTaskTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libRawMonitorTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSelfSuspendDisablerTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendResume1.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendResume2.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSuspendResumeAll.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVThreadMonitorTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVThreadNotifyFramePopTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVThreadTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVThreadUnsupportedTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libWaitNotifySuspendedVThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetLockOwnerName.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNoFramePointer.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJvmtiUtils.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSimpleClassFileLoadHook.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdefine.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativeGC01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativeGC02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativeGC03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativeGC05.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVirtualMachine07agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVirtualMachine07agent01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVirtualMachine07agent02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVirtualMachine07agent03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libVirtualMachine09agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libforceEarlyReturn004a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libforceEarlyReturn005a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libforceEarlyReturn002a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libaddcaps001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libaddcaps002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libaddcaps003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentonload001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentonload002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentonload003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentonunload001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liballoc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach002Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach002aAgent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach008Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach009Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach012Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach014Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach015Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach015Agent01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach015Target.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach020Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach021Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach022Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach037Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach038Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach039Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach040Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach041Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach042Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach045Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach045Agent01.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach045Agent02.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach045Agent03.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach046Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libattach050Agent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsimpleAgent00.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbreakpoint001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassfloadhk009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassload001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclassprep001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrbrk001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrbrk002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrbrk005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrfldw001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrfldw002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrfmodw001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclrfmodw002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcompmethload001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcompmethunload001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcrrawmon001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcrrawmon002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdatadumpreq001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdealloc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdrrawmon001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdrrawmon003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdrrawmon004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdisposeenv001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdisposeenv002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdyncodgen001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libexception001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libexcatch001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldacc004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldmod001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfieldmod002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libForceEarlyReturn001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libforcegc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libforcegc002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframepop001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframepop002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgcfinish001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgcstart001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgcstart002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgenevents001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liballthr001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liballthr002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libargsize001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libargsize002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetavailproc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbytecodes001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbytecodes002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbytecodes003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetcaps001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetcaps002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclfld005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclfld006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclfld007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclsldr001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclsldr002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclsldr003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclsldrclss001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclsldrclss002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmthd005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmthd006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmthd007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmdf004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmdf005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmdf006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclmdf007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclsig004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclsig005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclsig006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclstat005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclstat006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetclstat007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcontmon001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcontmon002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcontmon003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcurthrcputime001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcurthrtimerinfo001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libGetEnv001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetenvstor001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgeterrname001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgeterrname002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libextevents001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libextfuncs001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldecl001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldecl002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldecl004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldmdf003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldmdf004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldnm003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldnm004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetfldnm005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframecnt001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframecnt002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframecnt003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframeloc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframeloc002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libframeloc003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetintrf005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetintrf006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetintrf007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetjlocfmt001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetjlocfmt002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetjniftab001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetjniftab002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblinetab001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblinetab002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblinetab003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libloadedclss001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libloadedclss002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetlocal001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetlocal002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblocaltab001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblocaltab002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblocaltab003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblocaltab004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblocaltab005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmaxloc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmaxloc002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdeclcls001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdeclcls002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libdeclcls003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethloc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethloc002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethmod001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethmod002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethname001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethname002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmethname003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjhashcode001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjmonusage001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjmonusage002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjmonusage003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjmonusage004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjmonusage005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjmonusage006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjsize001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjwithtags001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libownmoninf001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libownmoninf002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libownmoninf003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetphase001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetphase002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetpotcaps001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsrcdebugex001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsrcdebugex002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsrcdebugex003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsrcfn004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsrcfn005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsrcfn006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetstacktr009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsysprops001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsysprops002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsysprop001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetsysprop002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgettag001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrcputime001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrcputime002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrtimerinfo001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetthrdgrpchld001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrgrpinfo001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrgrpinfo002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrinfo001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrinfo002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetthrdstor001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthrstat005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgettime001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtimerinfo001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtopthrgrp001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtopthrgrp002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetvern001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libintrpthrd001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libintrpthrd002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libintrpthrd003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisarray004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisarray005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisfldsin002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisfldsin003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisintrf004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisintrf005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisnative001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisnative002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libisobsolete001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIsMethodSyntheticIssynth001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libissynth002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterheap007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterinstcls007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterobjreachobj001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterobjreachobj002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterobjreachobj003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterobjreachobj004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterobjreachobj005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterreachobj001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterreachobj002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterreachobj003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterreachobj004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libiterreachobj005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAbort.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCallbacks.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libConcreteKlassFilter.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHeapFilter.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNonConcreteKlassFilter.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmentry001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmentry002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmexit001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmexit002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmcontenter001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmcontentered001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmonitorwait001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libmonitorwaited001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativemethbind004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnframepop001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnframepop002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnframepop003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjfree001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libobjfree002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe010.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libpopframe011.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonenter001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonenter002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonenter003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonenter004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonexit001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonexit002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonexit003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonexit005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfy001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfy002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfy003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfy004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfyall001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfyall002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfyall003.so from 1 file(s)
Creating support/modules_libs/java.prefs/libprefs.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnntfyall004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnwait001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnwait002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnwait003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnwait004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmnwait005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstressRedefine.so from 1 file(s)
Creating support/modules_cmds/java.base/java from 1 file(s)
Creating support/modules_cmds/java.base/keytool from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass001.so from 1 file(s)
Creating support/modules_libs/java.base/jexec from 1 file(s)
Creating support/modules_libs/java.base/jspawnhelper from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass010.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass011.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass012.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass013.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass014.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass015.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass016.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass017.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass018.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass019.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass020.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass021.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass022.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass023.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass024.so from 1 file(s)
Creating support/modules_libs/java.instrument/libinstrument.so from 12 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass025.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass026.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass027.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass028.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass029.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass030.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefclass031.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librelcaps001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librelcaps002.so from 1 file(s)
Creating support/modules_libs/java.desktop/libmlib_image.so from 50 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresexhausted.so from 1 file(s)
Creating support/modules_libs/java.desktop/libawt.so from 72 file(s)
Creating support/modules_libs/java.desktop/libawt_xawt.so from 51 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrd001.so from 1 file(s)
Creating support/modules_libs/java.desktop/liblcms.so from 27 file(s)
Creating support/modules_libs/java.desktop/libjavajpeg.so from 46 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrd002.so from 1 file(s)
Creating support/modules_libs/java.desktop/libawt_headless.so from 26 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrdlst001.so from 1 file(s)
Creating support/modules_libs/java.desktop/libfontmanager.so from 64 file(s)
Creating support/modules_libs/java.desktop/libjawt.so from 1 file(s)
Creating support/modules_libs/java.desktop/libsplashscreen.so from 67 file(s)
Creating support/test/hotspot/jtreg/native/lib/libresumethrdlst002.so from 1 file(s)
Creating support/modules_libs/java.desktop/libjsound.so from 18 file(s)
Creating support/test/hotspot/jtreg/native/lib/libretransform002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libretransform003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libretransform004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentthr001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentthr002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentthr003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetbrk002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetbrk003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetbrk005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetbrk007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetbrk008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetenvstor001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetenvstor002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetenvstor003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetevntcallb001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetevntcallb002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetevntcallb003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetnotif001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetextevent001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfldw001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfldw002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfldw003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfldw004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfldw005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfldw006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfmodw001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfmodw002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfmodw003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfmodw004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfmodw005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetfmodw006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetjniftab001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetjniftab002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetlocal001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetlocal002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetlocal003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetlocal004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSetNativeMethodPrefix001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSetNativeMethodPrefix002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libSetNativeMethodPrefix002Main.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetsysprop002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetsysprop003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsettag001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetthrdstor001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetthrdstor002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetthrdstor003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetvrbflag001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetvrbflag002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsinglestep001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsinglestep002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsinglestep003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstopthrd006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstopthrd007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrd001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrd002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrd003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrdlst001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsuspendthrdlst002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadend001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadend002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadstart001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadstart002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libthreadstart003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libvmdeath001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libvminit001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libvmobjalloc001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap04t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap04t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap04t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap05t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap05t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap06t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap07t001.so from 1 file(s)
Creating support/modules_libs/java.management/libmanagement.so from 9 file(s)Creating support/test/hotspot/jtreg/native/lib/libap07t002.so from 1 file(s)

Creating support/test/hotspot/jtreg/native/lib/libap09t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap10t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap11t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libap12t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi01t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi02t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi03t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbi04t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t010.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t011.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t012.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t013.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t014.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t015.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t016.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t017.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t018.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t019.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t020.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm01t021.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libcm03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtc01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtc02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtc03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtc03t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtc04t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtc05t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem01t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t010.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t011.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem02t012.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem04t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem05t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem05t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem06t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem07t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libem07t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libex03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgf01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgf04t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgf06t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgf08t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgf08t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgf08t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs103t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs104t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs104t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs201t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs201t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs201t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs202t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs202t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs203t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs203t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs203t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs203t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs204t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs204t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs204t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs204t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs301t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs301t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs301t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs301t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs301t005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t010.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t011.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libhs302t012.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji03t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji03t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji03t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji05t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libji06t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma01t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma02t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma03t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma04t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma04t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma04t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma04t002a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma04t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma04t003a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma05t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma05t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma06t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma06t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma07t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma07t001a.so from 1 file(s)
Creating support/modules_libs/java.rmi/librmi.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma08t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma08t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t001a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t002a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t003a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t004a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t005a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t006a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t007a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libma10t008a.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp01t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp01t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp01t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp02t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp02t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp02t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp03t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp03t002.so from 1 file(s)
Creating support/modules_cmds/java.rmi/rmiregistry from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp04t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp04t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp05t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp05t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp06t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp06t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp06t003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp07t001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsp07t002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfollowref001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfollowref002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfollowref003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfollowref004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfollowref005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libfollowref006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretbase.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretfp.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretint.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretlong.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretobj.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretstr.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libearlyretvoid.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetallstktr001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetcpool001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/liblinetab004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetlocal003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgetlocal004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIsSyntheticIssynth001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMethodBind.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libOnUnload.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libStackTrace.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libagentthr.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libclsldrclss00x.so from 1 file(s)
Creating support/modules_cmds/java.scripting/jrunscript from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefineCFLH.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libextmech.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libAddToBootstrapClassLoaderSearch.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libDispose.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgc.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libenvironment.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnosuspendMonitorInfo.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnosuspendStackTrace.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librawmonitor.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libheapref.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/librefignore.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsetNullVMInit.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libtimers.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libStackTraceController.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libThreadController.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libDeadlock.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libLockingThreads.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNativeBlockedThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libRecursiveMonitoringThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libexceptionjni001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libBooleanArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libByteArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libCharArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libDoubleArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libFloatArrayCriticalLocker.so from 1 file(s)
Creating support/modules_libs/java.security.jgss/libj2gss.so from 3 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIntArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libLongArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libShortArrayCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libStringCriticalLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIGlobalRefLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNILocalRefLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIRefLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIWeakGlobalRefLocker.so from 1 file(s)
Creating support/modules_libs/java.smartcardio/libj2pcsc.so from 2 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJVMTIAllocLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMallocLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libMonitorEnterExecutor.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIreferences.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libNativeMethodsTestThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libbootclssearch_agent.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libsystemclssearch_agent.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHotSwap.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libHeap.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libJNIMonitorLocker.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libLockingThread.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libgcl001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress001.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress002.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libjnistress007.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace003.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace004.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace005.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace006.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace008.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace009.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace011.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace012.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace014.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstrace015.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libLTTest.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libIndyRedefineClass.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libstepBreakPopReturn.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libnativeAndMH.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libredefineClasses.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/lib/libProcessUtils.so from 1 file(s)
Creating support/test/hotspot/jtreg/native/bin/stack-gap from 1 file(s)
Creating support/test/hotspot/jtreg/native/bin/invoke from 1 file(s)
Creating support/test/hotspot/jtreg/native/bin/stack-tls from 1 file(s)
Creating support/test/hotspot/jtreg/native/bin/FPRegs from 1 file(s)
Creating support/test/hotspot/jtreg/native/bin/daemonDestroy from 1 file(s)
Creating support/test/hotspot/jtreg/native/bin/sigtest from 1 file(s)
Creating support/modules_libs/jdk.attach/libattach.so from 1 file(s)
Creating support/modules_cmds/jdk.compiler/javac from 1 file(s)
Creating support/modules_cmds/jdk.compiler/serialver from 1 file(s)
Creating support/modules_libs/jdk.crypto.cryptoki/libj2pkcs11.so from 14 file(s)
Creating support/modules_libs/jdk.hotspot.agent/libsaproc.so from 10 file(s)
Creating support/modules_cmds/jdk.hotspot.agent/jhsdb from 1 file(s)
Creating support/modules_cmds/jdk.httpserver/jwebserver from 1 file(s)
Creating support/modules_libs/jdk.incubator.vector/libjsvml.so from 36 file(s)
Creating support/modules_cmds/jdk.jartool/jar from 1 file(s)
Creating support/modules_cmds/jdk.jartool/jarsigner from 1 file(s)
Creating support/modules_cmds/jdk.javadoc/javadoc from 1 file(s)
Creating support/modules_cmds/jdk.jcmd/jinfo from 1 file(s)
Creating support/modules_cmds/jdk.jcmd/jmap from 1 file(s)
Creating support/modules_cmds/jdk.jcmd/jps from 1 file(s)
Creating support/modules_cmds/jdk.jcmd/jstack from 1 file(s)
Creating support/modules_cmds/jdk.jcmd/jstat from 1 file(s)
Creating support/modules_cmds/jdk.jcmd/jcmd from 1 file(s)
Creating support/modules_libs/jdk.management/libmanagement_ext.so from 8 file(s)
Creating support/modules_libs/jdk.management.agent/libmanagement_agent.so from 1 file(s)
Creating support/modules_cmds/jdk.jconsole/jconsole from 1 file(s)
Creating support/modules_cmds/jdk.jdeps/javap from 1 file(s)
Creating support/modules_cmds/jdk.jdeps/jdeps from 1 file(s)
Creating support/modules_cmds/jdk.jdeps/jdeprscan from 1 file(s)
Creating support/modules_libs/jdk.jdwp.agent/libdt_socket.so from 2 file(s)
Creating support/modules_libs/jdk.jdwp.agent/libjdwp.so from 43 file(s)
Creating support/modules_cmds/jdk.jdi/jdb from 1 file(s)
Creating support/modules_cmds/jdk.jfr/jfr from 1 file(s)
Creating support/modules_cmds/jdk.jlink/jimage from 1 file(s)
Creating support/modules_cmds/jdk.jlink/jlink from 1 file(s)
Creating support/modules_cmds/jdk.jlink/jmod from 1 file(s)
Creating jdk/modules/jdk.jpackage/jdk/jpackage/internal/resources/jpackageapplauncher from 3 file(s)
Creating jdk/modules/jdk.jpackage/jdk/jpackage/internal/resources/libjpackageapplauncheraux.so from 18 file(s)
Creating support/modules_cmds/jdk.jpackage/jpackage from 1 file(s)
Creating support/modules_cmds/jdk.jshell/jshell from 1 file(s)
Creating support/modules_cmds/jdk.jstatd/jstatd from 1 file(s)
Creating support/modules_libs/jdk.net/libextnet.so from 1 file(s)
Creating support/modules_libs/jdk.sctp/libsctp.so from 2 file(s)
Creating support/modules_libs/jdk.security.auth/libjaas.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libLinkerInvokerUnnamed.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libLinkerInvokerModule.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libAsyncInvokers.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libIntrinsics.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libLibraryLookup.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libLookupTest.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libNativeAccess.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libSafeAccess.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTestDowncall.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTestDowncallStack.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTestUpcall.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTestUpcallHighArity.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTestUpcallStack.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTestUpcallStructScope.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libVarArgs.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libLoaderLookupInvoker.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libFoo.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libMalloc.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libAsyncStackWalk.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libStackWalk.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libUpcallDeopt.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libVaList.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libVirtual.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libloadLibraryDeadlock.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libloadLibraryUnload.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libnativeLibraryTest.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libnativeMethod.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libstringPlatformChars.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libExplicitAttach.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libImplicitAttach.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libTracePinnedThreads.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libNativeThread.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libDirectIO.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libInheritedChannel.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libnativeLibrariesTest.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libBasicJNI.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libsanity_SimpleNativeLib.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libsanity_SimpleNativeLib2.so from 1 file(s)
Creating support/test/jdk/jtreg/native/lib/libFib.so from 1 file(s)
Creating support/test/jdk/jtreg/native/bin/BasicSleep from 1 file(s)
Creating support/test/jdk/jtreg/native/bin/CallerAccessTest from 1 file(s)
Creating support/test/jdk/jtreg/native/bin/NullCallerTest from 1 file(s)
Creating support/test/jdk/jtreg/native/bin/sanity_SimpleNativeLauncher from 1 file(s)
Creating support/test/jdk/jtreg/native/bin/launcher from 1 file(s)
Creating support/test/jdk/jtreg/native/bin/JliLaunchTest from 1 file(s)
Creating support/test/lib/native/lib/libLingeredApp.so from 1 file(s)
Creating support/test/lib/native/lib/libFileUtils.so from 1 file(s)
Compiling 4 files for BUILD_JIGSAW_TOOLS
Optimizing the exploded image
Creating java.compiler.jmod
Creating java.datatransfer.jmod
Creating java.desktop.jmod
Creating java.instrument.jmod
Creating java.logging.jmod
Creating java.management.jmod
Creating java.management.rmi.jmod
Creating java.naming.jmod
Creating java.net.http.jmod
Creating java.prefs.jmod
Creating java.rmi.jmod
Creating java.scripting.jmod
Creating java.se.jmod
Creating java.security.jgss.jmod
Creating java.security.sasl.jmod
Creating java.smartcardio.jmod
Creating java.sql.jmod
Creating java.sql.rowset.jmod
Creating java.transaction.xa.jmod
Creating java.xml.jmod
Creating java.xml.crypto.jmod
Creating jdk.accessibility.jmod
Creating jdk.attach.jmod
Creating jdk.charsets.jmod
Creating jdk.compiler.jmod
Creating jdk.crypto.cryptoki.jmod
Creating jdk.crypto.ec.jmod
Creating jdk.dynalink.jmod
Creating jdk.editpad.jmod
Creating jdk.hotspot.agent.jmod
Creating jdk.httpserver.jmod
Creating jdk.incubator.concurrent.jmod
Creating jdk.incubator.vector.jmod
Creating jdk.internal.ed.jmod
Creating jdk.internal.jvmstat.jmod
Creating jdk.internal.le.jmod
Creating jdk.internal.opt.jmod
Creating jdk.internal.vm.ci.jmod
Creating jdk.internal.vm.compiler.jmod
Creating jdk.internal.vm.compiler.management.jmod
Creating jdk.jartool.jmod
Creating jdk.javadoc.jmod
Creating jdk.jcmd.jmod
Creating jdk.jconsole.jmod
Creating jdk.jdeps.jmod
Creating jdk.jdi.jmod
Creating jdk.jdwp.agent.jmod
Creating jdk.jfr.jmod
Creating interim java.base.jmod
Creating interim java.logging.jmod
Creating jdk.jpackage.jmod
Creating jdk.jshell.jmod
Creating jdk.jsobject.jmod
Creating jdk.jstatd.jmod
Creating jdk.localedata.jmod
Creating jdk.management.jmod
Creating jdk.management.agent.jmod
Creating jdk.management.jfr.jmod
Creating jdk.naming.dns.jmod
Creating jdk.naming.rmi.jmod
Creating jdk.net.jmod
Creating jdk.nio.mapmode.jmod
Creating jdk.random.jmod
Creating jdk.sctp.jmod
Creating jdk.security.auth.jmod
Creating jdk.security.jgss.jmod
Creating jdk.unsupported.jmod
Creating jdk.unsupported.desktop.jmod
Creating jdk.xml.dom.jmod
Creating jdk.zipfs.jmod
Compiling 473 files for BUILD_JDK_MICROBENCHMARK
Compiling 3 files for BUILD_DEMO_CodePointIM
Updating support/demos/image/jfc/CodePointIM/src.zip
Compiling 3 files for BUILD_DEMO_FileChooserDemo
Updating support/demos/image/jfc/FileChooserDemo/src.zip
Compiling 29 files for BUILD_DEMO_SwingSet2
Updating support/demos/image/jfc/SwingSet2/src.zip
Compiling 3 files for BUILD_DEMO_Font2DTest
Updating support/demos/image/jfc/Font2DTest/src.zip
Compiling 64 files for BUILD_DEMO_J2Ddemo
Updating support/demos/image/jfc/J2Ddemo/src.zip
Compiling 15 files for BUILD_DEMO_Metalworks
Updating support/demos/image/jfc/Metalworks/src.zip
Compiling 2 files for BUILD_DEMO_Notepad
Updating support/demos/image/jfc/Notepad/src.zip
Compiling 5 files for BUILD_DEMO_Stylepad
Updating support/demos/image/jfc/Stylepad/src.zip
Compiling 5 files for BUILD_DEMO_SampleTree
Updating support/demos/image/jfc/SampleTree/src.zip
Compiling 8 files for BUILD_DEMO_TableExample
Updating support/demos/image/jfc/TableExample/src.zip
Compiling 1 files for BUILD_DEMO_TransparentRuler
Updating support/demos/image/jfc/TransparentRuler/src.zip
Creating support/demos/image/jfc/CodePointIM/CodePointIM.jar
Creating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar
Creating support/demos/image/jfc/SwingSet2/SwingSet2.jar
Creating support/demos/image/jfc/Font2DTest/Font2DTest.jar
Creating support/demos/image/jfc/J2Ddemo/J2Ddemo.jar
Creating support/demos/image/jfc/Metalworks/Metalworks.jar
Creating support/demos/image/jfc/Notepad/Notepad.jar
Creating support/demos/image/jfc/Stylepad/Stylepad.jar
Creating support/demos/image/jfc/SampleTree/SampleTree.jar
Creating support/demos/image/jfc/TableExample/TableExample.jar
Creating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar
Creating interim jimage
Compiling 2 files for CLASSLIST_JAR
Creating support/classlist.jar
Creating jdk.jlink.jmod
Creating java.base.jmod
Creating jdk image
Creating CDS archive for jdk image
Creating CDS-NOCOOPS archive for jdk image
Note: Some input files use preview features of Java SE 20.
Note: Recompile with -Xlint:preview for details.
Compiling 1 files for BUILD_INDIFY
Creating support/test/micro/native/lib/libCallOverhead.so from 1 file(s)
Creating support/test/micro/native/lib/libCallOverheadJNI.so from 1 file(s)
Creating support/test/micro/native/lib/libJNICB.so from 1 file(s)
Creating support/test/micro/native/lib/libPtr.so from 1 file(s)
Creating support/test/micro/native/lib/libQSort.so from 1 file(s)
Creating support/test/micro/native/lib/libQSortJNI.so from 1 file(s)
Creating support/test/micro/native/lib/libStrLen.so from 1 file(s)
Creating support/test/micro/native/lib/libUpcalls.so from 1 file(s)
Creating support/test/micro/native/lib/libUpcallsJNI.so from 1 file(s)
Creating support/test/micro/native/lib/libVaList.so from 1 file(s)
Creating support/test/micro/native/lib/libJNIPoint.so from 1 file(s)
Creating support/test/micro/native/lib/libPoint.so from 1 file(s)
Running Indify on microbenchmark classes
Creating images/test/micro/benchmarks.jar
Running tests using MICRO control variable 'FORK=1;RESULTS_FORMAT=json'
Test selection 'micro:java.util.ArraysSort', will run:
* micro:java.util.ArraysSort

Running test 'micro:java.util.ArraysSort'
# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 0.00% complete, ETA 01:19:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 0.36% complete, ETA 01:20:29
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ms/op
Iteration   1: ≈ 10⁻⁴ ms/op
Iteration   2: ≈ 10⁻⁴ ms/op
Iteration   3: ≈ 10⁻⁴ ms/op
Iteration   4: ≈ 10⁻⁴ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  ≈ 10⁻⁴ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 0.71% complete, ETA 01:20:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ms/op
Iteration   1: ≈ 10⁻³ ms/op
Iteration   2: ≈ 10⁻³ ms/op
Iteration   3: ≈ 10⁻³ ms/op
Iteration   4: ≈ 10⁻³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  ≈ 10⁻³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 1.07% complete, ETA 01:19:48
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ms/op
Iteration   1: ≈ 10⁻³ ms/op
Iteration   2: ≈ 10⁻³ ms/op
Iteration   3: ≈ 10⁻³ ms/op
Iteration   4: ≈ 10⁻³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  ≈ 10⁻³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 1.43% complete, ETA 01:19:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 1.79% complete, ETA 01:19:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 2.14% complete, ETA 01:18:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 2.50% complete, ETA 01:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 2.86% complete, ETA 01:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.013 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.012, 0.013, 0.015), stdev = 0.001
  CI (99.9%): [0.005, 0.021] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 3.21% complete, ETA 01:17:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.012 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.012), stdev = 0.001
  CI (99.9%): [0.005, 0.018] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 3.57% complete, ETA 01:17:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.009 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.006, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 3.93% complete, ETA 01:17:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.009 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.007, 0.011] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 4.29% complete, ETA 01:17:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.081 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.083 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.081, 0.083, 0.089), stdev = 0.004
  CI (99.9%): [0.058, 0.108] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 4.64% complete, ETA 01:16:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.072 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.069 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.066, 0.069, 0.072), stdev = 0.003
  CI (99.9%): [0.048, 0.089] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 5.00% complete, ETA 01:16:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.071 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.071 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.071, 0.071, 0.071), stdev = 0.001
  CI (99.9%): [0.070, 0.073] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 5.36% complete, ETA 01:16:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.075 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.078 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.075, 0.078, 0.087), stdev = 0.006
  CI (99.9%): [0.039, 0.116] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 5.71% complete, ETA 01:15:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.730 ms/op
Iteration   1: 0.698 ms/op
Iteration   2: 0.702 ms/op
Iteration   3: 0.697 ms/op
Iteration   4: 0.697 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.698 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.697, 0.698, 0.702), stdev = 0.002
  CI (99.9%): [0.684, 0.713] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 6.07% complete, ETA 01:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.670 ms/op
Iteration   1: 0.658 ms/op
Iteration   2: 0.658 ms/op
Iteration   3: 0.658 ms/op
Iteration   4: 0.657 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.658 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.657, 0.658, 0.658), stdev = 0.001
  CI (99.9%): [0.654, 0.662] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 6.43% complete, ETA 01:15:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.676 ms/op
Iteration   1: 0.664 ms/op
Iteration   2: 0.664 ms/op
Iteration   3: 0.664 ms/op
Iteration   4: 0.664 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.664 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.664, 0.664, 0.664), stdev = 0.001
  CI (99.9%): [0.661, 0.667] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 6.79% complete, ETA 01:15:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.701 ms/op
Iteration   1: 0.666 ms/op
Iteration   2: 0.664 ms/op
Iteration   3: 0.665 ms/op
Iteration   4: 0.665 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.665 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.664, 0.665, 0.666), stdev = 0.001
  CI (99.9%): [0.659, 0.670] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 7.14% complete, ETA 01:14:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 7.50% complete, ETA 01:14:30
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ ms/op
Iteration   1: ≈ 10⁻⁴ ms/op
Iteration   2: ≈ 10⁻⁴ ms/op
Iteration   3: ≈ 10⁻⁴ ms/op
Iteration   4: ≈ 10⁻⁴ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  ≈ 10⁻⁴ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 7.86% complete, ETA 01:14:12
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻³ ms/op
Iteration   1: ≈ 10⁻³ ms/op
Iteration   2: ≈ 10⁻³ ms/op
Iteration   3: ≈ 10⁻³ ms/op
Iteration   4: ≈ 10⁻³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  ≈ 10⁻³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 8.21% complete, ETA 01:13:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: ≈ 10⁻³ ms/op
Iteration   2: ≈ 10⁻³ ms/op
Iteration   3: ≈ 10⁻³ ms/op
Iteration   4: ≈ 10⁻³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  ≈ 10⁻³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 8.57% complete, ETA 01:13:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 8.93% complete, ETA 01:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 9.29% complete, ETA 01:13:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 9.64% complete, ETA 01:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 10.00% complete, ETA 01:12:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.014 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.012, 0.014, 0.015), stdev = 0.001
  CI (99.9%): [0.005, 0.023] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 10.36% complete, ETA 01:12:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.011 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.010, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.007, 0.015] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 10.71% complete, ETA 01:11:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.009 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.006, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 11.07% complete, ETA 01:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.007, 0.010] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 11.43% complete, ETA 01:11:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.081 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.083 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.081, 0.083, 0.088), stdev = 0.004
  CI (99.9%): [0.059, 0.107] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 11.79% complete, ETA 01:11:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.063 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.067 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.063, 0.067, 0.070), stdev = 0.004
  CI (99.9%): [0.044, 0.091] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 12.14% complete, ETA 01:10:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.072 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.072 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.072, 0.072, 0.072), stdev = 0.001
  CI (99.9%): [0.070, 0.074] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 12.50% complete, ETA 01:10:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.074 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.077 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.074, 0.077, 0.087), stdev = 0.006
  CI (99.9%): [0.036, 0.119] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 12.86% complete, ETA 01:10:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.730 ms/op
Iteration   1: 0.698 ms/op
Iteration   2: 0.698 ms/op
Iteration   3: 0.697 ms/op
Iteration   4: 0.698 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.698 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.697, 0.698, 0.698), stdev = 0.001
  CI (99.9%): [0.695, 0.701] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 13.21% complete, ETA 01:09:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.668 ms/op
Iteration   1: 0.659 ms/op
Iteration   2: 0.658 ms/op
Iteration   3: 0.657 ms/op
Iteration   4: 0.656 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.658 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.656, 0.658, 0.659), stdev = 0.001
  CI (99.9%): [0.651, 0.664] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 13.57% complete, ETA 01:09:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.677 ms/op
Iteration   1: 0.665 ms/op
Iteration   2: 0.665 ms/op
Iteration   3: 0.665 ms/op
Iteration   4: 0.665 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.665 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.665, 0.665, 0.665), stdev = 0.001
  CI (99.9%): [0.663, 0.667] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 13.93% complete, ETA 01:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.701 ms/op
Iteration   1: 0.665 ms/op
Iteration   2: 0.665 ms/op
Iteration   3: 0.664 ms/op
Iteration   4: 0.665 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.665 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.664, 0.665, 0.665), stdev = 0.001
  CI (99.9%): [0.661, 0.669] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 14.29% complete, ETA 01:09:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 14.64% complete, ETA 01:08:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 15.00% complete, ETA 01:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 15.36% complete, ETA 01:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 15.71% complete, ETA 01:07:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.048 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.048, 0.049] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 16.07% complete, ETA 01:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 16.43% complete, ETA 01:07:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.014, 0.015] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 16.79% complete, ETA 01:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.025, 0.026] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 17.14% complete, ETA 01:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.180 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.180 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.180, 0.180, 0.181), stdev = 0.001
  CI (99.9%): [0.180, 0.181] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 17.50% complete, ETA 01:06:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.054 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.045, 0.054, 0.057), stdev = 0.006
  CI (99.9%): [0.015, 0.093] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 17.86% complete, ETA 01:06:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.057 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.057, 0.057, 0.058), stdev = 0.001
  CI (99.9%): [0.057, 0.058] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 18.21% complete, ETA 01:05:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.065 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.064 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.064, 0.064, 0.065), stdev = 0.001
  CI (99.9%): [0.062, 0.067] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 18.57% complete, ETA 01:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.940 ms/op
Iteration   1: 0.896 ms/op
Iteration   2: 0.898 ms/op
Iteration   3: 0.907 ms/op
Iteration   4: 0.909 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.903 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.896, 0.903, 0.909), stdev = 0.006
  CI (99.9%): [0.861, 0.944] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 18.93% complete, ETA 01:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.178 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.186 ms/op
Iteration   3: 0.186 ms/op
Iteration   4: 0.186 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.186 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.185, 0.186, 0.186), stdev = 0.001
  CI (99.9%): [0.184, 0.188] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 19.29% complete, ETA 01:04:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.256 ms/op
Iteration   1: 0.243 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.243 ms/op
Iteration   4: 0.243 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.243 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.243, 0.243, 0.243), stdev = 0.001
  CI (99.9%): [0.242, 0.244] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 19.64% complete, ETA 01:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.311 ms/op
Iteration   1: 0.278 ms/op
Iteration   2: 0.275 ms/op
Iteration   3: 0.273 ms/op
Iteration   4: 0.273 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.275 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.273, 0.275, 0.278), stdev = 0.003
  CI (99.9%): [0.257, 0.292] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 20.00% complete, ETA 01:04:25
# Fork: 1 of 1
# Warmup Iteration   1: 2.638 ms/op
Iteration   1: 2.569 ms/op
Iteration   2: 2.594 ms/op
Iteration   3: 2.492 ms/op
Iteration   4: 2.490 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  2.536 ±(99.9%) 0.345 ms/op [Average]
  (min, avg, max) = (2.490, 2.536, 2.594), stdev = 0.053
  CI (99.9%): [2.191, 2.882] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 20.36% complete, ETA 01:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.864 ms/op
Iteration   1: 0.810 ms/op
Iteration   2: 0.811 ms/op
Iteration   3: 0.833 ms/op
Iteration   4: 0.855 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.827 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (0.810, 0.827, 0.855), stdev = 0.021
  CI (99.9%): [0.690, 0.964] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 20.71% complete, ETA 01:03:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.319 ms/op
Iteration   1: 1.260 ms/op
Iteration   2: 1.216 ms/op
Iteration   3: 1.227 ms/op
Iteration   4: 1.232 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  1.234 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (1.216, 1.234, 1.260), stdev = 0.019
  CI (99.9%): [1.111, 1.356] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 21.07% complete, ETA 01:03:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.170 ms/op
Iteration   1: 1.122 ms/op
Iteration   2: 1.142 ms/op
Iteration   3: 1.134 ms/op
Iteration   4: 1.136 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  1.133 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (1.122, 1.133, 1.142), stdev = 0.008
  CI (99.9%): [1.079, 1.188] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 21.43% complete, ETA 01:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 21.79% complete, ETA 01:02:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 22.14% complete, ETA 01:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 22.50% complete, ETA 01:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 22.86% complete, ETA 01:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.050 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.050 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.050), stdev = 0.001
  CI (99.9%): [0.049, 0.052] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 23.21% complete, ETA 01:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 23.57% complete, ETA 01:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.016 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.015, 0.016] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 23.93% complete, ETA 01:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.025, 0.026] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 24.29% complete, ETA 01:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
Iteration   1: 0.182 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.182 ms/op
Iteration   4: 0.182 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.182 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.182, 0.182, 0.182), stdev = 0.001
  CI (99.9%): [0.181, 0.183] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 24.64% complete, ETA 01:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.055 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.052 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.042, 0.052, 0.055), stdev = 0.007
  CI (99.9%): [0.009, 0.095] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 25.00% complete, ETA 01:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.058 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.058 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.058, 0.058, 0.058), stdev = 0.001
  CI (99.9%): [0.058, 0.059] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 25.36% complete, ETA 01:00:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.063 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.064 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.063, 0.064, 0.064), stdev = 0.001
  CI (99.9%): [0.059, 0.068] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 25.71% complete, ETA 00:59:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.944 ms/op
Iteration   1: 0.897 ms/op
Iteration   2: 0.900 ms/op
Iteration   3: 0.908 ms/op
Iteration   4: 0.911 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.904 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.897, 0.904, 0.911), stdev = 0.007
  CI (99.9%): [0.862, 0.946] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 26.07% complete, ETA 00:59:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.186 ms/op
Iteration   3: 0.186 ms/op
Iteration   4: 0.186 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.186 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.186, 0.186, 0.186), stdev = 0.001
  CI (99.9%): [0.184, 0.188] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 26.43% complete, ETA 00:59:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.255 ms/op
Iteration   1: 0.243 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.243 ms/op
Iteration   4: 0.243 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.243 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.243, 0.243, 0.243), stdev = 0.001
  CI (99.9%): [0.242, 0.244] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 26.79% complete, ETA 00:58:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.313 ms/op
Iteration   1: 0.279 ms/op
Iteration   2: 0.276 ms/op
Iteration   3: 0.273 ms/op
Iteration   4: 0.272 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.275 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.272, 0.275, 0.279), stdev = 0.003
  CI (99.9%): [0.256, 0.294] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 27.14% complete, ETA 00:58:40
# Fork: 1 of 1
# Warmup Iteration   1: 2.649 ms/op
Iteration   1: 2.577 ms/op
Iteration   2: 2.616 ms/op
Iteration   3: 2.508 ms/op
Iteration   4: 2.507 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  2.552 ±(99.9%) 0.350 ms/op [Average]
  (min, avg, max) = (2.507, 2.552, 2.616), stdev = 0.054
  CI (99.9%): [2.202, 2.902] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 27.50% complete, ETA 00:58:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.866 ms/op
Iteration   1: 0.812 ms/op
Iteration   2: 0.811 ms/op
Iteration   3: 0.830 ms/op
Iteration   4: 0.856 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.827 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.811, 0.827, 0.856), stdev = 0.021
  CI (99.9%): [0.690, 0.965] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 27.86% complete, ETA 00:58:05
# Fork: 1 of 1
# Warmup Iteration   1: 1.320 ms/op
Iteration   1: 1.258 ms/op
Iteration   2: 1.214 ms/op
Iteration   3: 1.224 ms/op
Iteration   4: 1.228 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  1.231 ±(99.9%) 0.123 ms/op [Average]
  (min, avg, max) = (1.214, 1.231, 1.258), stdev = 0.019
  CI (99.9%): [1.108, 1.354] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 28.21% complete, ETA 00:57:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.168 ms/op
Iteration   1: 1.120 ms/op
Iteration   2: 1.143 ms/op
Iteration   3: 1.138 ms/op
Iteration   4: 1.137 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  1.135 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (1.120, 1.135, 1.143), stdev = 0.010
  CI (99.9%): [1.071, 1.198] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 28.57% complete, ETA 00:57:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 28.93% complete, ETA 00:57:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 29.29% complete, ETA 00:56:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 29.64% complete, ETA 00:56:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 30.00% complete, ETA 00:56:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.031 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.031 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.031, 0.031, 0.031), stdev = 0.001
  CI (99.9%): [0.031, 0.031] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 30.36% complete, ETA 00:56:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.017, 0.017] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 30.71% complete, ETA 00:55:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 31.07% complete, ETA 00:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.021 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
  CI (99.9%): [0.021, 0.021] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 31.43% complete, ETA 00:55:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.284 ms/op
Iteration   1: 0.250 ms/op
Iteration   2: 0.251 ms/op
Iteration   3: 0.250 ms/op
Iteration   4: 0.247 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.249 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.247, 0.249, 0.251), stdev = 0.002
  CI (99.9%): [0.239, 0.260] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 31.79% complete, ETA 00:54:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.068 ms/op
Iteration   4: 0.068 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.068 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.068, 0.068, 0.069), stdev = 0.001
  CI (99.9%): [0.067, 0.070] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 32.14% complete, ETA 00:54:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.065 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.065 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.065, 0.065, 0.066), stdev = 0.001
  CI (99.9%): [0.064, 0.067] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 32.50% complete, ETA 00:54:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.124 ms/op
Iteration   1: 0.107 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.107 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.107 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.106, 0.107, 0.107), stdev = 0.001
  CI (99.9%): [0.104, 0.110] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 32.86% complete, ETA 00:54:04
# Fork: 1 of 1
# Warmup Iteration   1: 2.270 ms/op
Iteration   1: 1.904 ms/op
Iteration   2: 1.875 ms/op
Iteration   3: 1.865 ms/op
Iteration   4: 1.863 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  1.877 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (1.863, 1.877, 1.904), stdev = 0.019
  CI (99.9%): [1.755, 1.999] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 33.21% complete, ETA 00:53:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.527 ms/op
Iteration   1: 0.480 ms/op
Iteration   2: 0.480 ms/op
Iteration   3: 0.480 ms/op
Iteration   4: 0.480 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.480 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.480, 0.480, 0.480), stdev = 0.001
  CI (99.9%): [0.478, 0.482] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 33.57% complete, ETA 00:53:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.469 ms/op
Iteration   1: 0.439 ms/op
Iteration   2: 0.443 ms/op
Iteration   3: 0.440 ms/op
Iteration   4: 0.441 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.441 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.439, 0.441, 0.443), stdev = 0.001
  CI (99.9%): [0.432, 0.450] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 33.93% complete, ETA 00:53:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.895 ms/op
Iteration   1: 0.762 ms/op
Iteration   2: 0.745 ms/op
Iteration   3: 0.737 ms/op
Iteration   4: 0.730 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.744 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.730, 0.744, 0.762), stdev = 0.014
  CI (99.9%): [0.654, 0.833] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 34.29% complete, ETA 00:52:55
# Fork: 1 of 1
# Warmup Iteration   1: 22.427 ms/op
Iteration   1: 18.991 ms/op
Iteration   2: 19.110 ms/op
Iteration   3: 19.122 ms/op
Iteration   4: 19.091 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  19.078 ±(99.9%) 0.386 ms/op [Average]
  (min, avg, max) = (18.991, 19.078, 19.122), stdev = 0.060
  CI (99.9%): [18.692, 19.464] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 34.64% complete, ETA 00:52:38
# Fork: 1 of 1
# Warmup Iteration   1: 4.755 ms/op
Iteration   1: 4.336 ms/op
Iteration   2: 4.344 ms/op
Iteration   3: 4.326 ms/op
Iteration   4: 4.326 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  4.333 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (4.326, 4.333, 4.344), stdev = 0.008
  CI (99.9%): [4.279, 4.387] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 35.00% complete, ETA 00:52:20
# Fork: 1 of 1
# Warmup Iteration   1: 5.290 ms/op
Iteration   1: 4.984 ms/op
Iteration   2: 4.957 ms/op
Iteration   3: 4.956 ms/op
Iteration   4: 4.946 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  4.961 ±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (4.946, 4.961, 4.984), stdev = 0.016
  CI (99.9%): [4.857, 5.065] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 35.36% complete, ETA 00:52:03
# Fork: 1 of 1
# Warmup Iteration   1: 10.396 ms/op
Iteration   1: 8.434 ms/op
Iteration   2: 8.358 ms/op
Iteration   3: 8.311 ms/op
Iteration   4: 8.338 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  8.360 ±(99.9%) 0.340 ms/op [Average]
  (min, avg, max) = (8.311, 8.360, 8.434), stdev = 0.053
  CI (99.9%): [8.020, 8.700] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 35.71% complete, ETA 00:51:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 36.07% complete, ETA 00:51:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 36.43% complete, ETA 00:51:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 36.79% complete, ETA 00:50:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 37.14% complete, ETA 00:50:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.030 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.030 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.030, 0.030, 0.030), stdev = 0.001
  CI (99.9%): [0.030, 0.031] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 37.50% complete, ETA 00:50:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.018 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.018 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.018, 0.018, 0.018), stdev = 0.001
  CI (99.9%): [0.018, 0.018] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 37.86% complete, ETA 00:50:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.008] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 38.21% complete, ETA 00:49:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.021 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
  CI (99.9%): [0.021, 0.021] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 38.57% complete, ETA 00:49:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.402 ms/op
Iteration   1: 0.375 ms/op
Iteration   2: 0.374 ms/op
Iteration   3: 0.374 ms/op
Iteration   4: 0.373 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.374 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.373, 0.374, 0.375), stdev = 0.001
  CI (99.9%): [0.370, 0.378] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 38.93% complete, ETA 00:49:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.131 ms/op
Iteration   1: 0.124 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.124 ms/op
Iteration   4: 0.124 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.124 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.124, 0.124, 0.124), stdev = 0.001
  CI (99.9%): [0.122, 0.125] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 39.29% complete, ETA 00:48:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.071 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.071 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.071, 0.071, 0.072), stdev = 0.001
  CI (99.9%): [0.071, 0.072] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 39.64% complete, ETA 00:48:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
Iteration   1: 0.172 ms/op
Iteration   2: 0.172 ms/op
Iteration   3: 0.172 ms/op
Iteration   4: 0.172 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.172 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.172, 0.172, 0.172), stdev = 0.001
  CI (99.9%): [0.170, 0.173] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 40.00% complete, ETA 00:48:19
# Fork: 1 of 1
# Warmup Iteration   1: 5.138 ms/op
Iteration   1: 4.870 ms/op
Iteration   2: 4.872 ms/op
Iteration   3: 4.850 ms/op
Iteration   4: 4.881 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  4.868 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (4.850, 4.868, 4.881), stdev = 0.013
  CI (99.9%): [4.782, 4.955] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 40.36% complete, ETA 00:48:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.491 ms/op
Iteration   1: 0.482 ms/op
Iteration   2: 0.481 ms/op
Iteration   3: 0.481 ms/op
Iteration   4: 0.481 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.482 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.481, 0.482, 0.482), stdev = 0.001
  CI (99.9%): [0.478, 0.485] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 40.71% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.700 ms/op
Iteration   1: 0.678 ms/op
Iteration   2: 0.679 ms/op
Iteration   3: 0.679 ms/op
Iteration   4: 0.679 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.679 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.678, 0.679, 0.679), stdev = 0.001
  CI (99.9%): [0.676, 0.682] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 41.07% complete, ETA 00:47:27
# Fork: 1 of 1
# Warmup Iteration   1: 2.045 ms/op
Iteration   1: 1.901 ms/op
Iteration   2: 1.900 ms/op
Iteration   3: 1.904 ms/op
Iteration   4: 1.904 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  1.902 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (1.900, 1.902, 1.904), stdev = 0.002
  CI (99.9%): [1.889, 1.915] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 41.43% complete, ETA 00:47:10
# Fork: 1 of 1
# Warmup Iteration   1: 56.994 ms/op
Iteration   1: 52.999 ms/op
Iteration   2: 53.240 ms/op
Iteration   3: 52.896 ms/op
Iteration   4: 52.949 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  53.021 ±(99.9%) 0.981 ms/op [Average]
  (min, avg, max) = (52.896, 53.021, 53.240), stdev = 0.152
  CI (99.9%): [52.040, 54.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 41.79% complete, ETA 00:46:53
# Fork: 1 of 1
# Warmup Iteration   1: 4.757 ms/op
Iteration   1: 4.653 ms/op
Iteration   2: 4.663 ms/op
Iteration   3: 4.665 ms/op
Iteration   4: 4.652 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  4.658 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (4.652, 4.658, 4.665), stdev = 0.007
  CI (99.9%): [4.614, 4.703] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 42.14% complete, ETA 00:46:35
# Fork: 1 of 1
# Warmup Iteration   1: 7.722 ms/op
Iteration   1: 7.569 ms/op
Iteration   2: 7.685 ms/op
Iteration   3: 7.686 ms/op
Iteration   4: 7.686 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  7.656 ±(99.9%) 0.375 ms/op [Average]
  (min, avg, max) = (7.569, 7.656, 7.686), stdev = 0.058
  CI (99.9%): [7.281, 8.031] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 42.50% complete, ETA 00:46:18
# Fork: 1 of 1
# Warmup Iteration   1: 27.978 ms/op
Iteration   1: 26.460 ms/op
Iteration   2: 26.497 ms/op
Iteration   3: 26.327 ms/op
Iteration   4: 26.173 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  26.364 ±(99.9%) 0.949 ms/op [Average]
  (min, avg, max) = (26.173, 26.364, 26.497), stdev = 0.147
  CI (99.9%): [25.415, 27.313] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 42.86% complete, ETA 00:46:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 43.21% complete, ETA 00:45:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 43.57% complete, ETA 00:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 43.93% complete, ETA 00:45:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 44.29% complete, ETA 00:44:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.015, 0.015] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 44.64% complete, ETA 00:44:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.010, 0.010] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 45.00% complete, ETA 00:44:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 45.36% complete, ETA 00:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 45.71% complete, ETA 00:43:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
Iteration   1: 0.158 ms/op
Iteration   2: 0.157 ms/op
Iteration   3: 0.154 ms/op
Iteration   4: 0.156 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.156 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.154, 0.156, 0.158), stdev = 0.001
  CI (99.9%): [0.147, 0.166] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 46.07% complete, ETA 00:43:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.065 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.065 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.065, 0.065, 0.065), stdev = 0.001
  CI (99.9%): [0.064, 0.066] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 46.43% complete, ETA 00:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.061 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.061 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.061, 0.061, 0.061), stdev = 0.001
  CI (99.9%): [0.060, 0.062] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 46.79% complete, ETA 00:42:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.097 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.097 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.097 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.097, 0.097, 0.098), stdev = 0.001
  CI (99.9%): [0.095, 0.100] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 47.14% complete, ETA 00:42:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.432 ms/op
Iteration   1: 1.268 ms/op
Iteration   2: 1.268 ms/op
Iteration   3: 1.264 ms/op
Iteration   4: 1.264 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  1.266 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (1.264, 1.266, 1.268), stdev = 0.002
  CI (99.9%): [1.251, 1.280] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 47.50% complete, ETA 00:42:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.486 ms/op
Iteration   1: 0.445 ms/op
Iteration   2: 0.443 ms/op
Iteration   3: 0.446 ms/op
Iteration   4: 0.444 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.444 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.443, 0.444, 0.446), stdev = 0.001
  CI (99.9%): [0.435, 0.453] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 47.86% complete, ETA 00:41:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.451 ms/op
Iteration   1: 0.414 ms/op
Iteration   2: 0.412 ms/op
Iteration   3: 0.418 ms/op
Iteration   4: 0.414 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.414 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.412, 0.414, 0.418), stdev = 0.002
  CI (99.9%): [0.399, 0.430] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 48.21% complete, ETA 00:41:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.726 ms/op
Iteration   1: 0.582 ms/op
Iteration   2: 0.578 ms/op
Iteration   3: 0.575 ms/op
Iteration   4: 0.570 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.576 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.570, 0.576, 0.582), stdev = 0.005
  CI (99.9%): [0.543, 0.609] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 48.57% complete, ETA 00:41:25
# Fork: 1 of 1
# Warmup Iteration   1: 13.968 ms/op
Iteration   1: 11.728 ms/op
Iteration   2: 11.642 ms/op
Iteration   3: 11.622 ms/op
Iteration   4: 11.571 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  11.641 ±(99.9%) 0.422 ms/op [Average]
  (min, avg, max) = (11.571, 11.641, 11.728), stdev = 0.065
  CI (99.9%): [11.219, 12.063] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 48.93% complete, ETA 00:41:08
# Fork: 1 of 1
# Warmup Iteration   1: 3.335 ms/op
Iteration   1: 3.028 ms/op
Iteration   2: 3.030 ms/op
Iteration   3: 3.009 ms/op
Iteration   4: 3.012 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  3.020 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (3.009, 3.020, 3.030), stdev = 0.011
  CI (99.9%): [2.951, 3.089] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 49.29% complete, ETA 00:40:50
# Fork: 1 of 1
# Warmup Iteration   1: 3.875 ms/op
Iteration   1: 3.490 ms/op
Iteration   2: 3.450 ms/op
Iteration   3: 3.440 ms/op
Iteration   4: 3.446 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  3.457 ±(99.9%) 0.145 ms/op [Average]
  (min, avg, max) = (3.440, 3.457, 3.490), stdev = 0.022
  CI (99.9%): [3.312, 3.601] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 49.64% complete, ETA 00:40:33
# Fork: 1 of 1
# Warmup Iteration   1: 7.172 ms/op
Iteration   1: 5.595 ms/op
Iteration   2: 5.656 ms/op
Iteration   3: 5.568 ms/op
Iteration   4: 5.611 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  5.607 ±(99.9%) 0.237 ms/op [Average]
  (min, avg, max) = (5.568, 5.607, 5.656), stdev = 0.037
  CI (99.9%): [5.371, 5.844] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 50.00% complete, ETA 00:40:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 50.36% complete, ETA 00:39:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 50.71% complete, ETA 00:39:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 51.07% complete, ETA 00:39:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 51.43% complete, ETA 00:39:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.015, 0.015] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 51.79% complete, ETA 00:38:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.010, 0.010] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 52.14% complete, ETA 00:38:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 52.50% complete, ETA 00:38:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 52.86% complete, ETA 00:37:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.148 ms/op
Iteration   1: 0.137 ms/op
Iteration   2: 0.137 ms/op
Iteration   3: 0.137 ms/op
Iteration   4: 0.137 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.137 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.137, 0.137, 0.137), stdev = 0.001
  CI (99.9%): [0.135, 0.138] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 53.21% complete, ETA 00:37:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.071 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.069 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.068 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.068, 0.068, 0.069), stdev = 0.001
  CI (99.9%): [0.068, 0.069] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 53.57% complete, ETA 00:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.067 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.067 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.067, 0.067, 0.067), stdev = 0.001
  CI (99.9%): [0.065, 0.068] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 53.93% complete, ETA 00:37:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
Iteration   1: 0.108 ms/op
Iteration   2: 0.108 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.108 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.108 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.108, 0.108, 0.108), stdev = 0.001
  CI (99.9%): [0.107, 0.108] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 54.29% complete, ETA 00:36:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.925 ms/op
Iteration   1: 1.844 ms/op
Iteration   2: 1.842 ms/op
Iteration   3: 1.841 ms/op
Iteration   4: 1.840 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  1.842 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (1.840, 1.842, 1.844), stdev = 0.002
  CI (99.9%): [1.830, 1.854] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 54.64% complete, ETA 00:36:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.485 ms/op
Iteration   1: 0.472 ms/op
Iteration   2: 0.473 ms/op
Iteration   3: 0.471 ms/op
Iteration   4: 0.472 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.472 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.471, 0.472, 0.473), stdev = 0.001
  CI (99.9%): [0.467, 0.477] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 55.00% complete, ETA 00:36:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.673 ms/op
Iteration   1: 0.647 ms/op
Iteration   2: 0.648 ms/op
Iteration   3: 0.650 ms/op
Iteration   4: 0.649 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.649 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.647, 0.649, 0.650), stdev = 0.001
  CI (99.9%): [0.642, 0.655] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 55.36% complete, ETA 00:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 1.686 ms/op
Iteration   1: 1.587 ms/op
Iteration   2: 1.589 ms/op
Iteration   3: 1.591 ms/op
Iteration   4: 1.586 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  1.588 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (1.586, 1.588, 1.591), stdev = 0.002
  CI (99.9%): [1.573, 1.603] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 55.71% complete, ETA 00:35:40
# Fork: 1 of 1
# Warmup Iteration   1: 19.812 ms/op
Iteration   1: 18.879 ms/op
Iteration   2: 18.833 ms/op
Iteration   3: 18.835 ms/op
Iteration   4: 18.826 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  18.843 ±(99.9%) 0.155 ms/op [Average]
  (min, avg, max) = (18.826, 18.843, 18.879), stdev = 0.024
  CI (99.9%): [18.688, 18.998] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 56.07% complete, ETA 00:35:22
# Fork: 1 of 1
# Warmup Iteration   1: 4.616 ms/op
Iteration   1: 4.546 ms/op
Iteration   2: 4.552 ms/op
Iteration   3: 4.549 ms/op
Iteration   4: 4.562 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  4.553 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (4.546, 4.553, 4.562), stdev = 0.007
  CI (99.9%): [4.508, 4.597] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 56.43% complete, ETA 00:35:05
# Fork: 1 of 1
# Warmup Iteration   1: 6.878 ms/op
Iteration   1: 6.771 ms/op
Iteration   2: 6.870 ms/op
Iteration   3: 6.871 ms/op
Iteration   4: 6.883 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  6.849 ±(99.9%) 0.337 ms/op [Average]
  (min, avg, max) = (6.771, 6.849, 6.883), stdev = 0.052
  CI (99.9%): [6.512, 7.186] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 56.79% complete, ETA 00:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 18.240 ms/op
Iteration   1: 16.922 ms/op
Iteration   2: 16.856 ms/op
Iteration   3: 16.890 ms/op
Iteration   4: 16.919 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  16.897 ±(99.9%) 0.199 ms/op [Average]
  (min, avg, max) = (16.856, 16.897, 16.922), stdev = 0.031
  CI (99.9%): [16.698, 17.096] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 57.14% complete, ETA 00:34:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 57.50% complete, ETA 00:34:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 57.86% complete, ETA 00:33:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 58.21% complete, ETA 00:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 58.57% complete, ETA 00:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.013, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 58.93% complete, ETA 00:33:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.008] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 59.29% complete, ETA 00:32:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 59.64% complete, ETA 00:32:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.017, 0.018] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 60.00% complete, ETA 00:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
Iteration   1: 0.142 ms/op
Iteration   2: 0.142 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.140 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.141 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.139, 0.141, 0.142), stdev = 0.002
  CI (99.9%): [0.130, 0.151] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 60.36% complete, ETA 00:31:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.057 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.057, 0.057, 0.057), stdev = 0.001
  CI (99.9%): [0.055, 0.059] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 60.71% complete, ETA 00:31:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.048 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.049] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 61.07% complete, ETA 00:31:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.084 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.084 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.084 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.083, 0.084, 0.084), stdev = 0.001
  CI (99.9%): [0.081, 0.087] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 61.43% complete, ETA 00:31:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.299 ms/op
Iteration   1: 1.171 ms/op
Iteration   2: 1.167 ms/op
Iteration   3: 1.163 ms/op
Iteration   4: 1.158 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  1.165 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (1.158, 1.165, 1.171), stdev = 0.006
  CI (99.9%): [1.126, 1.203] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 61.79% complete, ETA 00:30:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.363 ms/op
Iteration   1: 0.330 ms/op
Iteration   2: 0.331 ms/op
Iteration   3: 0.332 ms/op
Iteration   4: 0.329 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.330 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.329, 0.330, 0.332), stdev = 0.001
  CI (99.9%): [0.324, 0.337] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 62.14% complete, ETA 00:30:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.389 ms/op
Iteration   1: 0.364 ms/op
Iteration   2: 0.364 ms/op
Iteration   3: 0.363 ms/op
Iteration   4: 0.362 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.364 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.362, 0.364, 0.364), stdev = 0.001
  CI (99.9%): [0.358, 0.370] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 62.50% complete, ETA 00:30:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.601 ms/op
Iteration   1: 0.506 ms/op
Iteration   2: 0.500 ms/op
Iteration   3: 0.501 ms/op
Iteration   4: 0.502 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.502 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.500, 0.502, 0.506), stdev = 0.003
  CI (99.9%): [0.486, 0.519] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 62.86% complete, ETA 00:29:55
# Fork: 1 of 1
# Warmup Iteration   1: 13.306 ms/op
Iteration   1: 11.474 ms/op
Iteration   2: 11.281 ms/op
Iteration   3: 11.312 ms/op
Iteration   4: 11.293 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  11.340 ±(99.9%) 0.585 ms/op [Average]
  (min, avg, max) = (11.281, 11.340, 11.474), stdev = 0.090
  CI (99.9%): [10.755, 11.925] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 63.21% complete, ETA 00:29:37
# Fork: 1 of 1
# Warmup Iteration   1: 2.299 ms/op
Iteration   1: 2.065 ms/op
Iteration   2: 2.056 ms/op
Iteration   3: 2.053 ms/op
Iteration   4: 2.049 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  2.056 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (2.049, 2.056, 2.065), stdev = 0.007
  CI (99.9%): [2.013, 2.098] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 63.57% complete, ETA 00:29:20
# Fork: 1 of 1
# Warmup Iteration   1: 2.760 ms/op
Iteration   1: 2.495 ms/op
Iteration   2: 2.472 ms/op
Iteration   3: 2.479 ms/op
Iteration   4: 2.470 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  2.479 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (2.470, 2.479, 2.495), stdev = 0.011
  CI (99.9%): [2.409, 2.550] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 63.93% complete, ETA 00:29:03
# Fork: 1 of 1
# Warmup Iteration   1: 6.890 ms/op
Iteration   1: 5.244 ms/op
Iteration   2: 5.285 ms/op
Iteration   3: 5.230 ms/op
Iteration   4: 5.220 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  5.245 ±(99.9%) 0.186 ms/op [Average]
  (min, avg, max) = (5.220, 5.245, 5.285), stdev = 0.029
  CI (99.9%): [5.059, 5.431] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 64.29% complete, ETA 00:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 64.64% complete, ETA 00:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 65.00% complete, ETA 00:28:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 65.36% complete, ETA 00:27:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 65.71% complete, ETA 00:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.011, 0.012] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 66.07% complete, ETA 00:27:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.008] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 66.43% complete, ETA 00:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 66.79% complete, ETA 00:26:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.017, 0.018] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 67.14% complete, ETA 00:26:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
Iteration   1: 0.141 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.141 ms/op
Iteration   4: 0.142 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.141 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.141, 0.141, 0.142), stdev = 0.001
  CI (99.9%): [0.140, 0.143] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 67.50% complete, ETA 00:26:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.053 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.053 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.053, 0.053, 0.053), stdev = 0.001
  CI (99.9%): [0.051, 0.054] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 67.86% complete, ETA 00:25:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.052 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.052 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.052, 0.052, 0.052), stdev = 0.001
  CI (99.9%): [0.051, 0.052] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 68.21% complete, ETA 00:25:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.099 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.099 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.098, 0.099, 0.099), stdev = 0.001
  CI (99.9%): [0.097, 0.100] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 68.57% complete, ETA 00:25:18
# Fork: 1 of 1
# Warmup Iteration   1: 2.334 ms/op
Iteration   1: 2.230 ms/op
Iteration   2: 2.232 ms/op
Iteration   3: 2.245 ms/op
Iteration   4: 2.233 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  2.235 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (2.230, 2.235, 2.245), stdev = 0.007
  CI (99.9%): [2.191, 2.279] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 68.93% complete, ETA 00:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.372 ms/op
Iteration   1: 0.366 ms/op
Iteration   2: 0.367 ms/op
Iteration   3: 0.366 ms/op
Iteration   4: 0.367 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.367 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.366, 0.367, 0.367), stdev = 0.001
  CI (99.9%): [0.362, 0.371] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 69.29% complete, ETA 00:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.561 ms/op
Iteration   1: 0.544 ms/op
Iteration   2: 0.544 ms/op
Iteration   3: 0.544 ms/op
Iteration   4: 0.544 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.544 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.544, 0.544, 0.544), stdev = 0.001
  CI (99.9%): [0.543, 0.545] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 69.64% complete, ETA 00:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.839 ms/op
Iteration   1: 1.725 ms/op
Iteration   2: 1.725 ms/op
Iteration   3: 1.728 ms/op
Iteration   4: 1.729 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  1.727 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (1.725, 1.727, 1.729), stdev = 0.002
  CI (99.9%): [1.714, 1.740] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 70.00% complete, ETA 00:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 23.232 ms/op
Iteration   1: 22.481 ms/op
Iteration   2: 22.566 ms/op
Iteration   3: 22.426 ms/op
Iteration   4: 22.502 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  22.494 ±(99.9%) 0.375 ms/op [Average]
  (min, avg, max) = (22.426, 22.494, 22.566), stdev = 0.058
  CI (99.9%): [22.119, 22.869] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 70.36% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 3.357 ms/op
Iteration   1: 3.308 ms/op
Iteration   2: 3.315 ms/op
Iteration   3: 3.308 ms/op
Iteration   4: 3.322 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  3.313 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (3.308, 3.313, 3.322), stdev = 0.007
  CI (99.9%): [3.269, 3.357] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 70.71% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 5.701 ms/op
Iteration   1: 5.352 ms/op
Iteration   2: 5.314 ms/op
Iteration   3: 5.296 ms/op
Iteration   4: 5.305 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  5.317 ±(99.9%) 0.159 ms/op [Average]
  (min, avg, max) = (5.296, 5.317, 5.352), stdev = 0.025
  CI (99.9%): [5.158, 5.476] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 71.07% complete, ETA 00:23:18
# Fork: 1 of 1
# Warmup Iteration   1: 22.984 ms/op
Iteration   1: 22.752 ms/op
Iteration   2: 22.449 ms/op
Iteration   3: 22.401 ms/op
Iteration   4: 22.327 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  22.482 ±(99.9%) 1.206 ms/op [Average]
  (min, avg, max) = (22.327, 22.482, 22.752), stdev = 0.187
  CI (99.9%): [21.277, 23.688] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 71.43% complete, ETA 00:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 71.79% complete, ETA 00:22:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 72.14% complete, ETA 00:22:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 72.50% complete, ETA 00:22:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 72.86% complete, ETA 00:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.024, 0.025] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 73.21% complete, ETA 00:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.011, 0.011] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 73.57% complete, ETA 00:21:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 73.93% complete, ETA 00:21:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 74.29% complete, ETA 00:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
Iteration   1: 0.229 ms/op
Iteration   2: 0.234 ms/op
Iteration   3: 0.237 ms/op
Iteration   4: 0.233 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.233 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.229, 0.233, 0.237), stdev = 0.003
  CI (99.9%): [0.214, 0.253] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 74.64% complete, ETA 00:20:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.059 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.059 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.059, 0.059, 0.059), stdev = 0.001
  CI (99.9%): [0.058, 0.060] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 75.00% complete, ETA 00:20:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.049 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.049 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.049, 0.049), stdev = 0.001
  CI (99.9%): [0.047, 0.050] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 75.36% complete, ETA 00:19:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.088 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.089 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.088, 0.089, 0.089), stdev = 0.001
  CI (99.9%): [0.086, 0.092] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 75.71% complete, ETA 00:19:33
# Fork: 1 of 1
# Warmup Iteration   1: 2.119 ms/op
Iteration   1: 1.852 ms/op
Iteration   2: 1.833 ms/op
Iteration   3: 1.836 ms/op
Iteration   4: 1.835 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  1.839 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (1.833, 1.839, 1.852), stdev = 0.009
  CI (99.9%): [1.784, 1.894] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 76.07% complete, ETA 00:19:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.372 ms/op
Iteration   1: 0.335 ms/op
Iteration   2: 0.335 ms/op
Iteration   3: 0.331 ms/op
Iteration   4: 0.332 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.333 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.331, 0.333, 0.335), stdev = 0.002
  CI (99.9%): [0.321, 0.346] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 76.43% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.450 ms/op
Iteration   1: 0.402 ms/op
Iteration   2: 0.400 ms/op
Iteration   3: 0.396 ms/op
Iteration   4: 0.395 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.398 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.395, 0.398, 0.402), stdev = 0.003
  CI (99.9%): [0.377, 0.420] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 76.79% complete, ETA 00:18:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.806 ms/op
Iteration   1: 0.679 ms/op
Iteration   2: 0.674 ms/op
Iteration   3: 0.677 ms/op
Iteration   4: 0.668 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.674 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.668, 0.674, 0.679), stdev = 0.005
  CI (99.9%): [0.644, 0.705] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 77.14% complete, ETA 00:18:24
# Fork: 1 of 1
# Warmup Iteration   1: 26.920 ms/op
Iteration   1: 19.052 ms/op
Iteration   2: 18.848 ms/op
Iteration   3: 19.079 ms/op
Iteration   4: 18.990 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  18.992 ±(99.9%) 0.667 ms/op [Average]
  (min, avg, max) = (18.848, 18.992, 19.079), stdev = 0.103
  CI (99.9%): [18.325, 19.659] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 77.50% complete, ETA 00:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 3.488 ms/op
Iteration   1: 3.134 ms/op
Iteration   2: 3.164 ms/op
Iteration   3: 3.137 ms/op
Iteration   4: 3.124 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  3.140 ±(99.9%) 0.112 ms/op [Average]
  (min, avg, max) = (3.124, 3.140, 3.164), stdev = 0.017
  CI (99.9%): [3.028, 3.251] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 77.86% complete, ETA 00:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 4.320 ms/op
Iteration   1: 3.685 ms/op
Iteration   2: 3.673 ms/op
Iteration   3: 3.662 ms/op
Iteration   4: 3.662 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  3.670 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (3.662, 3.670, 3.685), stdev = 0.011
  CI (99.9%): [3.598, 3.742] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 78.21% complete, ETA 00:17:32
# Fork: 1 of 1
# Warmup Iteration   1: 9.760 ms/op
Iteration   1: 7.310 ms/op
Iteration   2: 7.355 ms/op
Iteration   3: 7.325 ms/op
Iteration   4: 7.223 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  7.304 ±(99.9%) 0.366 ms/op [Average]
  (min, avg, max) = (7.223, 7.304, 7.355), stdev = 0.057
  CI (99.9%): [6.938, 7.669] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 78.57% complete, ETA 00:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 78.93% complete, ETA 00:16:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 79.29% complete, ETA 00:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 79.64% complete, ETA 00:16:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 80.00% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.024, 0.025] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 80.36% complete, ETA 00:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.011, 0.011] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 80.71% complete, ETA 00:15:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 81.07% complete, ETA 00:15:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 81.43% complete, ETA 00:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.407 ms/op
Iteration   1: 0.388 ms/op
Iteration   2: 0.389 ms/op
Iteration   3: 0.389 ms/op
Iteration   4: 0.388 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.388 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.388, 0.388, 0.389), stdev = 0.001
  CI (99.9%): [0.387, 0.390] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 81.79% complete, ETA 00:14:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.080 ms/op
Iteration   1: 0.077 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.077 ms/op
Iteration   4: 0.077 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.077 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.077, 0.077, 0.077), stdev = 0.001
  CI (99.9%): [0.076, 0.077] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 82.14% complete, ETA 00:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.056 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.056 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.056, 0.056, 0.057), stdev = 0.001
  CI (99.9%): [0.055, 0.057] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 82.50% complete, ETA 00:14:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.187 ms/op
Iteration   1: 0.176 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.176 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.176 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.176, 0.176, 0.176), stdev = 0.001
  CI (99.9%): [0.175, 0.177] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 82.86% complete, ETA 00:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 5.359 ms/op
Iteration   1: 5.012 ms/op
Iteration   2: 5.001 ms/op
Iteration   3: 5.029 ms/op
Iteration   4: 5.029 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  5.018 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (5.001, 5.018, 5.029), stdev = 0.014
  CI (99.9%): [4.929, 5.106] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 83.21% complete, ETA 00:13:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.366 ms/op
Iteration   1: 0.356 ms/op
Iteration   2: 0.359 ms/op
Iteration   3: 0.358 ms/op
Iteration   4: 0.360 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.358 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.356, 0.358, 0.360), stdev = 0.002
  CI (99.9%): [0.348, 0.369] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 83.57% complete, ETA 00:13:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.571 ms/op
Iteration   1: 0.546 ms/op
Iteration   2: 0.545 ms/op
Iteration   3: 0.545 ms/op
Iteration   4: 0.545 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.545 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.545, 0.545, 0.546), stdev = 0.001
  CI (99.9%): [0.543, 0.548] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 83.93% complete, ETA 00:12:56
# Fork: 1 of 1
# Warmup Iteration   1: 2.577 ms/op
Iteration   1: 2.378 ms/op
Iteration   2: 2.390 ms/op
Iteration   3: 2.377 ms/op
Iteration   4: 2.381 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  2.381 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (2.377, 2.381, 2.390), stdev = 0.006
  CI (99.9%): [2.343, 2.420] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 84.29% complete, ETA 00:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 57.586 ms/op
Iteration   1: 55.218 ms/op
Iteration   2: 55.224 ms/op
Iteration   3: 55.143 ms/op
Iteration   4: 54.997 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  55.146 ±(99.9%) 0.681 ms/op [Average]
  (min, avg, max) = (54.997, 55.146, 55.224), stdev = 0.105
  CI (99.9%): [54.465, 55.826] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 84.64% complete, ETA 00:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 3.514 ms/op
Iteration   1: 3.465 ms/op
Iteration   2: 3.464 ms/op
Iteration   3: 3.476 ms/op
Iteration   4: 3.468 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  3.468 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (3.464, 3.468, 3.476), stdev = 0.005
  CI (99.9%): [3.434, 3.502] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 85.00% complete, ETA 00:12:04
# Fork: 1 of 1
# Warmup Iteration   1: 6.275 ms/op
Iteration   1: 5.977 ms/op
Iteration   2: 5.997 ms/op
Iteration   3: 6.103 ms/op
Iteration   4: 6.097 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  6.044 ±(99.9%) 0.427 ms/op [Average]
  (min, avg, max) = (5.977, 6.044, 6.103), stdev = 0.066
  CI (99.9%): [5.616, 6.471] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 85.36% complete, ETA 00:11:47
# Fork: 1 of 1
# Warmup Iteration   1: 28.940 ms/op
Iteration   1: 26.668 ms/op
Iteration   2: 26.572 ms/op
Iteration   3: 26.584 ms/op
Iteration   4: 26.696 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  26.630 ±(99.9%) 0.396 ms/op [Average]
  (min, avg, max) = (26.572, 26.630, 26.696), stdev = 0.061
  CI (99.9%): [26.234, 27.026] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 85.71% complete, ETA 00:11:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 86.07% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 86.43% complete, ETA 00:10:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 86.79% complete, ETA 00:10:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 87.14% complete, ETA 00:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.048 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.048, 0.049] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 87.50% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 87.86% complete, ETA 00:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.014 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.015), stdev = 0.001
  CI (99.9%): [0.014, 0.015] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 88.21% complete, ETA 00:09:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.025 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.026), stdev = 0.001
  CI (99.9%): [0.025, 0.026] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 88.57% complete, ETA 00:09:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
Iteration   1: 0.176 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.176 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.176 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.176, 0.176, 0.176), stdev = 0.001
  CI (99.9%): [0.175, 0.177] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 88.93% complete, ETA 00:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.044 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.043, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.041, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 89.29% complete, ETA 00:08:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.056 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.056 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.055, 0.056, 0.056), stdev = 0.001
  CI (99.9%): [0.055, 0.057] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 89.64% complete, ETA 00:08:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.047 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.047 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.048), stdev = 0.001
  CI (99.9%): [0.046, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 90.00% complete, ETA 00:08:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.968 ms/op
Iteration   1: 0.924 ms/op
Iteration   2: 0.925 ms/op
Iteration   3: 0.924 ms/op
Iteration   4: 0.924 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.924 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.924, 0.924, 0.925), stdev = 0.001
  CI (99.9%): [0.923, 0.926] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 90.36% complete, ETA 00:07:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.192 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.192 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.192, 0.192, 0.192), stdev = 0.001
  CI (99.9%): [0.191, 0.193] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 90.71% complete, ETA 00:07:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.237 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.219 ms/op
Iteration   3: 0.219 ms/op
Iteration   4: 0.219 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.219 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.219, 0.219, 0.219), stdev = 0.001
  CI (99.9%): [0.218, 0.220] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 91.07% complete, ETA 00:07:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.293 ms/op
Iteration   1: 0.262 ms/op
Iteration   2: 0.253 ms/op
Iteration   3: 0.249 ms/op
Iteration   4: 0.250 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.254 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.249, 0.254, 0.262), stdev = 0.006
  CI (99.9%): [0.216, 0.291] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 91.43% complete, ETA 00:06:54
# Fork: 1 of 1
# Warmup Iteration   1: 2.652 ms/op
Iteration   1: 2.584 ms/op
Iteration   2: 2.623 ms/op
Iteration   3: 2.524 ms/op
Iteration   4: 2.511 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  2.561 ±(99.9%) 0.339 ms/op [Average]
  (min, avg, max) = (2.511, 2.561, 2.623), stdev = 0.053
  CI (99.9%): [2.221, 2.900] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 91.79% complete, ETA 00:06:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.845 ms/op
Iteration   1: 0.793 ms/op
Iteration   2: 0.793 ms/op
Iteration   3: 0.795 ms/op
Iteration   4: 0.794 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.794 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.793, 0.794, 0.795), stdev = 0.001
  CI (99.9%): [0.788, 0.800] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 92.14% complete, ETA 00:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 1.309 ms/op
Iteration   1: 1.281 ms/op
Iteration   2: 1.226 ms/op
Iteration   3: 1.239 ms/op
Iteration   4: 1.225 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  1.243 ±(99.9%) 0.170 ms/op [Average]
  (min, avg, max) = (1.225, 1.243, 1.281), stdev = 0.026
  CI (99.9%): [1.073, 1.412] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 92.50% complete, ETA 00:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 1.144 ms/op
Iteration   1: 1.084 ms/op
Iteration   2: 1.154 ms/op
Iteration   3: 1.068 ms/op
Iteration   4: 1.102 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  1.102 ±(99.9%) 0.242 ms/op [Average]
  (min, avg, max) = (1.068, 1.102, 1.154), stdev = 0.037
  CI (99.9%): [0.860, 1.344] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 92.86% complete, ETA 00:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 93.21% complete, ETA 00:05:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 93.57% complete, ETA 00:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 93.93% complete, ETA 00:04:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 94.29% complete, ETA 00:04:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.048 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.048, 0.049] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 94.64% complete, ETA 00:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 95.00% complete, ETA 00:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.016 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.016, 0.016] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 95.36% complete, ETA 00:03:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.025, 0.026] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 95.71% complete, ETA 00:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
Iteration   1: 0.176 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.176 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.176 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.176, 0.176, 0.176), stdev = 0.001
  CI (99.9%): [0.175, 0.177] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 96.07% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.044 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.043, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.041, 0.047] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 96.43% complete, ETA 00:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.056 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.055 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.054, 0.055, 0.056), stdev = 0.001
  CI (99.9%): [0.049, 0.062] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 96.79% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.047 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.047 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 97.14% complete, ETA 00:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.960 ms/op
Iteration   1: 0.915 ms/op
Iteration   2: 0.916 ms/op
Iteration   3: 0.922 ms/op
Iteration   4: 0.923 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.919 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.915, 0.919, 0.923), stdev = 0.004
  CI (99.9%): [0.893, 0.945] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 97.50% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.192 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.192 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.192, 0.192, 0.192), stdev = 0.001
  CI (99.9%): [0.191, 0.192] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 97.86% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.234 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.219 ms/op
Iteration   3: 0.219 ms/op
Iteration   4: 0.219 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.219 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.219, 0.219, 0.219), stdev = 0.001
  CI (99.9%): [0.218, 0.220] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 98.21% complete, ETA 00:01:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.293 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.254 ms/op
Iteration   3: 0.250 ms/op
Iteration   4: 0.249 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.254 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.249, 0.254, 0.261), stdev = 0.006
  CI (99.9%): [0.217, 0.290] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 98.57% complete, ETA 00:01:09
# Fork: 1 of 1
# Warmup Iteration   1: 2.635 ms/op
Iteration   1: 2.571 ms/op
Iteration   2: 2.615 ms/op
Iteration   3: 2.526 ms/op
Iteration   4: 2.505 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  2.554 ±(99.9%) 0.317 ms/op [Average]
  (min, avg, max) = (2.505, 2.554, 2.615), stdev = 0.049
  CI (99.9%): [2.237, 2.871] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 98.93% complete, ETA 00:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.846 ms/op
Iteration   1: 0.794 ms/op
Iteration   2: 0.793 ms/op
Iteration   3: 0.795 ms/op
Iteration   4: 0.794 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.794 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.793, 0.794, 0.795), stdev = 0.001
  CI (99.9%): [0.789, 0.799] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 99.29% complete, ETA 00:00:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.317 ms/op
Iteration   1: 1.264 ms/op
Iteration   2: 1.219 ms/op
Iteration   3: 1.233 ms/op
Iteration   4: 1.235 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  1.238 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (1.219, 1.238, 1.264), stdev = 0.019
  CI (99.9%): [1.116, 1.359] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 99.64% complete, ETA 00:00:17
# Fork: 1 of 1
# Warmup Iteration   1: 1.147 ms/op
Iteration   1: 1.077 ms/op
Iteration   2: 1.098 ms/op
Iteration   3: 1.150 ms/op
Iteration   4: 1.145 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  1.118 ±(99.9%) 0.231 ms/op [Average]
  (min, avg, max) = (1.077, 1.118, 1.150), stdev = 0.036
  CI (99.9%): [0.887, 1.348] (assumes normal distribution)


# Run complete. Total time: 01:20:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                            (size)    (type)  Mode  Cnt   Score    Error  Units
ArraysSort.Byte.testParallelSort        100    RANDOM  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Byte.testParallelSort        100  REPEATED  avgt    4  ≈ 10⁻⁴           ms/op
ArraysSort.Byte.testParallelSort        100   STAGGER  avgt    4  ≈ 10⁻³           ms/op
ArraysSort.Byte.testParallelSort        100   SHUFFLE  avgt    4  ≈ 10⁻³           ms/op
ArraysSort.Byte.testParallelSort       1000    RANDOM  avgt    4   0.006 ±  0.004  ms/op
ArraysSort.Byte.testParallelSort       1000  REPEATED  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Byte.testParallelSort       1000   STAGGER  avgt    4   0.002 ±  0.002  ms/op
ArraysSort.Byte.testParallelSort       1000   SHUFFLE  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Byte.testParallelSort      10000    RANDOM  avgt    4   0.013 ±  0.008  ms/op
ArraysSort.Byte.testParallelSort      10000  REPEATED  avgt    4   0.012 ±  0.007  ms/op
ArraysSort.Byte.testParallelSort      10000   STAGGER  avgt    4   0.009 ±  0.003  ms/op
ArraysSort.Byte.testParallelSort      10000   SHUFFLE  avgt    4   0.009 ±  0.002  ms/op
ArraysSort.Byte.testParallelSort     100000    RANDOM  avgt    4   0.083 ±  0.025  ms/op
ArraysSort.Byte.testParallelSort     100000  REPEATED  avgt    4   0.069 ±  0.020  ms/op
ArraysSort.Byte.testParallelSort     100000   STAGGER  avgt    4   0.071 ±  0.001  ms/op
ArraysSort.Byte.testParallelSort     100000   SHUFFLE  avgt    4   0.078 ±  0.039  ms/op
ArraysSort.Byte.testParallelSort    1000000    RANDOM  avgt    4   0.698 ±  0.015  ms/op
ArraysSort.Byte.testParallelSort    1000000  REPEATED  avgt    4   0.658 ±  0.004  ms/op
ArraysSort.Byte.testParallelSort    1000000   STAGGER  avgt    4   0.664 ±  0.003  ms/op
ArraysSort.Byte.testParallelSort    1000000   SHUFFLE  avgt    4   0.665 ±  0.005  ms/op
ArraysSort.Byte.testSort                100    RANDOM  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Byte.testSort                100  REPEATED  avgt    4  ≈ 10⁻⁴           ms/op
ArraysSort.Byte.testSort                100   STAGGER  avgt    4  ≈ 10⁻³           ms/op
ArraysSort.Byte.testSort                100   SHUFFLE  avgt    4  ≈ 10⁻³           ms/op
ArraysSort.Byte.testSort               1000    RANDOM  avgt    4   0.006 ±  0.004  ms/op
ArraysSort.Byte.testSort               1000  REPEATED  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Byte.testSort               1000   STAGGER  avgt    4   0.002 ±  0.002  ms/op
ArraysSort.Byte.testSort               1000   SHUFFLE  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Byte.testSort              10000    RANDOM  avgt    4   0.014 ±  0.009  ms/op
ArraysSort.Byte.testSort              10000  REPEATED  avgt    4   0.011 ±  0.004  ms/op
ArraysSort.Byte.testSort              10000   STAGGER  avgt    4   0.009 ±  0.003  ms/op
ArraysSort.Byte.testSort              10000   SHUFFLE  avgt    4   0.009 ±  0.001  ms/op
ArraysSort.Byte.testSort             100000    RANDOM  avgt    4   0.083 ±  0.024  ms/op
ArraysSort.Byte.testSort             100000  REPEATED  avgt    4   0.067 ±  0.023  ms/op
ArraysSort.Byte.testSort             100000   STAGGER  avgt    4   0.072 ±  0.002  ms/op
ArraysSort.Byte.testSort             100000   SHUFFLE  avgt    4   0.077 ±  0.041  ms/op
ArraysSort.Byte.testSort            1000000    RANDOM  avgt    4   0.698 ±  0.003  ms/op
ArraysSort.Byte.testSort            1000000  REPEATED  avgt    4   0.658 ±  0.006  ms/op
ArraysSort.Byte.testSort            1000000   STAGGER  avgt    4   0.665 ±  0.002  ms/op
ArraysSort.Byte.testSort            1000000   SHUFFLE  avgt    4   0.665 ±  0.004  ms/op
ArraysSort.Char.testParallelSort        100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Char.testParallelSort        100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Char.testParallelSort        100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Char.testParallelSort        100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000    RANDOM  avgt    4   0.048 ±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000  REPEATED  avgt    4   0.005 ±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000   STAGGER  avgt    4   0.015 ±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000   SHUFFLE  avgt    4   0.025 ±  0.001  ms/op
ArraysSort.Char.testParallelSort      10000    RANDOM  avgt    4   0.180 ±  0.001  ms/op
ArraysSort.Char.testParallelSort      10000  REPEATED  avgt    4   0.054 ±  0.039  ms/op
ArraysSort.Char.testParallelSort      10000   STAGGER  avgt    4   0.057 ±  0.001  ms/op
ArraysSort.Char.testParallelSort      10000   SHUFFLE  avgt    4   0.064 ±  0.002  ms/op
ArraysSort.Char.testParallelSort     100000    RANDOM  avgt    4   0.903 ±  0.042  ms/op
ArraysSort.Char.testParallelSort     100000  REPEATED  avgt    4   0.186 ±  0.002  ms/op
ArraysSort.Char.testParallelSort     100000   STAGGER  avgt    4   0.243 ±  0.001  ms/op
ArraysSort.Char.testParallelSort     100000   SHUFFLE  avgt    4   0.275 ±  0.017  ms/op
ArraysSort.Char.testParallelSort    1000000    RANDOM  avgt    4   2.536 ±  0.345  ms/op
ArraysSort.Char.testParallelSort    1000000  REPEATED  avgt    4   0.827 ±  0.137  ms/op
ArraysSort.Char.testParallelSort    1000000   STAGGER  avgt    4   1.234 ±  0.122  ms/op
ArraysSort.Char.testParallelSort    1000000   SHUFFLE  avgt    4   1.133 ±  0.055  ms/op
ArraysSort.Char.testSort                100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Char.testSort                100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Char.testSort                100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Char.testSort                100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Char.testSort               1000    RANDOM  avgt    4   0.050 ±  0.002  ms/op
ArraysSort.Char.testSort               1000  REPEATED  avgt    4   0.005 ±  0.001  ms/op
ArraysSort.Char.testSort               1000   STAGGER  avgt    4   0.016 ±  0.001  ms/op
ArraysSort.Char.testSort               1000   SHUFFLE  avgt    4   0.025 ±  0.001  ms/op
ArraysSort.Char.testSort              10000    RANDOM  avgt    4   0.182 ±  0.001  ms/op
ArraysSort.Char.testSort              10000  REPEATED  avgt    4   0.052 ±  0.043  ms/op
ArraysSort.Char.testSort              10000   STAGGER  avgt    4   0.058 ±  0.001  ms/op
ArraysSort.Char.testSort              10000   SHUFFLE  avgt    4   0.064 ±  0.004  ms/op
ArraysSort.Char.testSort             100000    RANDOM  avgt    4   0.904 ±  0.042  ms/op
ArraysSort.Char.testSort             100000  REPEATED  avgt    4   0.186 ±  0.002  ms/op
ArraysSort.Char.testSort             100000   STAGGER  avgt    4   0.243 ±  0.001  ms/op
ArraysSort.Char.testSort             100000   SHUFFLE  avgt    4   0.275 ±  0.019  ms/op
ArraysSort.Char.testSort            1000000    RANDOM  avgt    4   2.552 ±  0.350  ms/op
ArraysSort.Char.testSort            1000000  REPEATED  avgt    4   0.827 ±  0.138  ms/op
ArraysSort.Char.testSort            1000000   STAGGER  avgt    4   1.231 ±  0.123  ms/op
ArraysSort.Char.testSort            1000000   SHUFFLE  avgt    4   1.135 ±  0.064  ms/op
ArraysSort.Double.testParallelSort      100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Double.testParallelSort      100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Double.testParallelSort      100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Double.testParallelSort      100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000    RANDOM  avgt    4   0.031 ±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000  REPEATED  avgt    4   0.017 ±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000   STAGGER  avgt    4   0.007 ±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000   SHUFFLE  avgt    4   0.021 ±  0.001  ms/op
ArraysSort.Double.testParallelSort    10000    RANDOM  avgt    4   0.249 ±  0.011  ms/op
ArraysSort.Double.testParallelSort    10000  REPEATED  avgt    4   0.068 ±  0.002  ms/op
ArraysSort.Double.testParallelSort    10000   STAGGER  avgt    4   0.065 ±  0.002  ms/op
ArraysSort.Double.testParallelSort    10000   SHUFFLE  avgt    4   0.107 ±  0.003  ms/op
ArraysSort.Double.testParallelSort   100000    RANDOM  avgt    4   1.877 ±  0.122  ms/op
ArraysSort.Double.testParallelSort   100000  REPEATED  avgt    4   0.480 ±  0.002  ms/op
ArraysSort.Double.testParallelSort   100000   STAGGER  avgt    4   0.441 ±  0.009  ms/op
ArraysSort.Double.testParallelSort   100000   SHUFFLE  avgt    4   0.744 ±  0.089  ms/op
ArraysSort.Double.testParallelSort  1000000    RANDOM  avgt    4  19.078 ±  0.386  ms/op
ArraysSort.Double.testParallelSort  1000000  REPEATED  avgt    4   4.333 ±  0.054  ms/op
ArraysSort.Double.testParallelSort  1000000   STAGGER  avgt    4   4.961 ±  0.104  ms/op
ArraysSort.Double.testParallelSort  1000000   SHUFFLE  avgt    4   8.360 ±  0.340  ms/op
ArraysSort.Double.testSort              100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Double.testSort              100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Double.testSort              100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Double.testSort              100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Double.testSort             1000    RANDOM  avgt    4   0.030 ±  0.001  ms/op
ArraysSort.Double.testSort             1000  REPEATED  avgt    4   0.018 ±  0.001  ms/op
ArraysSort.Double.testSort             1000   STAGGER  avgt    4   0.007 ±  0.001  ms/op
ArraysSort.Double.testSort             1000   SHUFFLE  avgt    4   0.021 ±  0.001  ms/op
ArraysSort.Double.testSort            10000    RANDOM  avgt    4   0.374 ±  0.004  ms/op
ArraysSort.Double.testSort            10000  REPEATED  avgt    4   0.124 ±  0.001  ms/op
ArraysSort.Double.testSort            10000   STAGGER  avgt    4   0.071 ±  0.001  ms/op
ArraysSort.Double.testSort            10000   SHUFFLE  avgt    4   0.172 ±  0.001  ms/op
ArraysSort.Double.testSort           100000    RANDOM  avgt    4   4.868 ±  0.086  ms/op
ArraysSort.Double.testSort           100000  REPEATED  avgt    4   0.482 ±  0.003  ms/op
ArraysSort.Double.testSort           100000   STAGGER  avgt    4   0.679 ±  0.003  ms/op
ArraysSort.Double.testSort           100000   SHUFFLE  avgt    4   1.902 ±  0.013  ms/op
ArraysSort.Double.testSort          1000000    RANDOM  avgt    4  53.021 ±  0.981  ms/op
ArraysSort.Double.testSort          1000000  REPEATED  avgt    4   4.658 ±  0.045  ms/op
ArraysSort.Double.testSort          1000000   STAGGER  avgt    4   7.656 ±  0.375  ms/op
ArraysSort.Double.testSort          1000000   SHUFFLE  avgt    4  26.364 ±  0.949  ms/op
ArraysSort.Float.testParallelSort       100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Float.testParallelSort       100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Float.testParallelSort       100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Float.testParallelSort       100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000    RANDOM  avgt    4   0.015 ±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000  REPEATED  avgt    4   0.010 ±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000   STAGGER  avgt    4   0.007 ±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000   SHUFFLE  avgt    4   0.019 ±  0.001  ms/op
ArraysSort.Float.testParallelSort     10000    RANDOM  avgt    4   0.156 ±  0.010  ms/op
ArraysSort.Float.testParallelSort     10000  REPEATED  avgt    4   0.065 ±  0.001  ms/op
ArraysSort.Float.testParallelSort     10000   STAGGER  avgt    4   0.061 ±  0.001  ms/op
ArraysSort.Float.testParallelSort     10000   SHUFFLE  avgt    4   0.097 ±  0.003  ms/op
ArraysSort.Float.testParallelSort    100000    RANDOM  avgt    4   1.266 ±  0.014  ms/op
ArraysSort.Float.testParallelSort    100000  REPEATED  avgt    4   0.444 ±  0.009  ms/op
ArraysSort.Float.testParallelSort    100000   STAGGER  avgt    4   0.414 ±  0.016  ms/op
ArraysSort.Float.testParallelSort    100000   SHUFFLE  avgt    4   0.576 ±  0.033  ms/op
ArraysSort.Float.testParallelSort   1000000    RANDOM  avgt    4  11.641 ±  0.422  ms/op
ArraysSort.Float.testParallelSort   1000000  REPEATED  avgt    4   3.020 ±  0.069  ms/op
ArraysSort.Float.testParallelSort   1000000   STAGGER  avgt    4   3.457 ±  0.145  ms/op
ArraysSort.Float.testParallelSort   1000000   SHUFFLE  avgt    4   5.607 ±  0.237  ms/op
ArraysSort.Float.testSort               100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Float.testSort               100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Float.testSort               100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Float.testSort               100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Float.testSort              1000    RANDOM  avgt    4   0.015 ±  0.001  ms/op
ArraysSort.Float.testSort              1000  REPEATED  avgt    4   0.010 ±  0.001  ms/op
ArraysSort.Float.testSort              1000   STAGGER  avgt    4   0.007 ±  0.001  ms/op
ArraysSort.Float.testSort              1000   SHUFFLE  avgt    4   0.019 ±  0.001  ms/op
ArraysSort.Float.testSort             10000    RANDOM  avgt    4   0.137 ±  0.001  ms/op
ArraysSort.Float.testSort             10000  REPEATED  avgt    4   0.068 ±  0.001  ms/op
ArraysSort.Float.testSort             10000   STAGGER  avgt    4   0.067 ±  0.001  ms/op
ArraysSort.Float.testSort             10000   SHUFFLE  avgt    4   0.108 ±  0.001  ms/op
ArraysSort.Float.testSort            100000    RANDOM  avgt    4   1.842 ±  0.012  ms/op
ArraysSort.Float.testSort            100000  REPEATED  avgt    4   0.472 ±  0.005  ms/op
ArraysSort.Float.testSort            100000   STAGGER  avgt    4   0.649 ±  0.007  ms/op
ArraysSort.Float.testSort            100000   SHUFFLE  avgt    4   1.588 ±  0.015  ms/op
ArraysSort.Float.testSort           1000000    RANDOM  avgt    4  18.843 ±  0.155  ms/op
ArraysSort.Float.testSort           1000000  REPEATED  avgt    4   4.553 ±  0.045  ms/op
ArraysSort.Float.testSort           1000000   STAGGER  avgt    4   6.849 ±  0.337  ms/op
ArraysSort.Float.testSort           1000000   SHUFFLE  avgt    4  16.897 ±  0.199  ms/op
ArraysSort.Int.testParallelSort         100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Int.testParallelSort         100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Int.testParallelSort         100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Int.testParallelSort         100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000    RANDOM  avgt    4   0.013 ±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000  REPEATED  avgt    4   0.008 ±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000   STAGGER  avgt    4   0.006 ±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000   SHUFFLE  avgt    4   0.017 ±  0.001  ms/op
ArraysSort.Int.testParallelSort       10000    RANDOM  avgt    4   0.141 ±  0.010  ms/op
ArraysSort.Int.testParallelSort       10000  REPEATED  avgt    4   0.057 ±  0.002  ms/op
ArraysSort.Int.testParallelSort       10000   STAGGER  avgt    4   0.048 ±  0.001  ms/op
ArraysSort.Int.testParallelSort       10000   SHUFFLE  avgt    4   0.084 ±  0.003  ms/op
ArraysSort.Int.testParallelSort      100000    RANDOM  avgt    4   1.165 ±  0.039  ms/op
ArraysSort.Int.testParallelSort      100000  REPEATED  avgt    4   0.330 ±  0.007  ms/op
ArraysSort.Int.testParallelSort      100000   STAGGER  avgt    4   0.364 ±  0.006  ms/op
ArraysSort.Int.testParallelSort      100000   SHUFFLE  avgt    4   0.502 ±  0.017  ms/op
ArraysSort.Int.testParallelSort     1000000    RANDOM  avgt    4  11.340 ±  0.585  ms/op
ArraysSort.Int.testParallelSort     1000000  REPEATED  avgt    4   2.056 ±  0.043  ms/op
ArraysSort.Int.testParallelSort     1000000   STAGGER  avgt    4   2.479 ±  0.071  ms/op
ArraysSort.Int.testParallelSort     1000000   SHUFFLE  avgt    4   5.245 ±  0.186  ms/op
ArraysSort.Int.testSort                 100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Int.testSort                 100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Int.testSort                 100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Int.testSort                 100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Int.testSort                1000    RANDOM  avgt    4   0.011 ±  0.001  ms/op
ArraysSort.Int.testSort                1000  REPEATED  avgt    4   0.008 ±  0.001  ms/op
ArraysSort.Int.testSort                1000   STAGGER  avgt    4   0.006 ±  0.001  ms/op
ArraysSort.Int.testSort                1000   SHUFFLE  avgt    4   0.017 ±  0.001  ms/op
ArraysSort.Int.testSort               10000    RANDOM  avgt    4   0.141 ±  0.002  ms/op
ArraysSort.Int.testSort               10000  REPEATED  avgt    4   0.053 ±  0.002  ms/op
ArraysSort.Int.testSort               10000   STAGGER  avgt    4   0.052 ±  0.001  ms/op
ArraysSort.Int.testSort               10000   SHUFFLE  avgt    4   0.099 ±  0.001  ms/op
ArraysSort.Int.testSort              100000    RANDOM  avgt    4   2.235 ±  0.044  ms/op
ArraysSort.Int.testSort              100000  REPEATED  avgt    4   0.367 ±  0.005  ms/op
ArraysSort.Int.testSort              100000   STAGGER  avgt    4   0.544 ±  0.001  ms/op
ArraysSort.Int.testSort              100000   SHUFFLE  avgt    4   1.727 ±  0.013  ms/op
ArraysSort.Int.testSort             1000000    RANDOM  avgt    4  22.494 ±  0.375  ms/op
ArraysSort.Int.testSort             1000000  REPEATED  avgt    4   3.313 ±  0.044  ms/op
ArraysSort.Int.testSort             1000000   STAGGER  avgt    4   5.317 ±  0.159  ms/op
ArraysSort.Int.testSort             1000000   SHUFFLE  avgt    4  22.482 ±  1.206  ms/op
ArraysSort.Long.testParallelSort        100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Long.testParallelSort        100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Long.testParallelSort        100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Long.testParallelSort        100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000    RANDOM  avgt    4   0.025 ±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000  REPEATED  avgt    4   0.011 ±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000   STAGGER  avgt    4   0.006 ±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000   SHUFFLE  avgt    4   0.019 ±  0.001  ms/op
ArraysSort.Long.testParallelSort      10000    RANDOM  avgt    4   0.233 ±  0.019  ms/op
ArraysSort.Long.testParallelSort      10000  REPEATED  avgt    4   0.059 ±  0.001  ms/op
ArraysSort.Long.testParallelSort      10000   STAGGER  avgt    4   0.049 ±  0.001  ms/op
ArraysSort.Long.testParallelSort      10000   SHUFFLE  avgt    4   0.089 ±  0.003  ms/op
ArraysSort.Long.testParallelSort     100000    RANDOM  avgt    4   1.839 ±  0.055  ms/op
ArraysSort.Long.testParallelSort     100000  REPEATED  avgt    4   0.333 ±  0.012  ms/op
ArraysSort.Long.testParallelSort     100000   STAGGER  avgt    4   0.398 ±  0.022  ms/op
ArraysSort.Long.testParallelSort     100000   SHUFFLE  avgt    4   0.674 ±  0.030  ms/op
ArraysSort.Long.testParallelSort    1000000    RANDOM  avgt    4  18.992 ±  0.667  ms/op
ArraysSort.Long.testParallelSort    1000000  REPEATED  avgt    4   3.140 ±  0.112  ms/op
ArraysSort.Long.testParallelSort    1000000   STAGGER  avgt    4   3.670 ±  0.072  ms/op
ArraysSort.Long.testParallelSort    1000000   SHUFFLE  avgt    4   7.304 ±  0.366  ms/op
ArraysSort.Long.testSort                100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Long.testSort                100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Long.testSort                100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Long.testSort                100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Long.testSort               1000    RANDOM  avgt    4   0.025 ±  0.001  ms/op
ArraysSort.Long.testSort               1000  REPEATED  avgt    4   0.011 ±  0.001  ms/op
ArraysSort.Long.testSort               1000   STAGGER  avgt    4   0.006 ±  0.001  ms/op
ArraysSort.Long.testSort               1000   SHUFFLE  avgt    4   0.019 ±  0.001  ms/op
ArraysSort.Long.testSort              10000    RANDOM  avgt    4   0.388 ±  0.001  ms/op
ArraysSort.Long.testSort              10000  REPEATED  avgt    4   0.077 ±  0.001  ms/op
ArraysSort.Long.testSort              10000   STAGGER  avgt    4   0.056 ±  0.001  ms/op
ArraysSort.Long.testSort              10000   SHUFFLE  avgt    4   0.176 ±  0.001  ms/op
ArraysSort.Long.testSort             100000    RANDOM  avgt    4   5.018 ±  0.089  ms/op
ArraysSort.Long.testSort             100000  REPEATED  avgt    4   0.358 ±  0.010  ms/op
ArraysSort.Long.testSort             100000   STAGGER  avgt    4   0.545 ±  0.003  ms/op
ArraysSort.Long.testSort             100000   SHUFFLE  avgt    4   2.381 ±  0.038  ms/op
ArraysSort.Long.testSort            1000000    RANDOM  avgt    4  55.146 ±  0.681  ms/op
ArraysSort.Long.testSort            1000000  REPEATED  avgt    4   3.468 ±  0.034  ms/op
ArraysSort.Long.testSort            1000000   STAGGER  avgt    4   6.044 ±  0.427  ms/op
ArraysSort.Long.testSort            1000000   SHUFFLE  avgt    4  26.630 ±  0.396  ms/op
ArraysSort.Short.testParallelSort       100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Short.testParallelSort       100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Short.testParallelSort       100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Short.testParallelSort       100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000    RANDOM  avgt    4   0.048 ±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000  REPEATED  avgt    4   0.005 ±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000   STAGGER  avgt    4   0.014 ±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000   SHUFFLE  avgt    4   0.025 ±  0.001  ms/op
ArraysSort.Short.testParallelSort     10000    RANDOM  avgt    4   0.176 ±  0.001  ms/op
ArraysSort.Short.testParallelSort     10000  REPEATED  avgt    4   0.044 ±  0.004  ms/op
ArraysSort.Short.testParallelSort     10000   STAGGER  avgt    4   0.056 ±  0.001  ms/op
ArraysSort.Short.testParallelSort     10000   SHUFFLE  avgt    4   0.047 ±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000    RANDOM  avgt    4   0.924 ±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000  REPEATED  avgt    4   0.192 ±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000   STAGGER  avgt    4   0.219 ±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000   SHUFFLE  avgt    4   0.254 ±  0.038  ms/op
ArraysSort.Short.testParallelSort   1000000    RANDOM  avgt    4   2.561 ±  0.339  ms/op
ArraysSort.Short.testParallelSort   1000000  REPEATED  avgt    4   0.794 ±  0.006  ms/op
ArraysSort.Short.testParallelSort   1000000   STAGGER  avgt    4   1.243 ±  0.170  ms/op
ArraysSort.Short.testParallelSort   1000000   SHUFFLE  avgt    4   1.102 ±  0.242  ms/op
ArraysSort.Short.testSort               100    RANDOM  avgt    4   0.003 ±  0.001  ms/op
ArraysSort.Short.testSort               100  REPEATED  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Short.testSort               100   STAGGER  avgt    4   0.001 ±  0.001  ms/op
ArraysSort.Short.testSort               100   SHUFFLE  avgt    4   0.002 ±  0.001  ms/op
ArraysSort.Short.testSort              1000    RANDOM  avgt    4   0.048 ±  0.001  ms/op
ArraysSort.Short.testSort              1000  REPEATED  avgt    4   0.005 ±  0.001  ms/op
ArraysSort.Short.testSort              1000   STAGGER  avgt    4   0.016 ±  0.001  ms/op
ArraysSort.Short.testSort              1000   SHUFFLE  avgt    4   0.025 ±  0.001  ms/op
ArraysSort.Short.testSort             10000    RANDOM  avgt    4   0.176 ±  0.001  ms/op
ArraysSort.Short.testSort             10000  REPEATED  avgt    4   0.044 ±  0.003  ms/op
ArraysSort.Short.testSort             10000   STAGGER  avgt    4   0.055 ±  0.006  ms/op
ArraysSort.Short.testSort             10000   SHUFFLE  avgt    4   0.047 ±  0.001  ms/op
ArraysSort.Short.testSort            100000    RANDOM  avgt    4   0.919 ±  0.026  ms/op
ArraysSort.Short.testSort            100000  REPEATED  avgt    4   0.192 ±  0.001  ms/op
ArraysSort.Short.testSort            100000   STAGGER  avgt    4   0.219 ±  0.001  ms/op
ArraysSort.Short.testSort            100000   SHUFFLE  avgt    4   0.254 ±  0.036  ms/op
ArraysSort.Short.testSort           1000000    RANDOM  avgt    4   2.554 ±  0.317  ms/op
ArraysSort.Short.testSort           1000000  REPEATED  avgt    4   0.794 ±  0.005  ms/op
ArraysSort.Short.testSort           1000000   STAGGER  avgt    4   1.238 ±  0.122  ms/op
ArraysSort.Short.testSort           1000000   SHUFFLE  avgt    4   1.118 ±  0.231  ms/op

Benchmark result is saved to /home/bourgesl/libs/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/test-results/micro_java_util_ArraysSort/jmh-result.json
Finished running test 'micro:java.util.ArraysSort'
Test report is stored in build/linux-x86_64-server-release/test-results/micro_java_util_ArraysSort

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
   micro:java.util.ArraysSort                            1     1     0     0   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-release'
bourgesl@bourgesl-HP-ZBook-15-G3:~/libs/graphics-rasterizer/jdk/jdk-gh$ 

