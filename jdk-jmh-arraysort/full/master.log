bourgesl@bourgesl-HP-ZBook-15-G3:~/libs/graphics-rasterizer/jdk/jdk-gh$ sudo ~/cpu_max.sh 
[sudo] Mot de passe de bourgeslÂ : 
randomize_va_space: 
0
using sudo to set CPU frequency to 2.7GHz ...
Setting cpu: 0
Setting cpu: 1
Setting cpu: 2
Setting cpu: 3
analyzing CPU 0:
  driver: intel_pstate
  CPUs which run at the same hardware frequency: 0
  CPUs which need to have their frequency coordinated by software: 0
  maximum transition latency:  Cannot determine or is not supported.
  hardware limits: 800 MHz - 3.60 GHz
  available cpufreq governors: performance powersave
  current policy: frequency should be within 2.70 GHz and 2.70 GHz.
                  The governor "performance" may decide which speed to use
                  within this range.
  current CPU frequency: Unable to call hardware
  current CPU frequency: 1.93 GHz (asserted by call to kernel)
  boost state support:
    Supported: yes
    Active: yes
analyzing CPU 1:
  driver: intel_pstate
  CPUs which run at the same hardware frequency: 1
  CPUs which need to have their frequency coordinated by software: 1
  maximum transition latency:  Cannot determine or is not supported.
  hardware limits: 800 MHz - 3.60 GHz
  available cpufreq governors: performance powersave
  current policy: frequency should be within 2.70 GHz and 2.70 GHz.
                  The governor "performance" may decide which speed to use
                  within this range.
  current CPU frequency: Unable to call hardware
  current CPU frequency: 2.28 GHz (asserted by call to kernel)
  boost state support:
    Supported: yes
    Active: yes
analyzing CPU 2:
  driver: intel_pstate
  CPUs which run at the same hardware frequency: 2
  CPUs which need to have their frequency coordinated by software: 2
  maximum transition latency:  Cannot determine or is not supported.
  hardware limits: 800 MHz - 3.60 GHz
  available cpufreq governors: performance powersave
  current policy: frequency should be within 2.70 GHz and 2.70 GHz.
                  The governor "performance" may decide which speed to use
                  within this range.
  current CPU frequency: Unable to call hardware
  current CPU frequency: 1.66 GHz (asserted by call to kernel)
  boost state support:
    Supported: yes
    Active: yes
analyzing CPU 3:
  driver: intel_pstate
  CPUs which run at the same hardware frequency: 3
  CPUs which need to have their frequency coordinated by software: 3
  maximum transition latency:  Cannot determine or is not supported.
  hardware limits: 800 MHz - 3.60 GHz
  available cpufreq governors: performance powersave
  current policy: frequency should be within 2.70 GHz and 2.70 GHz.
                  The governor "performance" may decide which speed to use
                  within this range.
  current CPU frequency: Unable to call hardware
  current CPU frequency: 1.84 GHz (asserted by call to kernel)
  boost state support:
    Supported: yes
    Active: yes
analyzing CPU 0:
perf-bias: 0
analyzing CPU 1:
perf-bias: 0
analyzing CPU 2:
perf-bias: 0
analyzing CPU 3:
perf-bias: 0
vm.stat_interval = 120

bourgesl@bourgesl-HP-ZBook-15-G3:~/libs/graphics-rasterizer/jdk/jdk-gh$ bash run_jmh_sort.sh
Building target 'test' in configuration 'linux-x86_64-server-release'
Compiling 473 files for BUILD_JDK_MICROBENCHMARK
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNonConstant already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.StrLenTest already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.CallOverheadConstant already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.Function1 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.FPComparison already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.AnyMatch already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.PhoneCode.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertUnboxing already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StrictMathBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.PrimesFilter.t100.Lambda already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.CipherBench.GCM already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.HashMapToArray already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.InterfaceCalls already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverPollutedSegments already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.FloatingScalarVectorAbsDiff already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysFill already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.DoubleBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ImmutableColls already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.GetMessageDigest already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.jar.JarFileGetEntry already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.MaskCastOperationsBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.LShiftIdeal_XPlusX_LShiftC already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayCopyUnalignedDst already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.AESBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.RandomAccessRead already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.ReflectionSpeedBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.URLEncodeDecode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.FileOpen already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.AtomicIntegerUpdateAndGet already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.DoPrivileged already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.SpiltReplicate already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.SizedSum already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.ByteBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.AllMatch already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeAcquire already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.Locks already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.MathBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.LoadMaskedIOOBEBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.Limit already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.Longs already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayFiddle already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.NoneMatchShort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.MaskedLogicOpts already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.MemorySegmentVectorAccess already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.Characters already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.ShortBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringHashCode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.Upcalls already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.Reduce already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.SwitchPointAdhoc already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.WriteBarrier already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.BulkOps already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.MaskFromLongBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringReplace already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayCopyAligned already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.CharBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.pipeline.PipelineParMultiple already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ClearMemory already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringBuilders already exist, overwriting
Note: Benchmark entries for micro.org.openjdk.bench.java.lang.StringConstructor already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorShiftAccumulate already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.VaList already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.RecordDeserialization already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.Clazz already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.FpMinMaxIntrinsics already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertReturnPrimitive already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringEquals already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.regex.Trim already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.math.BigDecimals already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Float already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesPermuteArguments already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringEncode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.CallSiteStable already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.CopyLoop already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.TypeVectorOperations.TypeVectorOperationsSuperWord already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNew already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.CallOverheadVirtual already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.Filter already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.SignatureBench.RSA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.NoneMatchShort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringDecode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.PKCS12KeyStores already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.Sorted already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ZipFind already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.capture.Capture2 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.ReflectionColdstartBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.VectorFPtoIntCastOperations already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNonConstantMapped already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.AESGCMBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupDefineClass.HiddenClass already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.AESGCMBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesThrowException already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.KeyAgreementBench.DiffieHellman already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ClassForName already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.ParallelSum already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayCopyUnalignedBoth already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.ArrayMismatchBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.points.PointsDistance already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.UnrolledAccess already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.Integers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.AES already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringIndexOf already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.math.BigIntegers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StackWalkBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.IntegerSum.Lambda already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorShiftRight already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ArrayBoundCheckRemoval already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.Reducers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.AllMatchShort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ArrayFill already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.points.PointsAlloc already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringCompareToIgnoreCase already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeDropParams already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayCopyUnalignedSrc already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.regex.PatternBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.IntBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNonConstantHeap already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.CallSiteSetTargetSelf already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.BlackScholes already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.loom.obsolete.FreezeAndThaw already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.PrimesFilter.t10000.Lambda already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.SocketChannelConnectionSetup already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.ByteStreamDecoder already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.AnyMatcher already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.LocaleDefaults already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.ClazzWithSecurityManager already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupPublicFind already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.LongDivMod already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.AddIdealNotXPlusC already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.overhead.SimpleRepeatCompilation already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.nio.zipfs.ZipfileSystemProviderDelegation already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.MemorySessionClose already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesSpreadInvoker already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.MessageDigestBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.Straighten already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.fences.MultipleWithStores already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.NewInstance already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.AnyMatchShort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.RotateBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorReduction.WithSuperword already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringOther already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.TypeVectorOperations.TypeVectorOperationsNonSuperWord already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.Dates already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.IterativeEA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.MaskQueryOperationsBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeChangeParam already exist, overwriting
Note: Benchmark entries for org.openjdk.micro.bench.java.util.Base64Decode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.TestLoadStoreShorts already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringFormat already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertBoxing already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.fences.MultipleWithLoads already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.LongBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.fences.Single already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.TestLoadBytes already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.proxy.ProxyBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverSlice already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lang.MonitorBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.SignatureBench.RSA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.LeaInstruction already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.Limit already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.AutoVectorization2DArray already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleAsVarargsCollector already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesDropArguments already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleAsSpreader already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.LoopLocals already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.IntegerSum.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesFilterReturn already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.AllMatchShort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.TestLoadStoreBytes already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.Function0 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupDefineClass.WeakClass already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ThreadLocalRandomNextInt already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.CharsetEncodeDecode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.PostAllocationStores already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.AnyMatchShort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.UUIDBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.AESGCMByteBuffer already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Long already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.Map already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.regex.Exponential already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesFoldArguments already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertReturnVoid already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeInsertParams already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ForkJoinPoolRawCallable already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.FloatBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.DivRem already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.GetContext.Deep already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.loom.obsolete.OneShot already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.UnixSocketChannelReadWrite already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.Signum already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.MacBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayCopy already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.MacroLogicOpt already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.fences.SafePublishing already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysEquals already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.RSABench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.Atomic already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ForkJoinPoolForking already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringIndexOfChar already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ForkJoinPoolThresholdStatic already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.Decomposition already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.Map already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lang.Throw already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.DataOutputStreamTest already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.SignatureBench.EdDSA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleBasicInvoke already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.FindFirst already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.StoreMaskedBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesFilterArgs already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeGenerify already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.ReduceBase already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainMrefUnbound already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.AllMatcher already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.PrimesFilter.t10000.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.SignatureBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupAcquire already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.KeyAgreementBench.XDH already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.GetStackTrace already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNonConstantShared already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.Rotation already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.ForEach already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.IntegerDuplicate.Lambda already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.MaxMinOptimizeTest already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.UniqueElements already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.IntegerMax.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.points.PointsFree already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.IntegerMax.Lambda already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.gc.RawAllocationRate already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleBindToCurry already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.BulkMismatchAcquire already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Char already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatchPartialInlining already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.VarHandleExact already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.Wrappers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.jar.JarFileMeta already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorReduction.NoSuperword already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesInvoker already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesGuardWithTest already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.Clone already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.FileChannelRead already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.text.DefFormatterBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ForkJoinPoolThresholdAutoQueued already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.AESGCMByteBuffer already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.FileWrite already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.TreeMapUpdate already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.UniqueElements already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.IntegerDuplicate.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.PrimesSieve.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainAnonymCap4 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverConstant already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.Maps already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Short already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleAsCollector already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesExactInvoker already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorReductionFloatingMinMax already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.channels.SelectOne already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.CipherBench.ChaCha20 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.pipeline.Terminal already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ThreadStartJoin already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.capture.Capture0 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.proxy.ProxyPerf already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.QSort already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.SocketStreaming already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.gc.Alloc already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainAnonymCap1 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Int already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.fences.Multiple already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ModPowerOf2 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainAnonymCap0 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.DictionaryWordValue.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.SSLHandshake already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.UnsignedComparison already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.DoubleClassCheck already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.KeyAgreementBench.EC already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.SignatureBench.ECDSA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.GregorianCalendars already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lang.ThrowableRuntimeMicros already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.logging.LogRecord already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.FileChannelWrite already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.RotateBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.Reduce already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ClassGetResource already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lang.LockUnlock already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.SizedCount already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ArrayStoreCheck already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.SkipIntToLongCast already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.StringConstructorBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.HashMapBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Double already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.FloatingDecimal already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleBindToBinding already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringBuffers already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleProxiesAsIFInstance already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupDefaultFind already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.logging.LoggingRuntimeMicros already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringConcat already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.DatagramChannelSendReceive already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.Filter already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.FindFirst already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertCast already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertWidening already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeChangeReturn already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.Sorted already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.TypedAsCollector already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.pipeline.PipelineSetup already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.xml.STAX already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.tools.Javac already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.AllMatch already exist, overwriting
Note: Benchmark entries for org.openjdk.micro.bench.java.util.Base64Encode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.Morph1 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.VarHandleExact already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.RandomNext already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ObjectHashCode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.AESKeyWrapBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysMismatch.Byte already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.Morph0 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.AnyMatch already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringUpperLower already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.PermissionsImplies already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.DESedeBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ArraysSort.Int already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleInvokeWithArgs already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNonConstantFP already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.points.PointsAccess already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.Morph2 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ArrayAllocation already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.PatternSplit already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ThreadOnSpinWaitProducerConsumer already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.xml.DOM already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverPollutedBuffer already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.FindAny already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LoopOverNewHeap already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.FloatClassCheck already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.zip.ZipFileGetEntry already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodTypeAppendParams already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesCatchException already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.GetContext.Top already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.pipeline.PipelineSeqMultiple already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.ArrayClear already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.CacheBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringSubstring already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesConstant already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.math.BigIntegers.SmallShifts already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.TestAdler32 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.reflect.MethodInvoke already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.CipherBench.GCM already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleConvertReturnReference already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.text.ZoneStrings already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.NetworkInterfaceLookup already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ProducerConsumer already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.SystemTime already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainMrefBound already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.ForEach already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.LoopUnroll already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.time.InstantBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.SignatureBench.DSA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesInsertArguments already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.math.FpRoundingBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorBitCount.NoSuperword already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.IndexVector already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorIntMinMax already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.ListArgs already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorSignum already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.VectorBitCount.WithSuperword already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.ThreadLocalParseUtil already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.Queues already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.CipherBench.CTR already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.RandomAccessWrite already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.SliceToArray already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.concurrent.ForkJoinPoolThresholdAutoSurplus already exist, overwriting
Note: Benchmark entries for org.openjdk.micro.bench.java.util.Base64VarLenDecode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.DictionaryWordValue.Lambda already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.Multiplication already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.SliceToList already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.SubIdealC0Minus_YPlusC1_ already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.StringJoinerBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.PointerInvoke already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.ObjectStreamClasses already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.TestAdaptVarHandles already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.incubator.vector.StoreMaskedIOOBEBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.loom.Skynet already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.loom.obsolete.Oscillation already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ThreadOnSpinWait already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.nio.channels.SelectorWakeup already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.NoneMatch already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementSetter already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.ReduceBase already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.capture.CaptureMR already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.Crypto already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.MessageDigestBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.runtime.ObjectMethods already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.AlgorithmConstraintsPermits already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.SharedLoopHeader already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.regex.Primality already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.math.BigIntegerParallelMultiply already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.StoreAfterStore already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.IntegerDivMod already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.KeyPairGeneratorBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.tasks.PrimesFilter.t100.Bulk already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StringBuilderToString already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.InnerClassNullRef already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.FindAny already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesArrayElementGetter already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandleProxiesSuppl already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.NoneMatch already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupDefineClass.OneClassPerLoader already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.AESBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.FileRead already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.CallSiteSetTarget already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.time.GetYearBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.ThreadLocalURI already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.KeyPairGeneratorBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.AckermannL already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.value.SortedUnique already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.invoke.AckermannI already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.jdk.nio.zipfs.ZipFileSystemBenchmark already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.KeyAgreementBench.EC already exist, overwriting
Note: Benchmark entries for micro.org.openjdk.bench.java.util.NCopiesBenchmarks already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.RSABench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainLambdaCap0 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.Explosion already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainLambdaCap1 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.SwitchPointGuard already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.KeyPairGeneratorBench.EC already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lang.InstanceOf already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ThreadOnSpinWaitSharedCounter already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesIdentity already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.ops.ref.SortedUnique already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.gc.MicroLargePages already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.TestCRC32C already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.zip.Streams already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.CipherBench.ChaCha20Poly1305 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.BitSetAndReset already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.SecureRandomBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.SocketReadWrite already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.zip.InflaterInputStreams already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.ArrayCopyObject already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.foreign.LinkUpcall already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.net.DatagramSocketSendReceive already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.lambda.chain.ChainLambdaCap4 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.xml.SAXUsingJDK already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.SerializationWriteReplace already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.StackTraceElementBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.CipherBench.ChaCha20Poly1305 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.time.format.DateTimeFormatterBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.StringConcatFactoryBootstraps already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.CipherSuiteBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.loom.ring.Ring already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.PointerBenchmarkFlat already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.BitTest already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.small.SecureRandomBench already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.io.UTF8 already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.RSABench.Extra already exist, overwriting
Note: Benchmark entries for com.arm.benchmarks.intrinsics.StringCompareToDifferentLength already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.SpillCode already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesTableSwitchOpaqueSingle already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.LookupDefineClass.TwoClassPerLoader already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.security.MessageDigests already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesTableSwitchConstant already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.stream.NoneMatcher already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.vm.compiler.InterfacePrivateCalls already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.lang.invoke.MethodHandlesTableSwitchRandom already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.regex.FindPattern already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.KeyAgreementBench.XDH already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.javax.crypto.full.KeyPairGeneratorBench.RSA already exist, overwriting
Note: Benchmark entries for org.openjdk.bench.java.util.RandomGeneratorNext already exist, overwriting
Note: Some input files use preview features of Java SE 20.
Note: Recompile with -Xlint:preview for details.
Running Indify on microbenchmark classes
Modifying images/test/micro/benchmarks.jar
  updating 10219 files
Running tests using MICRO control variable 'FORK=1;RESULTS_FORMAT=json'
Test selection 'micro:java.util.ArraysSort', will run:
* micro:java.util.ArraysSort

Running test 'micro:java.util.ArraysSort'
# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 0.00% complete, ETA 01:19:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 0.36% complete, ETA 01:20:33
# Fork: 1 of 1
# Warmup Iteration   1: â 10â»â´ ms/op
Iteration   1: â 10â»â´ ms/op
Iteration   2: â 10â»â´ ms/op
Iteration   3: â 10â»â´ ms/op
Iteration   4: â 10â»â´ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  â 10â»â´ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 0.71% complete, ETA 01:20:10
# Fork: 1 of 1
# Warmup Iteration   1: â 10â»Â³ ms/op
Iteration   1: â 10â»Â³ ms/op
Iteration   2: â 10â»Â³ ms/op
Iteration   3: â 10â»Â³ ms/op
Iteration   4: â 10â»Â³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  â 10â»Â³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 1.07% complete, ETA 01:19:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: â 10â»Â³ ms/op
Iteration   2: â 10â»Â³ ms/op
Iteration   3: â 10â»Â³ ms/op
Iteration   4: â 10â»Â³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  â 10â»Â³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 1.43% complete, ETA 01:19:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.006 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.010] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 1.79% complete, ETA 01:19:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 2.14% complete, ETA 01:18:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.002 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [â 10â»â´, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 2.50% complete, ETA 01:18:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 2.86% complete, ETA 01:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.013 Â±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.012, 0.013, 0.015), stdev = 0.001
  CI (99.9%): [0.004, 0.022] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 3.21% complete, ETA 01:17:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.011 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.010, 0.011, 0.012), stdev = 0.001
  CI (99.9%): [0.005, 0.018] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 3.57% complete, ETA 01:17:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.009 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.006, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 3.93% complete, ETA 01:17:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.009 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.005, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 4.29% complete, ETA 01:17:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.081 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.083 Â±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.081, 0.083, 0.088), stdev = 0.004
  CI (99.9%): [0.059, 0.107] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 4.64% complete, ETA 01:16:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.063 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.067 Â±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.063, 0.067, 0.070), stdev = 0.004
  CI (99.9%): [0.044, 0.090] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 5.00% complete, ETA 01:16:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.071 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.071 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.071, 0.071, 0.071), stdev = 0.001
  CI (99.9%): [0.070, 0.072] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 5.36% complete, ETA 01:16:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.089 ms/op
Iteration   1: 0.086 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.074 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.077 Â±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.074, 0.077, 0.086), stdev = 0.006
  CI (99.9%): [0.039, 0.115] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 5.71% complete, ETA 01:15:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.732 ms/op
Iteration   1: 0.698 ms/op
Iteration   2: 0.701 ms/op
Iteration   3: 0.697 ms/op
Iteration   4: 0.700 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.699 Â±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.697, 0.699, 0.701), stdev = 0.002
  CI (99.9%): [0.689, 0.709] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 6.07% complete, ETA 01:15:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.672 ms/op
Iteration   1: 0.657 ms/op
Iteration   2: 0.658 ms/op
Iteration   3: 0.657 ms/op
Iteration   4: 0.656 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.657 Â±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.656, 0.657, 0.658), stdev = 0.001
  CI (99.9%): [0.652, 0.662] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 6.43% complete, ETA 01:15:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.678 ms/op
Iteration   1: 0.663 ms/op
Iteration   2: 0.665 ms/op
Iteration   3: 0.666 ms/op
Iteration   4: 0.665 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.665 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.663, 0.665, 0.666), stdev = 0.001
  CI (99.9%): [0.659, 0.671] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 6.79% complete, ETA 01:15:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.701 ms/op
Iteration   1: 0.667 ms/op
Iteration   2: 0.665 ms/op
Iteration   3: 0.666 ms/op
Iteration   4: 0.664 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testParallelSort":
  0.666 Â±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.664, 0.666, 0.667), stdev = 0.001
  CI (99.9%): [0.657, 0.674] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 7.14% complete, ETA 01:14:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 7.50% complete, ETA 01:14:31
# Fork: 1 of 1
# Warmup Iteration   1: â 10â»â´ ms/op
Iteration   1: â 10â»â´ ms/op
Iteration   2: â 10â»â´ ms/op
Iteration   3: â 10â»â´ ms/op
Iteration   4: â 10â»â´ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  â 10â»â´ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 7.86% complete, ETA 01:14:13
# Fork: 1 of 1
# Warmup Iteration   1: â 10â»Â³ ms/op
Iteration   1: â 10â»Â³ ms/op
Iteration   2: â 10â»Â³ ms/op
Iteration   3: â 10â»Â³ ms/op
Iteration   4: â 10â»Â³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  â 10â»Â³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 8.21% complete, ETA 01:13:56
# Fork: 1 of 1
# Warmup Iteration   1: â 10â»Â³ ms/op
Iteration   1: â 10â»Â³ ms/op
Iteration   2: â 10â»Â³ ms/op
Iteration   3: â 10â»Â³ ms/op
Iteration   4: â 10â»Â³ ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  â 10â»Â³ ms/op


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 8.57% complete, ETA 01:13:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.006 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 8.93% complete, ETA 01:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 9.29% complete, ETA 01:13:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.002 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [â 10â»Â³, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 9.64% complete, ETA 01:12:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 10.00% complete, ETA 01:12:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.014 Â±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.012, 0.014, 0.015), stdev = 0.001
  CI (99.9%): [0.004, 0.023] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 10.36% complete, ETA 01:12:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.011 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.010, 0.011, 0.012), stdev = 0.001
  CI (99.9%): [0.005, 0.018] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 10.71% complete, ETA 01:11:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.009 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.006, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 11.07% complete, ETA 01:11:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.009 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.006, 0.012] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 11.43% complete, ETA 01:11:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.081 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.083 Â±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.081, 0.083, 0.089), stdev = 0.004
  CI (99.9%): [0.058, 0.108] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 11.79% complete, ETA 01:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.073 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.069 Â±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.066, 0.069, 0.073), stdev = 0.004
  CI (99.9%): [0.046, 0.092] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 12.14% complete, ETA 01:10:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.072 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.072 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.072, 0.072, 0.072), stdev = 0.001
  CI (99.9%): [0.070, 0.074] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 12.50% complete, ETA 01:10:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
Iteration   1: 0.086 ms/op
Iteration   2: 0.076 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.075 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.078 Â±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.075, 0.078, 0.086), stdev = 0.005
  CI (99.9%): [0.043, 0.114] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 12.86% complete, ETA 01:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.732 ms/op
Iteration   1: 0.698 ms/op
Iteration   2: 0.701 ms/op
Iteration   3: 0.700 ms/op
Iteration   4: 0.697 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.699 Â±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.697, 0.699, 0.701), stdev = 0.002
  CI (99.9%): [0.685, 0.713] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 13.21% complete, ETA 01:09:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.669 ms/op
Iteration   1: 0.657 ms/op
Iteration   2: 0.659 ms/op
Iteration   3: 0.656 ms/op
Iteration   4: 0.655 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.657 Â±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.655, 0.657, 0.659), stdev = 0.001
  CI (99.9%): [0.647, 0.666] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 13.57% complete, ETA 01:09:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.675 ms/op
Iteration   1: 0.664 ms/op
Iteration   2: 0.664 ms/op
Iteration   3: 0.662 ms/op
Iteration   4: 0.662 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.663 Â±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.662, 0.663, 0.664), stdev = 0.001
  CI (99.9%): [0.656, 0.670] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Byte.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 13.93% complete, ETA 01:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.700 ms/op
Iteration   1: 0.665 ms/op
Iteration   2: 0.665 ms/op
Iteration   3: 0.669 ms/op
Iteration   4: 0.668 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Byte.testSort":
  0.667 Â±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.665, 0.667, 0.669), stdev = 0.002
  CI (99.9%): [0.652, 0.681] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 14.29% complete, ETA 01:09:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 14.64% complete, ETA 01:08:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 15.00% complete, ETA 01:08:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 15.36% complete, ETA 01:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 15.71% complete, ETA 01:07:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.045 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.045 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.045, 0.045, 0.045), stdev = 0.001
  CI (99.9%): [0.044, 0.045] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 16.07% complete, ETA 01:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.004 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 16.43% complete, ETA 01:07:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.014 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.013, 0.014] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 16.79% complete, ETA 01:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.023 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.022, 0.023] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 17.14% complete, ETA 01:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.186 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.180 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.180 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.180, 0.180, 0.181), stdev = 0.001
  CI (99.9%): [0.179, 0.182] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 17.50% complete, ETA 01:06:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.054 Â±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.046, 0.054, 0.057), stdev = 0.005
  CI (99.9%): [0.020, 0.088] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 17.86% complete, ETA 01:06:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.058 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.058 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.057, 0.058, 0.058), stdev = 0.001
  CI (99.9%): [0.057, 0.058] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 18.21% complete, ETA 01:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.065 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.064 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.064, 0.064, 0.065), stdev = 0.001
  CI (99.9%): [0.062, 0.066] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 18.57% complete, ETA 01:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.934 ms/op
Iteration   1: 0.892 ms/op
Iteration   2: 0.895 ms/op
Iteration   3: 0.901 ms/op
Iteration   4: 0.906 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.898 Â±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.892, 0.898, 0.906), stdev = 0.006
  CI (99.9%): [0.858, 0.939] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 18.93% complete, ETA 01:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.204 ms/op
Iteration   1: 0.187 ms/op
Iteration   2: 0.187 ms/op
Iteration   3: 0.187 ms/op
Iteration   4: 0.186 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.187 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.186, 0.187, 0.187), stdev = 0.001
  CI (99.9%): [0.186, 0.187] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 19.29% complete, ETA 01:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.254 ms/op
Iteration   1: 0.243 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.242 ms/op
Iteration   4: 0.242 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.242 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.242, 0.242, 0.243), stdev = 0.001
  CI (99.9%): [0.240, 0.245] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 19.64% complete, ETA 01:04:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.311 ms/op
Iteration   1: 0.279 ms/op
Iteration   2: 0.276 ms/op
Iteration   3: 0.273 ms/op
Iteration   4: 0.272 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.275 Â±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.272, 0.275, 0.279), stdev = 0.003
  CI (99.9%): [0.255, 0.296] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 20.00% complete, ETA 01:04:25
# Fork: 1 of 1
# Warmup Iteration   1: 2.550 ms/op
Iteration   1: 2.476 ms/op
Iteration   2: 2.491 ms/op
Iteration   3: 2.490 ms/op
Iteration   4: 2.492 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  2.487 Â±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (2.476, 2.487, 2.492), stdev = 0.008
  CI (99.9%): [2.437, 2.537] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 20.36% complete, ETA 01:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.869 ms/op
Iteration   1: 0.811 ms/op
Iteration   2: 0.814 ms/op
Iteration   3: 0.836 ms/op
Iteration   4: 0.856 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  0.829 Â±(99.9%) 0.134 ms/op [Average]
  (min, avg, max) = (0.811, 0.829, 0.856), stdev = 0.021
  CI (99.9%): [0.695, 0.963] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 20.71% complete, ETA 01:03:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.307 ms/op
Iteration   1: 1.239 ms/op
Iteration   2: 1.218 ms/op
Iteration   3: 1.217 ms/op
Iteration   4: 1.222 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  1.224 Â±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (1.217, 1.224, 1.239), stdev = 0.011
  CI (99.9%): [1.155, 1.292] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 21.07% complete, ETA 01:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.170 ms/op
Iteration   1: 1.121 ms/op
Iteration   2: 1.147 ms/op
Iteration   3: 1.088 ms/op
Iteration   4: 1.065 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testParallelSort":
  1.105 Â±(99.9%) 0.232 ms/op [Average]
  (min, avg, max) = (1.065, 1.105, 1.147), stdev = 0.036
  CI (99.9%): [0.873, 1.337] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 21.43% complete, ETA 01:03:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 21.79% complete, ETA 01:02:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 22.14% complete, ETA 01:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 22.50% complete, ETA 01:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 22.86% complete, ETA 01:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.045 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.045 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.045, 0.045, 0.045), stdev = 0.001
  CI (99.9%): [0.045, 0.045] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 23.21% complete, ETA 01:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.004 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 23.57% complete, ETA 01:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.014 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.013, 0.014] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 23.93% complete, ETA 01:01:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.023 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.023, 0.023] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 24.29% complete, ETA 01:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.187 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.181 ms/op
Iteration   4: 0.180 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.180 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.180, 0.180, 0.181), stdev = 0.001
  CI (99.9%): [0.179, 0.182] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 24.64% complete, ETA 01:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.054 Â±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.045, 0.054, 0.057), stdev = 0.006
  CI (99.9%): [0.014, 0.094] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 25.00% complete, ETA 01:00:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.066 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.062 Â±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.057, 0.062, 0.067), stdev = 0.005
  CI (99.9%): [0.031, 0.094] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 25.36% complete, ETA 01:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.064 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.064 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.064, 0.064, 0.064), stdev = 0.001
  CI (99.9%): [0.062, 0.065] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 25.71% complete, ETA 00:59:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.935 ms/op
Iteration   1: 0.890 ms/op
Iteration   2: 0.891 ms/op
Iteration   3: 0.903 ms/op
Iteration   4: 0.906 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.898 Â±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.890, 0.898, 0.906), stdev = 0.009
  CI (99.9%): [0.842, 0.953] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 26.07% complete, ETA 00:59:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.214 ms/op
Iteration   1: 0.203 ms/op
Iteration   2: 0.203 ms/op
Iteration   3: 0.203 ms/op
Iteration   4: 0.203 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.203 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.203, 0.203, 0.203), stdev = 0.001
  CI (99.9%): [0.202, 0.204] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 26.43% complete, ETA 00:59:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.255 ms/op
Iteration   1: 0.242 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.242 ms/op
Iteration   4: 0.242 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.243 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.242, 0.243, 0.243), stdev = 0.001
  CI (99.9%): [0.239, 0.246] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 26.79% complete, ETA 00:58:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.313 ms/op
Iteration   1: 0.279 ms/op
Iteration   2: 0.441 ms/op
Iteration   3: 0.377 ms/op
Iteration   4: 0.534 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.408 Â±(99.9%) 0.692 ms/op [Average]
  (min, avg, max) = (0.279, 0.408, 0.534), stdev = 0.107
  CI (99.9%): [â 0, 1.100] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 27.14% complete, ETA 00:58:40
# Fork: 1 of 1
# Warmup Iteration   1: 2.561 ms/op
Iteration   1: 2.483 ms/op
Iteration   2: 2.506 ms/op
Iteration   3: 2.506 ms/op
Iteration   4: 2.507 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  2.501 Â±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (2.483, 2.501, 2.507), stdev = 0.012
  CI (99.9%): [2.426, 2.576] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 27.50% complete, ETA 00:58:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.868 ms/op
Iteration   1: 0.812 ms/op
Iteration   2: 0.814 ms/op
Iteration   3: 0.832 ms/op
Iteration   4: 0.858 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  0.829 Â±(99.9%) 0.139 ms/op [Average]
  (min, avg, max) = (0.812, 0.829, 0.858), stdev = 0.022
  CI (99.9%): [0.690, 0.968] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 27.86% complete, ETA 00:58:06
# Fork: 1 of 1
# Warmup Iteration   1: 1.304 ms/op
Iteration   1: 1.242 ms/op
Iteration   2: 1.215 ms/op
Iteration   3: 1.211 ms/op
Iteration   4: 1.214 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  1.220 Â±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (1.211, 1.220, 1.242), stdev = 0.014
  CI (99.9%): [1.127, 1.314] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Char.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 28.21% complete, ETA 00:57:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.172 ms/op
Iteration   1: 1.079 ms/op
Iteration   2: 1.145 ms/op
Iteration   3: 1.146 ms/op
Iteration   4: 1.144 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Char.testSort":
  1.128 Â±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (1.079, 1.128, 1.146), stdev = 0.033
  CI (99.9%): [0.917, 1.340] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 28.57% complete, ETA 00:57:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 28.93% complete, ETA 00:57:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 29.29% complete, ETA 00:56:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 29.64% complete, ETA 00:56:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 30.00% complete, ETA 00:56:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.048 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 30.36% complete, ETA 00:56:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.006 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 30.71% complete, ETA 00:55:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.007 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 31.07% complete, ETA 00:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.024 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.024, 0.024, 0.024), stdev = 0.001
  CI (99.9%): [0.023, 0.024] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 31.43% complete, ETA 00:55:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.425 ms/op
Iteration   1: 0.413 ms/op
Iteration   2: 0.408 ms/op
Iteration   3: 0.408 ms/op
Iteration   4: 0.409 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.410 Â±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.408, 0.410, 0.413), stdev = 0.002
  CI (99.9%): [0.394, 0.425] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 31.79% complete, ETA 00:54:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.062 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.062 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.062, 0.062, 0.062), stdev = 0.001
  CI (99.9%): [0.061, 0.064] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 32.14% complete, ETA 00:54:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.063 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.063 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.063, 0.063, 0.063), stdev = 0.001
  CI (99.9%): [0.063, 0.064] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 32.50% complete, ETA 00:54:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.226 ms/op
Iteration   1: 0.214 ms/op
Iteration   2: 0.213 ms/op
Iteration   3: 0.213 ms/op
Iteration   4: 0.214 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.214 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.213, 0.214, 0.214), stdev = 0.001
  CI (99.9%): [0.211, 0.217] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 32.86% complete, ETA 00:54:04
# Fork: 1 of 1
# Warmup Iteration   1: 3.209 ms/op
Iteration   1: 3.003 ms/op
Iteration   2: 2.975 ms/op
Iteration   3: 2.996 ms/op
Iteration   4: 2.986 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  2.990 Â±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (2.975, 2.990, 3.003), stdev = 0.012
  CI (99.9%): [2.913, 3.067] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 33.21% complete, ETA 00:53:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.639 ms/op
Iteration   1: 0.620 ms/op
Iteration   2: 0.620 ms/op
Iteration   3: 0.621 ms/op
Iteration   4: 0.620 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.620 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.620, 0.620, 0.621), stdev = 0.001
  CI (99.9%): [0.618, 0.622] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 33.57% complete, ETA 00:53:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.658 ms/op
Iteration   1: 0.623 ms/op
Iteration   2: 0.628 ms/op
Iteration   3: 0.628 ms/op
Iteration   4: 0.625 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  0.626 Â±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.623, 0.626, 0.628), stdev = 0.002
  CI (99.9%): [0.612, 0.640] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 33.93% complete, ETA 00:53:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.454 ms/op
Iteration   1: 1.368 ms/op
Iteration   2: 1.361 ms/op
Iteration   3: 1.360 ms/op
Iteration   4: 1.355 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  1.361 Â±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (1.355, 1.361, 1.368), stdev = 0.005
  CI (99.9%): [1.326, 1.396] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 34.29% complete, ETA 00:52:55
# Fork: 1 of 1
# Warmup Iteration   1: 34.952 ms/op
Iteration   1: 31.384 ms/op
Iteration   2: 31.355 ms/op
Iteration   3: 31.428 ms/op
Iteration   4: 31.426 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  31.398 Â±(99.9%) 0.228 ms/op [Average]
  (min, avg, max) = (31.355, 31.398, 31.428), stdev = 0.035
  CI (99.9%): [31.170, 31.626] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 34.64% complete, ETA 00:52:38
# Fork: 1 of 1
# Warmup Iteration   1: 4.375 ms/op
Iteration   1: 4.265 ms/op
Iteration   2: 4.265 ms/op
Iteration   3: 4.281 ms/op
Iteration   4: 4.287 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  4.274 Â±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (4.265, 4.274, 4.287), stdev = 0.011
  CI (99.9%): [4.203, 4.346] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 35.00% complete, ETA 00:52:21
# Fork: 1 of 1
# Warmup Iteration   1: 5.978 ms/op
Iteration   1: 5.617 ms/op
Iteration   2: 5.595 ms/op
Iteration   3: 5.593 ms/op
Iteration   4: 5.592 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  5.599 Â±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (5.592, 5.599, 5.617), stdev = 0.012
  CI (99.9%): [5.523, 5.675] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 35.36% complete, ETA 00:52:03
# Fork: 1 of 1
# Warmup Iteration   1: 14.022 ms/op
Iteration   1: 12.449 ms/op
Iteration   2: 12.452 ms/op
Iteration   3: 12.468 ms/op
Iteration   4: 12.488 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testParallelSort":
  12.464 Â±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (12.449, 12.464, 12.488), stdev = 0.018
  CI (99.9%): [12.347, 12.581] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 35.71% complete, ETA 00:51:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 36.07% complete, ETA 00:51:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 36.43% complete, ETA 00:51:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 36.79% complete, ETA 00:50:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 37.14% complete, ETA 00:50:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.048 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 37.50% complete, ETA 00:50:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.006 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 37.86% complete, ETA 00:50:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.007 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 38.21% complete, ETA 00:49:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.024 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.024, 0.024, 0.024), stdev = 0.001
  CI (99.9%): [0.024, 0.024] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 38.57% complete, ETA 00:49:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.647 ms/op
Iteration   1: 0.630 ms/op
Iteration   2: 0.632 ms/op
Iteration   3: 0.631 ms/op
Iteration   4: 0.631 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.631 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.630, 0.631, 0.632), stdev = 0.001
  CI (99.9%): [0.625, 0.636] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 38.93% complete, ETA 00:49:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.057 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.057 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.057, 0.057, 0.057), stdev = 0.001
  CI (99.9%): [0.056, 0.057] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 39.29% complete, ETA 00:48:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.070 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.070 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.070, 0.070, 0.070), stdev = 0.001
  CI (99.9%): [0.069, 0.071] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 39.64% complete, ETA 00:48:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.295 ms/op
Iteration   1: 0.287 ms/op
Iteration   2: 0.285 ms/op
Iteration   3: 0.286 ms/op
Iteration   4: 0.285 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.286 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.285, 0.286, 0.287), stdev = 0.001
  CI (99.9%): [0.282, 0.290] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 40.00% complete, ETA 00:48:19
# Fork: 1 of 1
# Warmup Iteration   1: 8.083 ms/op
Iteration   1: 7.896 ms/op
Iteration   2: 7.880 ms/op
Iteration   3: 7.875 ms/op
Iteration   4: 7.870 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  7.880 Â±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (7.870, 7.880, 7.896), stdev = 0.011
  CI (99.9%): [7.809, 7.952] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 40.36% complete, ETA 00:48:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.704 ms/op
Iteration   1: 0.686 ms/op
Iteration   2: 0.689 ms/op
Iteration   3: 0.688 ms/op
Iteration   4: 0.686 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.687 Â±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.686, 0.687, 0.689), stdev = 0.001
  CI (99.9%): [0.678, 0.696] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 40.71% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.719 ms/op
Iteration   1: 0.686 ms/op
Iteration   2: 0.684 ms/op
Iteration   3: 0.684 ms/op
Iteration   4: 0.684 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  0.685 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.684, 0.685, 0.686), stdev = 0.001
  CI (99.9%): [0.678, 0.691] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 41.07% complete, ETA 00:47:27
# Fork: 1 of 1
# Warmup Iteration   1: 3.119 ms/op
Iteration   1: 3.026 ms/op
Iteration   2: 2.997 ms/op
Iteration   3: 2.978 ms/op
Iteration   4: 2.980 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  2.995 Â±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (2.978, 2.995, 3.026), stdev = 0.022
  CI (99.9%): [2.851, 3.139] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 41.43% complete, ETA 00:47:10
# Fork: 1 of 1
# Warmup Iteration   1: 97.786 ms/op
Iteration   1: 94.264 ms/op
Iteration   2: 94.373 ms/op
Iteration   3: 94.370 ms/op
Iteration   4: 94.416 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  94.356 Â±(99.9%) 0.416 ms/op [Average]
  (min, avg, max) = (94.264, 94.356, 94.416), stdev = 0.064
  CI (99.9%): [93.940, 94.772] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 41.79% complete, ETA 00:46:53
# Fork: 1 of 1
# Warmup Iteration   1: 5.585 ms/op
Iteration   1: 5.480 ms/op
Iteration   2: 5.472 ms/op
Iteration   3: 5.480 ms/op
Iteration   4: 5.476 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  5.477 Â±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (5.472, 5.477, 5.480), stdev = 0.004
  CI (99.9%): [5.454, 5.501] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 42.14% complete, ETA 00:46:36
# Fork: 1 of 1
# Warmup Iteration   1: 7.862 ms/op
Iteration   1: 7.304 ms/op
Iteration   2: 7.095 ms/op
Iteration   3: 7.107 ms/op
Iteration   4: 7.086 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  7.148 Â±(99.9%) 0.675 ms/op [Average]
  (min, avg, max) = (7.086, 7.148, 7.304), stdev = 0.105
  CI (99.9%): [6.473, 7.824] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Double.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 42.50% complete, ETA 00:46:18
# Fork: 1 of 1
# Warmup Iteration   1: 33.634 ms/op
Iteration   1: 32.413 ms/op
Iteration   2: 31.791 ms/op
Iteration   3: 31.490 ms/op
Iteration   4: 31.602 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Double.testSort":
  31.824 Â±(99.9%) 2.663 ms/op [Average]
  (min, avg, max) = (31.490, 31.824, 32.413), stdev = 0.412
  CI (99.9%): [29.161, 34.487] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 42.86% complete, ETA 00:46:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 43.21% complete, ETA 00:45:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 43.57% complete, ETA 00:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 43.93% complete, ETA 00:45:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 44.29% complete, ETA 00:44:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.047 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.047 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.047), stdev = 0.001
  CI (99.9%): [0.047, 0.047] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 44.64% complete, ETA 00:44:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.006 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 45.00% complete, ETA 00:44:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.007 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 45.36% complete, ETA 00:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.023 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.023, 0.024] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 45.71% complete, ETA 00:43:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.443 ms/op
Iteration   1: 0.412 ms/op
Iteration   2: 0.412 ms/op
Iteration   3: 0.413 ms/op
Iteration   4: 0.413 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.412 Â±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.412, 0.412, 0.413), stdev = 0.001
  CI (99.9%): [0.408, 0.417] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 46.07% complete, ETA 00:43:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.065 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.065 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.065, 0.065, 0.065), stdev = 0.001
  CI (99.9%): [0.064, 0.066] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 46.43% complete, ETA 00:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.061 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.061 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.060, 0.061, 0.061), stdev = 0.001
  CI (99.9%): [0.059, 0.062] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 46.79% complete, ETA 00:42:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.224 ms/op
Iteration   1: 0.213 ms/op
Iteration   2: 0.213 ms/op
Iteration   3: 0.213 ms/op
Iteration   4: 0.212 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.213 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.212, 0.213, 0.213), stdev = 0.001
  CI (99.9%): [0.209, 0.216] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 47.14% complete, ETA 00:42:34
# Fork: 1 of 1
# Warmup Iteration   1: 3.273 ms/op
Iteration   1: 3.125 ms/op
Iteration   2: 3.130 ms/op
Iteration   3: 3.128 ms/op
Iteration   4: 3.122 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  3.126 Â±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (3.122, 3.126, 3.130), stdev = 0.004
  CI (99.9%): [3.103, 3.149] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 47.50% complete, ETA 00:42:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.628 ms/op
Iteration   1: 0.617 ms/op
Iteration   2: 0.616 ms/op
Iteration   3: 0.614 ms/op
Iteration   4: 0.616 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.616 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.614, 0.616, 0.617), stdev = 0.001
  CI (99.9%): [0.610, 0.622] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 47.86% complete, ETA 00:41:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.617 ms/op
Iteration   1: 0.588 ms/op
Iteration   2: 0.587 ms/op
Iteration   3: 0.587 ms/op
Iteration   4: 0.596 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  0.589 Â±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.587, 0.589, 0.596), stdev = 0.004
  CI (99.9%): [0.561, 0.617] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 48.21% complete, ETA 00:41:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.436 ms/op
Iteration   1: 1.359 ms/op
Iteration   2: 1.357 ms/op
Iteration   3: 1.349 ms/op
Iteration   4: 1.348 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  1.353 Â±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (1.348, 1.353, 1.359), stdev = 0.006
  CI (99.9%): [1.316, 1.390] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 48.57% complete, ETA 00:41:25
# Fork: 1 of 1
# Warmup Iteration   1: 33.855 ms/op
Iteration   1: 31.838 ms/op
Iteration   2: 31.925 ms/op
Iteration   3: 31.702 ms/op
Iteration   4: 31.735 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  31.800 Â±(99.9%) 0.656 ms/op [Average]
  (min, avg, max) = (31.702, 31.800, 31.925), stdev = 0.101
  CI (99.9%): [31.144, 32.456] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 48.93% complete, ETA 00:41:08
# Fork: 1 of 1
# Warmup Iteration   1: 4.135 ms/op
Iteration   1: 4.017 ms/op
Iteration   2: 4.032 ms/op
Iteration   3: 4.032 ms/op
Iteration   4: 4.028 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  4.027 Â±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (4.017, 4.027, 4.032), stdev = 0.007
  CI (99.9%): [3.980, 4.075] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 49.29% complete, ETA 00:40:50
# Fork: 1 of 1
# Warmup Iteration   1: 5.170 ms/op
Iteration   1: 4.848 ms/op
Iteration   2: 4.814 ms/op
Iteration   3: 4.821 ms/op
Iteration   4: 4.811 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  4.823 Â±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (4.811, 4.823, 4.848), stdev = 0.017
  CI (99.9%): [4.715, 4.932] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 49.64% complete, ETA 00:40:33
# Fork: 1 of 1
# Warmup Iteration   1: 13.949 ms/op
Iteration   1: 12.169 ms/op
Iteration   2: 12.176 ms/op
Iteration   3: 12.170 ms/op
Iteration   4: 12.125 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testParallelSort":
  12.160 Â±(99.9%) 0.150 ms/op [Average]
  (min, avg, max) = (12.125, 12.160, 12.176), stdev = 0.023
  CI (99.9%): [12.010, 12.310] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 50.00% complete, ETA 00:40:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 50.36% complete, ETA 00:39:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 50.71% complete, ETA 00:39:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 51.07% complete, ETA 00:39:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 51.43% complete, ETA 00:39:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.047 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.047 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.047), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 51.79% complete, ETA 00:38:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.006 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 52.14% complete, ETA 00:38:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.006 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 52.50% complete, ETA 00:38:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.024 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.023 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.024), stdev = 0.001
  CI (99.9%): [0.023, 0.024] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 52.86% complete, ETA 00:37:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.655 ms/op
Iteration   1: 0.637 ms/op
Iteration   2: 0.635 ms/op
Iteration   3: 0.635 ms/op
Iteration   4: 0.636 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.636 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.635, 0.636, 0.637), stdev = 0.001
  CI (99.9%): [0.630, 0.642] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 53.21% complete, ETA 00:37:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.057 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.057 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.057, 0.057, 0.057), stdev = 0.001
  CI (99.9%): [0.056, 0.057] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 53.57% complete, ETA 00:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.067 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.067 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.067, 0.067, 0.067), stdev = 0.001
  CI (99.9%): [0.066, 0.068] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 53.93% complete, ETA 00:37:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.294 ms/op
Iteration   1: 0.286 ms/op
Iteration   2: 0.285 ms/op
Iteration   3: 0.285 ms/op
Iteration   4: 0.285 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.285 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.285, 0.285, 0.286), stdev = 0.001
  CI (99.9%): [0.282, 0.289] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 54.29% complete, ETA 00:36:49
# Fork: 1 of 1
# Warmup Iteration   1: 8.209 ms/op
Iteration   1: 7.894 ms/op
Iteration   2: 7.894 ms/op
Iteration   3: 7.920 ms/op
Iteration   4: 7.920 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  7.907 Â±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (7.894, 7.907, 7.920), stdev = 0.015
  CI (99.9%): [7.811, 8.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 54.64% complete, ETA 00:36:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.702 ms/op
Iteration   1: 0.689 ms/op
Iteration   2: 0.688 ms/op
Iteration   3: 0.688 ms/op
Iteration   4: 0.689 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.689 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.688, 0.689, 0.689), stdev = 0.001
  CI (99.9%): [0.685, 0.692] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 55.00% complete, ETA 00:36:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.681 ms/op
Iteration   1: 0.652 ms/op
Iteration   2: 0.655 ms/op
Iteration   3: 0.653 ms/op
Iteration   4: 0.653 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  0.653 Â±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.652, 0.653, 0.655), stdev = 0.001
  CI (99.9%): [0.646, 0.660] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 55.36% complete, ETA 00:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 3.051 ms/op
Iteration   1: 3.000 ms/op
Iteration   2: 2.992 ms/op
Iteration   3: 3.003 ms/op
Iteration   4: 3.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  3.000 Â±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (2.992, 3.000, 3.003), stdev = 0.005
  CI (99.9%): [2.967, 3.033] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 55.71% complete, ETA 00:35:40
# Fork: 1 of 1
# Warmup Iteration   1: 97.338 ms/op
Iteration   1: 92.023 ms/op
Iteration   2: 92.205 ms/op
Iteration   3: 92.215 ms/op
Iteration   4: 92.176 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  92.155 Â±(99.9%) 0.578 ms/op [Average]
  (min, avg, max) = (92.023, 92.155, 92.215), stdev = 0.089
  CI (99.9%): [91.577, 92.733] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 56.07% complete, ETA 00:35:23
# Fork: 1 of 1
# Warmup Iteration   1: 5.424 ms/op
Iteration   1: 5.368 ms/op
Iteration   2: 5.354 ms/op
Iteration   3: 5.370 ms/op
Iteration   4: 5.370 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  5.366 Â±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (5.354, 5.366, 5.370), stdev = 0.008
  CI (99.9%): [5.317, 5.414] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 56.43% complete, ETA 00:35:05
# Fork: 1 of 1
# Warmup Iteration   1: 6.993 ms/op
Iteration   1: 6.781 ms/op
Iteration   2: 6.782 ms/op
Iteration   3: 6.770 ms/op
Iteration   4: 6.775 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  6.777 Â±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (6.770, 6.777, 6.782), stdev = 0.006
  CI (99.9%): [6.741, 6.814] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Float.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 56.79% complete, ETA 00:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 32.807 ms/op
Iteration   1: 31.565 ms/op
Iteration   2: 31.502 ms/op
Iteration   3: 31.244 ms/op
Iteration   4: 31.095 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Float.testSort":
  31.352 Â±(99.9%) 1.424 ms/op [Average]
  (min, avg, max) = (31.095, 31.352, 31.565), stdev = 0.220
  CI (99.9%): [29.928, 32.775] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 57.14% complete, ETA 00:34:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 57.50% complete, ETA 00:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 57.86% complete, ETA 00:33:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 58.21% complete, ETA 00:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 58.57% complete, ETA 00:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.044 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.044, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.044, 0.044] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 58.93% complete, ETA 00:33:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 59.29% complete, ETA 00:32:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 59.64% complete, ETA 00:32:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.022 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.022 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 60.00% complete, ETA 00:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.399 ms/op
Iteration   1: 0.380 ms/op
Iteration   2: 0.382 ms/op
Iteration   3: 0.381 ms/op
Iteration   4: 0.382 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.381 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.380, 0.381, 0.382), stdev = 0.001
  CI (99.9%): [0.375, 0.388] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 60.36% complete, ETA 00:31:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.054 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.054 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.054, 0.054, 0.054), stdev = 0.001
  CI (99.9%): [0.053, 0.055] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 60.71% complete, ETA 00:31:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.048 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.046, 0.049] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 61.07% complete, ETA 00:31:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.211 ms/op
Iteration   1: 0.201 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.199 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.200 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.199, 0.200, 0.201), stdev = 0.001
  CI (99.9%): [0.196, 0.204] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 61.43% complete, ETA 00:31:04
# Fork: 1 of 1
# Warmup Iteration   1: 2.977 ms/op
Iteration   1: 2.748 ms/op
Iteration   2: 2.740 ms/op
Iteration   3: 2.747 ms/op
Iteration   4: 2.747 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  2.745 Â±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (2.740, 2.745, 2.748), stdev = 0.003
  CI (99.9%): [2.723, 2.768] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 61.79% complete, ETA 00:30:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.470 ms/op
Iteration   1: 0.463 ms/op
Iteration   2: 0.462 ms/op
Iteration   3: 0.462 ms/op
Iteration   4: 0.463 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.463 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.462, 0.463, 0.463), stdev = 0.001
  CI (99.9%): [0.460, 0.465] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 62.14% complete, ETA 00:30:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.431 ms/op
Iteration   1: 0.396 ms/op
Iteration   2: 0.402 ms/op
Iteration   3: 0.405 ms/op
Iteration   4: 0.408 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  0.403 Â±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.396, 0.403, 0.408), stdev = 0.005
  CI (99.9%): [0.369, 0.437] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 62.50% complete, ETA 00:30:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.254 ms/op
Iteration   1: 1.185 ms/op
Iteration   2: 1.179 ms/op
Iteration   3: 1.180 ms/op
Iteration   4: 1.171 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  1.179 Â±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (1.171, 1.179, 1.185), stdev = 0.006
  CI (99.9%): [1.141, 1.216] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 62.86% complete, ETA 00:29:55
# Fork: 1 of 1
# Warmup Iteration   1: 33.954 ms/op
Iteration   1: 30.332 ms/op
Iteration   2: 30.308 ms/op
Iteration   3: 30.243 ms/op
Iteration   4: 30.312 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  30.299 Â±(99.9%) 0.251 ms/op [Average]
  (min, avg, max) = (30.243, 30.299, 30.332), stdev = 0.039
  CI (99.9%): [30.048, 30.550] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 63.21% complete, ETA 00:29:37
# Fork: 1 of 1
# Warmup Iteration   1: 2.714 ms/op
Iteration   1: 2.639 ms/op
Iteration   2: 2.649 ms/op
Iteration   3: 2.621 ms/op
Iteration   4: 2.680 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  2.647 Â±(99.9%) 0.161 ms/op [Average]
  (min, avg, max) = (2.621, 2.647, 2.680), stdev = 0.025
  CI (99.9%): [2.486, 2.808] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 63.57% complete, ETA 00:29:20
# Fork: 1 of 1
# Warmup Iteration   1: 3.702 ms/op
Iteration   1: 3.400 ms/op
Iteration   2: 3.395 ms/op
Iteration   3: 3.398 ms/op
Iteration   4: 3.389 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  3.396 Â±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (3.389, 3.396, 3.400), stdev = 0.005
  CI (99.9%): [3.363, 3.428] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 63.93% complete, ETA 00:29:03
# Fork: 1 of 1
# Warmup Iteration   1: 11.846 ms/op
Iteration   1: 10.362 ms/op
Iteration   2: 10.293 ms/op
Iteration   3: 10.336 ms/op
Iteration   4: 10.260 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testParallelSort":
  10.313 Â±(99.9%) 0.292 ms/op [Average]
  (min, avg, max) = (10.260, 10.313, 10.362), stdev = 0.045
  CI (99.9%): [10.021, 10.605] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 64.29% complete, ETA 00:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 64.64% complete, ETA 00:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 65.00% complete, ETA 00:28:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 65.36% complete, ETA 00:27:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 65.71% complete, ETA 00:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.044 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.044, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.044, 0.045] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 66.07% complete, ETA 00:27:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 66.43% complete, ETA 00:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 66.79% complete, ETA 00:26:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.022 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.022 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 67.14% complete, ETA 00:26:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.604 ms/op
Iteration   1: 0.594 ms/op
Iteration   2: 0.595 ms/op
Iteration   3: 0.595 ms/op
Iteration   4: 0.593 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.594 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.593, 0.594, 0.595), stdev = 0.001
  CI (99.9%): [0.589, 0.600] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 67.50% complete, ETA 00:26:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.050 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.050 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.050), stdev = 0.001
  CI (99.9%): [0.049, 0.051] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 67.86% complete, ETA 00:25:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.050 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.050 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.050), stdev = 0.001
  CI (99.9%): [0.050, 0.050] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 68.21% complete, ETA 00:25:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.283 ms/op
Iteration   1: 0.277 ms/op
Iteration   2: 0.278 ms/op
Iteration   3: 0.278 ms/op
Iteration   4: 0.278 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.278 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.277, 0.278, 0.278), stdev = 0.001
  CI (99.9%): [0.276, 0.279] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 68.57% complete, ETA 00:25:18
# Fork: 1 of 1
# Warmup Iteration   1: 7.584 ms/op
Iteration   1: 7.350 ms/op
Iteration   2: 7.336 ms/op
Iteration   3: 7.335 ms/op
Iteration   4: 7.334 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  7.339 Â±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (7.334, 7.339, 7.350), stdev = 0.008
  CI (99.9%): [7.290, 7.388] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 68.93% complete, ETA 00:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.495 ms/op
Iteration   1: 0.502 ms/op
Iteration   2: 0.483 ms/op
Iteration   3: 0.497 ms/op
Iteration   4: 0.483 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.491 Â±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.483, 0.491, 0.502), stdev = 0.010
  CI (99.9%): [0.428, 0.554] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 69.29% complete, ETA 00:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.540 ms/op
Iteration   1: 0.521 ms/op
Iteration   2: 0.521 ms/op
Iteration   3: 0.522 ms/op
Iteration   4: 0.521 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  0.521 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.521, 0.521, 0.522), stdev = 0.001
  CI (99.9%): [0.519, 0.524] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 69.64% complete, ETA 00:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 2.842 ms/op
Iteration   1: 2.731 ms/op
Iteration   2: 2.741 ms/op
Iteration   3: 2.739 ms/op
Iteration   4: 2.735 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  2.736 Â±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (2.731, 2.736, 2.741), stdev = 0.004
  CI (99.9%): [2.708, 2.765] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 70.00% complete, ETA 00:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 91.138 ms/op
Iteration   1: 88.509 ms/op
Iteration   2: 88.502 ms/op
Iteration   3: 88.488 ms/op
Iteration   4: 88.477 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  88.494 Â±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (88.477, 88.494, 88.509), stdev = 0.014
  CI (99.9%): [88.401, 88.587] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 70.36% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 3.428 ms/op
Iteration   1: 3.385 ms/op
Iteration   2: 3.394 ms/op
Iteration   3: 3.395 ms/op
Iteration   4: 3.393 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  3.392 Â±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (3.385, 3.392, 3.395), stdev = 0.005
  CI (99.9%): [3.362, 3.422] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 70.71% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 5.652 ms/op
Iteration   1: 5.238 ms/op
Iteration   2: 5.237 ms/op
Iteration   3: 5.241 ms/op
Iteration   4: 5.234 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  5.237 Â±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (5.234, 5.237, 5.241), stdev = 0.003
  CI (99.9%): [5.218, 5.256] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Int.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 71.07% complete, ETA 00:23:18
# Fork: 1 of 1
# Warmup Iteration   1: 29.066 ms/op
Iteration   1: 27.850 ms/op
Iteration   2: 27.926 ms/op
Iteration   3: 27.545 ms/op
Iteration   4: 27.533 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Int.testSort":
  27.714 Â±(99.9%) 1.317 ms/op [Average]
  (min, avg, max) = (27.533, 27.714, 27.926), stdev = 0.204
  CI (99.9%): [26.396, 29.031] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 71.43% complete, ETA 00:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 71.79% complete, ETA 00:22:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 72.14% complete, ETA 00:22:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 72.50% complete, ETA 00:22:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 72.86% complete, ETA 00:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.044 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.044, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.043, 0.044] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 73.21% complete, ETA 00:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 73.57% complete, ETA 00:21:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.006 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 73.93% complete, ETA 00:21:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.022 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.022 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 74.29% complete, ETA 00:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.402 ms/op
Iteration   1: 0.380 ms/op
Iteration   2: 0.382 ms/op
Iteration   3: 0.381 ms/op
Iteration   4: 0.381 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.381 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.380, 0.381, 0.382), stdev = 0.001
  CI (99.9%): [0.377, 0.385] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 74.64% complete, ETA 00:20:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.051 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.051 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.050, 0.051, 0.051), stdev = 0.001
  CI (99.9%): [0.049, 0.052] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 75.00% complete, ETA 00:20:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.049 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.049 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.049, 0.049, 0.049), stdev = 0.001
  CI (99.9%): [0.048, 0.050] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 75.36% complete, ETA 00:19:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
Iteration   1: 0.196 ms/op
Iteration   2: 0.196 ms/op
Iteration   3: 0.196 ms/op
Iteration   4: 0.196 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.196 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.196, 0.196, 0.196), stdev = 0.001
  CI (99.9%): [0.193, 0.199] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 75.71% complete, ETA 00:19:33
# Fork: 1 of 1
# Warmup Iteration   1: 2.894 ms/op
Iteration   1: 2.783 ms/op
Iteration   2: 2.773 ms/op
Iteration   3: 2.774 ms/op
Iteration   4: 2.774 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  2.776 Â±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (2.773, 2.776, 2.783), stdev = 0.005
  CI (99.9%): [2.745, 2.807] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 76.07% complete, ETA 00:19:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.459 ms/op
Iteration   1: 0.448 ms/op
Iteration   2: 0.448 ms/op
Iteration   3: 0.448 ms/op
Iteration   4: 0.447 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.447 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.447, 0.447, 0.448), stdev = 0.001
  CI (99.9%): [0.446, 0.449] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 76.43% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.875 ms/op
Iteration   1: 0.822 ms/op
Iteration   2: 0.817 ms/op
Iteration   3: 0.799 ms/op
Iteration   4: 0.798 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  0.809 Â±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.798, 0.809, 0.822), stdev = 0.012
  CI (99.9%): [0.731, 0.887] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 76.79% complete, ETA 00:18:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.289 ms/op
Iteration   1: 1.203 ms/op
Iteration   2: 1.200 ms/op
Iteration   3: 1.201 ms/op
Iteration   4: 1.200 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  1.201 Â±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (1.200, 1.201, 1.203), stdev = 0.001
  CI (99.9%): [1.194, 1.208] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 77.14% complete, ETA 00:18:24
# Fork: 1 of 1
# Warmup Iteration   1: 32.367 ms/op
Iteration   1: 29.662 ms/op
Iteration   2: 29.628 ms/op
Iteration   3: 30.013 ms/op
Iteration   4: 29.972 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  29.819 Â±(99.9%) 1.305 ms/op [Average]
  (min, avg, max) = (29.628, 29.819, 30.013), stdev = 0.202
  CI (99.9%): [28.514, 31.123] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 77.50% complete, ETA 00:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 2.871 ms/op
Iteration   1: 2.831 ms/op
Iteration   2: 2.814 ms/op
Iteration   3: 2.817 ms/op
Iteration   4: 2.828 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  2.822 Â±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (2.814, 2.822, 2.831), stdev = 0.008
  CI (99.9%): [2.770, 2.875] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 77.86% complete, ETA 00:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 4.885 ms/op
Iteration   1: 4.392 ms/op
Iteration   2: 4.392 ms/op
Iteration   3: 4.389 ms/op
Iteration   4: 4.381 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  4.388 Â±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (4.381, 4.388, 4.392), stdev = 0.005
  CI (99.9%): [4.356, 4.421] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 78.21% complete, ETA 00:17:32
# Fork: 1 of 1
# Warmup Iteration   1: 12.681 ms/op
Iteration   1: 10.983 ms/op
Iteration   2: 11.042 ms/op
Iteration   3: 11.002 ms/op
Iteration   4: 11.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testParallelSort":
  11.008 Â±(99.9%) 0.159 ms/op [Average]
  (min, avg, max) = (10.983, 11.008, 11.042), stdev = 0.025
  CI (99.9%): [10.849, 11.167] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 78.57% complete, ETA 00:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 78.93% complete, ETA 00:16:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 79.29% complete, ETA 00:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 79.64% complete, ETA 00:16:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.002 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 80.00% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.044 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.044, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.044, 0.045] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 80.36% complete, ETA 00:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 80.71% complete, ETA 00:15:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.005 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.006] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 81.07% complete, ETA 00:15:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.022 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.022 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.022, 0.022] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 81.43% complete, ETA 00:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.593 ms/op
Iteration   1: 0.586 ms/op
Iteration   2: 0.584 ms/op
Iteration   3: 0.584 ms/op
Iteration   4: 0.586 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.585 Â±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.584, 0.585, 0.586), stdev = 0.001
  CI (99.9%): [0.578, 0.592] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 81.79% complete, ETA 00:14:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.048 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 82.14% complete, ETA 00:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.055 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.055 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.055, 0.055, 0.055), stdev = 0.001
  CI (99.9%): [0.054, 0.056] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 82.50% complete, ETA 00:14:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.270 ms/op
Iteration   1: 0.263 ms/op
Iteration   2: 0.263 ms/op
Iteration   3: 0.263 ms/op
Iteration   4: 0.264 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.263 Â±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.263, 0.263, 0.264), stdev = 0.001
  CI (99.9%): [0.261, 0.266] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 82.86% complete, ETA 00:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 7.619 ms/op
Iteration   1: 7.386 ms/op
Iteration   2: 7.387 ms/op
Iteration   3: 7.387 ms/op
Iteration   4: 7.408 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  7.392 Â±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (7.386, 7.392, 7.408), stdev = 0.011
  CI (99.9%): [7.322, 7.462] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 83.21% complete, ETA 00:13:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.496 ms/op
Iteration   1: 0.487 ms/op
Iteration   2: 0.489 ms/op
Iteration   3: 0.489 ms/op
Iteration   4: 0.487 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.488 Â±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.487, 0.488, 0.489), stdev = 0.001
  CI (99.9%): [0.481, 0.495] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 83.57% complete, ETA 00:13:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.578 ms/op
Iteration   1: 0.551 ms/op
Iteration   2: 0.550 ms/op
Iteration   3: 0.550 ms/op
Iteration   4: 0.552 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  0.551 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.550, 0.551, 0.552), stdev = 0.001
  CI (99.9%): [0.545, 0.556] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 83.93% complete, ETA 00:12:56
# Fork: 1 of 1
# Warmup Iteration   1: 2.865 ms/op
Iteration   1: 2.726 ms/op
Iteration   2: 2.681 ms/op
Iteration   3: 2.674 ms/op
Iteration   4: 2.675 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  2.689 Â±(99.9%) 0.160 ms/op [Average]
  (min, avg, max) = (2.674, 2.689, 2.726), stdev = 0.025
  CI (99.9%): [2.529, 2.849] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 84.29% complete, ETA 00:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 89.835 ms/op
Iteration   1: 86.997 ms/op
Iteration   2: 87.286 ms/op
Iteration   3: 87.268 ms/op
Iteration   4: 87.260 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  87.203 Â±(99.9%) 0.891 ms/op [Average]
  (min, avg, max) = (86.997, 87.203, 87.286), stdev = 0.138
  CI (99.9%): [86.312, 88.094] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 84.64% complete, ETA 00:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 3.680 ms/op
Iteration   1: 3.627 ms/op
Iteration   2: 3.628 ms/op
Iteration   3: 3.626 ms/op
Iteration   4: 3.628 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  3.627 Â±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (3.626, 3.627, 3.628), stdev = 0.001
  CI (99.9%): [3.622, 3.632] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 85.00% complete, ETA 00:12:05
# Fork: 1 of 1
# Warmup Iteration   1: 6.269 ms/op
Iteration   1: 5.987 ms/op
Iteration   2: 5.904 ms/op
Iteration   3: 5.879 ms/op
Iteration   4: 5.866 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  5.909 Â±(99.9%) 0.353 ms/op [Average]
  (min, avg, max) = (5.866, 5.909, 5.987), stdev = 0.055
  CI (99.9%): [5.557, 6.262] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Long.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 85.36% complete, ETA 00:11:47
# Fork: 1 of 1
# Warmup Iteration   1: 30.068 ms/op
Iteration   1: 28.815 ms/op
Iteration   2: 27.960 ms/op
Iteration   3: 27.894 ms/op
Iteration   4: 27.917 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Long.testSort":
  28.146 Â±(99.9%) 2.884 ms/op [Average]
  (min, avg, max) = (27.894, 28.146, 28.815), stdev = 0.446
  CI (99.9%): [25.262, 31.030] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 85.71% complete, ETA 00:11:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 86.07% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 86.43% complete, ETA 00:10:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 86.79% complete, ETA 00:10:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 87.14% complete, ETA 00:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.045 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.045 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.045, 0.045, 0.045), stdev = 0.001
  CI (99.9%): [0.045, 0.045] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 87.50% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.004 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 87.86% complete, ETA 00:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.014 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.014, 0.014] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 88.21% complete, ETA 00:09:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.023 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.023, 0.023] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 88.57% complete, ETA 00:09:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
Iteration   1: 0.176 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.176 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.176 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.176, 0.176, 0.176), stdev = 0.001
  CI (99.9%): [0.175, 0.177] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 88.93% complete, ETA 00:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.044 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.043, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.040, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 89.29% complete, ETA 00:08:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.056 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.056 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.055, 0.056, 0.056), stdev = 0.001
  CI (99.9%): [0.055, 0.057] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 89.64% complete, ETA 00:08:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.047 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.047 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.047), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 90.00% complete, ETA 00:08:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.965 ms/op
Iteration   1: 0.924 ms/op
Iteration   2: 0.923 ms/op
Iteration   3: 0.919 ms/op
Iteration   4: 0.918 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.921 Â±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.918, 0.921, 0.924), stdev = 0.003
  CI (99.9%): [0.904, 0.938] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 90.36% complete, ETA 00:07:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.192 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.192 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.192, 0.192, 0.192), stdev = 0.001
  CI (99.9%): [0.191, 0.192] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 90.71% complete, ETA 00:07:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.237 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.218 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.219 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.218 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.218, 0.218, 0.219), stdev = 0.001
  CI (99.9%): [0.217, 0.220] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 91.07% complete, ETA 00:07:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.294 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.253 ms/op
Iteration   3: 0.250 ms/op
Iteration   4: 0.249 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.253 Â±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.249, 0.253, 0.261), stdev = 0.006
  CI (99.9%): [0.218, 0.289] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 91.43% complete, ETA 00:06:54
# Fork: 1 of 1
# Warmup Iteration   1: 2.588 ms/op
Iteration   1: 2.496 ms/op
Iteration   2: 2.499 ms/op
Iteration   3: 2.507 ms/op
Iteration   4: 2.508 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  2.503 Â±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (2.496, 2.503, 2.508), stdev = 0.006
  CI (99.9%): [2.465, 2.541] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 91.79% complete, ETA 00:06:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.845 ms/op
Iteration   1: 0.795 ms/op
Iteration   2: 0.795 ms/op
Iteration   3: 0.796 ms/op
Iteration   4: 0.795 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  0.796 Â±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.795, 0.796, 0.796), stdev = 0.001
  CI (99.9%): [0.793, 0.798] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 92.14% complete, ETA 00:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 1.307 ms/op
Iteration   1: 1.256 ms/op
Iteration   2: 1.222 ms/op
Iteration   3: 1.223 ms/op
Iteration   4: 1.225 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  1.232 Â±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (1.222, 1.232, 1.256), stdev = 0.016
  CI (99.9%): [1.127, 1.336] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 92.50% complete, ETA 00:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 1.140 ms/op
Iteration   1: 1.120 ms/op
Iteration   2: 1.146 ms/op
Iteration   3: 1.144 ms/op
Iteration   4: 1.143 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testParallelSort":
  1.138 Â±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (1.120, 1.138, 1.146), stdev = 0.012
  CI (99.9%): [1.058, 1.219] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = RANDOM)

# Run progress: 92.86% complete, ETA 00:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.003 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = REPEATED)

# Run progress: 93.21% complete, ETA 00:05:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = STAGGER)

# Run progress: 93.57% complete, ETA 00:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100, type = SHUFFLE)

# Run progress: 93.93% complete, ETA 00:04:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.001 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = RANDOM)

# Run progress: 94.29% complete, ETA 00:04:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.045 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.045 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.045, 0.045, 0.045), stdev = 0.001
  CI (99.9%): [0.044, 0.045] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = REPEATED)

# Run progress: 94.64% complete, ETA 00:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.004 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = STAGGER)

# Run progress: 95.00% complete, ETA 00:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.013 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.013, 0.013] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000, type = SHUFFLE)

# Run progress: 95.36% complete, ETA 00:03:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.023 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.022, 0.023] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = RANDOM)

# Run progress: 95.71% complete, ETA 00:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
Iteration   1: 0.174 ms/op
Iteration   2: 0.175 ms/op
Iteration   3: 0.175 ms/op
Iteration   4: 0.175 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.175 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.174, 0.175, 0.175), stdev = 0.001
  CI (99.9%): [0.173, 0.176] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = REPEATED)

# Run progress: 96.07% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.044 Â±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.043, 0.044, 0.044), stdev = 0.001
  CI (99.9%): [0.040, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = STAGGER)

# Run progress: 96.43% complete, ETA 00:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.057 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.056 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.057 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.056, 0.057, 0.058), stdev = 0.001
  CI (99.9%): [0.051, 0.063] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 10000, type = SHUFFLE)

# Run progress: 96.79% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.048 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.047 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.047, 0.047, 0.048), stdev = 0.001
  CI (99.9%): [0.047, 0.048] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = RANDOM)

# Run progress: 97.14% complete, ETA 00:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.968 ms/op
Iteration   1: 0.922 ms/op
Iteration   2: 0.922 ms/op
Iteration   3: 0.921 ms/op
Iteration   4: 0.920 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.921 Â±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.920, 0.921, 0.922), stdev = 0.001
  CI (99.9%): [0.915, 0.927] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = REPEATED)

# Run progress: 97.50% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.192 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.192 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.192, 0.192, 0.192), stdev = 0.001
  CI (99.9%): [0.191, 0.193] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = STAGGER)

# Run progress: 97.86% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.233 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.219 ms/op
Iteration   3: 0.219 ms/op
Iteration   4: 0.218 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.218 Â±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.218, 0.218, 0.219), stdev = 0.001
  CI (99.9%): [0.217, 0.220] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 100000, type = SHUFFLE)

# Run progress: 98.21% complete, ETA 00:01:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.293 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.253 ms/op
Iteration   3: 0.249 ms/op
Iteration   4: 0.249 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.253 Â±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.249, 0.253, 0.261), stdev = 0.005
  CI (99.9%): [0.219, 0.287] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = RANDOM)

# Run progress: 98.57% complete, ETA 00:01:09
# Fork: 1 of 1
# Warmup Iteration   1: 2.621 ms/op
Iteration   1: 2.505 ms/op
Iteration   2: 2.522 ms/op
Iteration   3: 2.516 ms/op
Iteration   4: 2.511 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  2.514 Â±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (2.505, 2.514, 2.522), stdev = 0.007
  CI (99.9%): [2.466, 2.561] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = REPEATED)

# Run progress: 98.93% complete, ETA 00:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.847 ms/op
Iteration   1: 0.793 ms/op
Iteration   2: 0.793 ms/op
Iteration   3: 0.794 ms/op
Iteration   4: 0.796 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  0.794 Â±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.793, 0.794, 0.796), stdev = 0.001
  CI (99.9%): [0.785, 0.803] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = STAGGER)

# Run progress: 99.29% complete, ETA 00:00:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.302 ms/op
Iteration   1: 1.250 ms/op
Iteration   2: 1.222 ms/op
Iteration   3: 1.221 ms/op
Iteration   4: 1.226 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  1.230 Â±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (1.221, 1.230, 1.250), stdev = 0.014
  CI (99.9%): [1.142, 1.317] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 20-internal, OpenJDK 64-Bit Server VM, 20-internal-adhoc.bourgesl.jdk-gh
# VM invoker: /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/jdk/bin/java
# VM options: -Djava.library.path=/home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/images/test/micro/native
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 5 s each
# Measurement: 4 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.java.util.ArraysSort.Short.testSort
# Parameters: (size = 1000000, type = SHUFFLE)

# Run progress: 99.64% complete, ETA 00:00:17
# Fork: 1 of 1
# Warmup Iteration   1: 1.148 ms/op
Iteration   1: 1.076 ms/op
Iteration   2: 1.141 ms/op
Iteration   3: 1.142 ms/op
Iteration   4: 1.141 ms/op


Result "org.openjdk.bench.java.util.ArraysSort.Short.testSort":
  1.125 Â±(99.9%) 0.210 ms/op [Average]
  (min, avg, max) = (1.076, 1.125, 1.142), stdev = 0.033
  CI (99.9%): [0.915, 1.336] (assumes normal distribution)


# Run complete. Total time: 01:20:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                            (size)    (type)  Mode  Cnt   Score    Error  Units
ArraysSort.Byte.testParallelSort        100    RANDOM  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Byte.testParallelSort        100  REPEATED  avgt    4  â 10â»â´           ms/op
ArraysSort.Byte.testParallelSort        100   STAGGER  avgt    4  â 10â»Â³           ms/op
ArraysSort.Byte.testParallelSort        100   SHUFFLE  avgt    4  â 10â»Â³           ms/op
ArraysSort.Byte.testParallelSort       1000    RANDOM  avgt    4   0.006 Â±  0.004  ms/op
ArraysSort.Byte.testParallelSort       1000  REPEATED  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Byte.testParallelSort       1000   STAGGER  avgt    4   0.002 Â±  0.002  ms/op
ArraysSort.Byte.testParallelSort       1000   SHUFFLE  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Byte.testParallelSort      10000    RANDOM  avgt    4   0.013 Â±  0.009  ms/op
ArraysSort.Byte.testParallelSort      10000  REPEATED  avgt    4   0.011 Â±  0.006  ms/op
ArraysSort.Byte.testParallelSort      10000   STAGGER  avgt    4   0.009 Â±  0.004  ms/op
ArraysSort.Byte.testParallelSort      10000   SHUFFLE  avgt    4   0.009 Â±  0.004  ms/op
ArraysSort.Byte.testParallelSort     100000    RANDOM  avgt    4   0.083 Â±  0.024  ms/op
ArraysSort.Byte.testParallelSort     100000  REPEATED  avgt    4   0.067 Â±  0.023  ms/op
ArraysSort.Byte.testParallelSort     100000   STAGGER  avgt    4   0.071 Â±  0.001  ms/op
ArraysSort.Byte.testParallelSort     100000   SHUFFLE  avgt    4   0.077 Â±  0.038  ms/op
ArraysSort.Byte.testParallelSort    1000000    RANDOM  avgt    4   0.699 Â±  0.010  ms/op
ArraysSort.Byte.testParallelSort    1000000  REPEATED  avgt    4   0.657 Â±  0.005  ms/op
ArraysSort.Byte.testParallelSort    1000000   STAGGER  avgt    4   0.665 Â±  0.006  ms/op
ArraysSort.Byte.testParallelSort    1000000   SHUFFLE  avgt    4   0.666 Â±  0.008  ms/op
ArraysSort.Byte.testSort                100    RANDOM  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Byte.testSort                100  REPEATED  avgt    4  â 10â»â´           ms/op
ArraysSort.Byte.testSort                100   STAGGER  avgt    4  â 10â»Â³           ms/op
ArraysSort.Byte.testSort                100   SHUFFLE  avgt    4  â 10â»Â³           ms/op
ArraysSort.Byte.testSort               1000    RANDOM  avgt    4   0.006 Â±  0.004  ms/op
ArraysSort.Byte.testSort               1000  REPEATED  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Byte.testSort               1000   STAGGER  avgt    4   0.002 Â±  0.002  ms/op
ArraysSort.Byte.testSort               1000   SHUFFLE  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Byte.testSort              10000    RANDOM  avgt    4   0.014 Â±  0.009  ms/op
ArraysSort.Byte.testSort              10000  REPEATED  avgt    4   0.011 Â±  0.006  ms/op
ArraysSort.Byte.testSort              10000   STAGGER  avgt    4   0.009 Â±  0.003  ms/op
ArraysSort.Byte.testSort              10000   SHUFFLE  avgt    4   0.009 Â±  0.003  ms/op
ArraysSort.Byte.testSort             100000    RANDOM  avgt    4   0.083 Â±  0.025  ms/op
ArraysSort.Byte.testSort             100000  REPEATED  avgt    4   0.069 Â±  0.023  ms/op
ArraysSort.Byte.testSort             100000   STAGGER  avgt    4   0.072 Â±  0.002  ms/op
ArraysSort.Byte.testSort             100000   SHUFFLE  avgt    4   0.078 Â±  0.036  ms/op
ArraysSort.Byte.testSort            1000000    RANDOM  avgt    4   0.699 Â±  0.014  ms/op
ArraysSort.Byte.testSort            1000000  REPEATED  avgt    4   0.657 Â±  0.009  ms/op
ArraysSort.Byte.testSort            1000000   STAGGER  avgt    4   0.663 Â±  0.007  ms/op
ArraysSort.Byte.testSort            1000000   SHUFFLE  avgt    4   0.667 Â±  0.014  ms/op
ArraysSort.Char.testParallelSort        100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort        100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort        100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort        100   SHUFFLE  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000    RANDOM  avgt    4   0.045 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000  REPEATED  avgt    4   0.004 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000   STAGGER  avgt    4   0.014 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort       1000   SHUFFLE  avgt    4   0.023 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort      10000    RANDOM  avgt    4   0.180 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort      10000  REPEATED  avgt    4   0.054 Â±  0.034  ms/op
ArraysSort.Char.testParallelSort      10000   STAGGER  avgt    4   0.058 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort      10000   SHUFFLE  avgt    4   0.064 Â±  0.002  ms/op
ArraysSort.Char.testParallelSort     100000    RANDOM  avgt    4   0.898 Â±  0.040  ms/op
ArraysSort.Char.testParallelSort     100000  REPEATED  avgt    4   0.187 Â±  0.001  ms/op
ArraysSort.Char.testParallelSort     100000   STAGGER  avgt    4   0.242 Â±  0.003  ms/op
ArraysSort.Char.testParallelSort     100000   SHUFFLE  avgt    4   0.275 Â±  0.021  ms/op
ArraysSort.Char.testParallelSort    1000000    RANDOM  avgt    4   2.487 Â±  0.050  ms/op
ArraysSort.Char.testParallelSort    1000000  REPEATED  avgt    4   0.829 Â±  0.134  ms/op
ArraysSort.Char.testParallelSort    1000000   STAGGER  avgt    4   1.224 Â±  0.068  ms/op
ArraysSort.Char.testParallelSort    1000000   SHUFFLE  avgt    4   1.105 Â±  0.232  ms/op
ArraysSort.Char.testSort                100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Char.testSort                100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Char.testSort                100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Char.testSort                100   SHUFFLE  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Char.testSort               1000    RANDOM  avgt    4   0.045 Â±  0.001  ms/op
ArraysSort.Char.testSort               1000  REPEATED  avgt    4   0.004 Â±  0.001  ms/op
ArraysSort.Char.testSort               1000   STAGGER  avgt    4   0.014 Â±  0.001  ms/op
ArraysSort.Char.testSort               1000   SHUFFLE  avgt    4   0.023 Â±  0.001  ms/op
ArraysSort.Char.testSort              10000    RANDOM  avgt    4   0.180 Â±  0.001  ms/op
ArraysSort.Char.testSort              10000  REPEATED  avgt    4   0.054 Â±  0.040  ms/op
ArraysSort.Char.testSort              10000   STAGGER  avgt    4   0.062 Â±  0.032  ms/op
ArraysSort.Char.testSort              10000   SHUFFLE  avgt    4   0.064 Â±  0.002  ms/op
ArraysSort.Char.testSort             100000    RANDOM  avgt    4   0.898 Â±  0.056  ms/op
ArraysSort.Char.testSort             100000  REPEATED  avgt    4   0.203 Â±  0.001  ms/op
ArraysSort.Char.testSort             100000   STAGGER  avgt    4   0.243 Â±  0.003  ms/op
ArraysSort.Char.testSort             100000   SHUFFLE  avgt    4   0.408 Â±  0.692  ms/op
ArraysSort.Char.testSort            1000000    RANDOM  avgt    4   2.501 Â±  0.075  ms/op
ArraysSort.Char.testSort            1000000  REPEATED  avgt    4   0.829 Â±  0.139  ms/op
ArraysSort.Char.testSort            1000000   STAGGER  avgt    4   1.220 Â±  0.094  ms/op
ArraysSort.Char.testSort            1000000   SHUFFLE  avgt    4   1.128 Â±  0.212  ms/op
ArraysSort.Double.testParallelSort      100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort      100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort      100   STAGGER  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort      100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000    RANDOM  avgt    4   0.048 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000  REPEATED  avgt    4   0.006 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000   STAGGER  avgt    4   0.007 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort     1000   SHUFFLE  avgt    4   0.024 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort    10000    RANDOM  avgt    4   0.410 Â±  0.016  ms/op
ArraysSort.Double.testParallelSort    10000  REPEATED  avgt    4   0.062 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort    10000   STAGGER  avgt    4   0.063 Â±  0.001  ms/op
ArraysSort.Double.testParallelSort    10000   SHUFFLE  avgt    4   0.214 Â±  0.003  ms/op
ArraysSort.Double.testParallelSort   100000    RANDOM  avgt    4   2.990 Â±  0.077  ms/op
ArraysSort.Double.testParallelSort   100000  REPEATED  avgt    4   0.620 Â±  0.002  ms/op
ArraysSort.Double.testParallelSort   100000   STAGGER  avgt    4   0.626 Â±  0.014  ms/op
ArraysSort.Double.testParallelSort   100000   SHUFFLE  avgt    4   1.361 Â±  0.035  ms/op
ArraysSort.Double.testParallelSort  1000000    RANDOM  avgt    4  31.398 Â±  0.228  ms/op
ArraysSort.Double.testParallelSort  1000000  REPEATED  avgt    4   4.274 Â±  0.071  ms/op
ArraysSort.Double.testParallelSort  1000000   STAGGER  avgt    4   5.599 Â±  0.076  ms/op
ArraysSort.Double.testParallelSort  1000000   SHUFFLE  avgt    4  12.464 Â±  0.117  ms/op
ArraysSort.Double.testSort              100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Double.testSort              100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Double.testSort              100   STAGGER  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Double.testSort              100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Double.testSort             1000    RANDOM  avgt    4   0.048 Â±  0.001  ms/op
ArraysSort.Double.testSort             1000  REPEATED  avgt    4   0.006 Â±  0.001  ms/op
ArraysSort.Double.testSort             1000   STAGGER  avgt    4   0.007 Â±  0.001  ms/op
ArraysSort.Double.testSort             1000   SHUFFLE  avgt    4   0.024 Â±  0.001  ms/op
ArraysSort.Double.testSort            10000    RANDOM  avgt    4   0.631 Â±  0.006  ms/op
ArraysSort.Double.testSort            10000  REPEATED  avgt    4   0.057 Â±  0.001  ms/op
ArraysSort.Double.testSort            10000   STAGGER  avgt    4   0.070 Â±  0.001  ms/op
ArraysSort.Double.testSort            10000   SHUFFLE  avgt    4   0.286 Â±  0.004  ms/op
ArraysSort.Double.testSort           100000    RANDOM  avgt    4   7.880 Â±  0.071  ms/op
ArraysSort.Double.testSort           100000  REPEATED  avgt    4   0.687 Â±  0.009  ms/op
ArraysSort.Double.testSort           100000   STAGGER  avgt    4   0.685 Â±  0.006  ms/op
ArraysSort.Double.testSort           100000   SHUFFLE  avgt    4   2.995 Â±  0.144  ms/op
ArraysSort.Double.testSort          1000000    RANDOM  avgt    4  94.356 Â±  0.416  ms/op
ArraysSort.Double.testSort          1000000  REPEATED  avgt    4   5.477 Â±  0.024  ms/op
ArraysSort.Double.testSort          1000000   STAGGER  avgt    4   7.148 Â±  0.675  ms/op
ArraysSort.Double.testSort          1000000   SHUFFLE  avgt    4  31.824 Â±  2.663  ms/op
ArraysSort.Float.testParallelSort       100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort       100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort       100   STAGGER  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort       100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000    RANDOM  avgt    4   0.047 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000  REPEATED  avgt    4   0.006 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000   STAGGER  avgt    4   0.007 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort      1000   SHUFFLE  avgt    4   0.023 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort     10000    RANDOM  avgt    4   0.412 Â±  0.005  ms/op
ArraysSort.Float.testParallelSort     10000  REPEATED  avgt    4   0.065 Â±  0.001  ms/op
ArraysSort.Float.testParallelSort     10000   STAGGER  avgt    4   0.061 Â±  0.002  ms/op
ArraysSort.Float.testParallelSort     10000   SHUFFLE  avgt    4   0.213 Â±  0.004  ms/op
ArraysSort.Float.testParallelSort    100000    RANDOM  avgt    4   3.126 Â±  0.023  ms/op
ArraysSort.Float.testParallelSort    100000  REPEATED  avgt    4   0.616 Â±  0.006  ms/op
ArraysSort.Float.testParallelSort    100000   STAGGER  avgt    4   0.589 Â±  0.028  ms/op
ArraysSort.Float.testParallelSort    100000   SHUFFLE  avgt    4   1.353 Â±  0.037  ms/op
ArraysSort.Float.testParallelSort   1000000    RANDOM  avgt    4  31.800 Â±  0.656  ms/op
ArraysSort.Float.testParallelSort   1000000  REPEATED  avgt    4   4.027 Â±  0.047  ms/op
ArraysSort.Float.testParallelSort   1000000   STAGGER  avgt    4   4.823 Â±  0.109  ms/op
ArraysSort.Float.testParallelSort   1000000   SHUFFLE  avgt    4  12.160 Â±  0.150  ms/op
ArraysSort.Float.testSort               100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Float.testSort               100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Float.testSort               100   STAGGER  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Float.testSort               100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Float.testSort              1000    RANDOM  avgt    4   0.047 Â±  0.001  ms/op
ArraysSort.Float.testSort              1000  REPEATED  avgt    4   0.006 Â±  0.001  ms/op
ArraysSort.Float.testSort              1000   STAGGER  avgt    4   0.006 Â±  0.001  ms/op
ArraysSort.Float.testSort              1000   SHUFFLE  avgt    4   0.023 Â±  0.001  ms/op
ArraysSort.Float.testSort             10000    RANDOM  avgt    4   0.636 Â±  0.006  ms/op
ArraysSort.Float.testSort             10000  REPEATED  avgt    4   0.057 Â±  0.001  ms/op
ArraysSort.Float.testSort             10000   STAGGER  avgt    4   0.067 Â±  0.001  ms/op
ArraysSort.Float.testSort             10000   SHUFFLE  avgt    4   0.285 Â±  0.003  ms/op
ArraysSort.Float.testSort            100000    RANDOM  avgt    4   7.907 Â±  0.096  ms/op
ArraysSort.Float.testSort            100000  REPEATED  avgt    4   0.689 Â±  0.003  ms/op
ArraysSort.Float.testSort            100000   STAGGER  avgt    4   0.653 Â±  0.007  ms/op
ArraysSort.Float.testSort            100000   SHUFFLE  avgt    4   3.000 Â±  0.033  ms/op
ArraysSort.Float.testSort           1000000    RANDOM  avgt    4  92.155 Â±  0.578  ms/op
ArraysSort.Float.testSort           1000000  REPEATED  avgt    4   5.366 Â±  0.049  ms/op
ArraysSort.Float.testSort           1000000   STAGGER  avgt    4   6.777 Â±  0.037  ms/op
ArraysSort.Float.testSort           1000000   SHUFFLE  avgt    4  31.352 Â±  1.424  ms/op
ArraysSort.Int.testParallelSort         100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort         100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort         100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort         100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000    RANDOM  avgt    4   0.044 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000  REPEATED  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000   STAGGER  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort        1000   SHUFFLE  avgt    4   0.022 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort       10000    RANDOM  avgt    4   0.381 Â±  0.006  ms/op
ArraysSort.Int.testParallelSort       10000  REPEATED  avgt    4   0.054 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort       10000   STAGGER  avgt    4   0.048 Â±  0.001  ms/op
ArraysSort.Int.testParallelSort       10000   SHUFFLE  avgt    4   0.200 Â±  0.004  ms/op
ArraysSort.Int.testParallelSort      100000    RANDOM  avgt    4   2.745 Â±  0.022  ms/op
ArraysSort.Int.testParallelSort      100000  REPEATED  avgt    4   0.463 Â±  0.002  ms/op
ArraysSort.Int.testParallelSort      100000   STAGGER  avgt    4   0.403 Â±  0.034  ms/op
ArraysSort.Int.testParallelSort      100000   SHUFFLE  avgt    4   1.179 Â±  0.038  ms/op
ArraysSort.Int.testParallelSort     1000000    RANDOM  avgt    4  30.299 Â±  0.251  ms/op
ArraysSort.Int.testParallelSort     1000000  REPEATED  avgt    4   2.647 Â±  0.161  ms/op
ArraysSort.Int.testParallelSort     1000000   STAGGER  avgt    4   3.396 Â±  0.033  ms/op
ArraysSort.Int.testParallelSort     1000000   SHUFFLE  avgt    4  10.313 Â±  0.292  ms/op
ArraysSort.Int.testSort                 100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Int.testSort                 100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Int.testSort                 100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Int.testSort                 100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Int.testSort                1000    RANDOM  avgt    4   0.044 Â±  0.001  ms/op
ArraysSort.Int.testSort                1000  REPEATED  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Int.testSort                1000   STAGGER  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Int.testSort                1000   SHUFFLE  avgt    4   0.022 Â±  0.001  ms/op
ArraysSort.Int.testSort               10000    RANDOM  avgt    4   0.594 Â±  0.006  ms/op
ArraysSort.Int.testSort               10000  REPEATED  avgt    4   0.050 Â±  0.001  ms/op
ArraysSort.Int.testSort               10000   STAGGER  avgt    4   0.050 Â±  0.001  ms/op
ArraysSort.Int.testSort               10000   SHUFFLE  avgt    4   0.278 Â±  0.002  ms/op
ArraysSort.Int.testSort              100000    RANDOM  avgt    4   7.339 Â±  0.049  ms/op
ArraysSort.Int.testSort              100000  REPEATED  avgt    4   0.491 Â±  0.063  ms/op
ArraysSort.Int.testSort              100000   STAGGER  avgt    4   0.521 Â±  0.002  ms/op
ArraysSort.Int.testSort              100000   SHUFFLE  avgt    4   2.736 Â±  0.028  ms/op
ArraysSort.Int.testSort             1000000    RANDOM  avgt    4  88.494 Â±  0.093  ms/op
ArraysSort.Int.testSort             1000000  REPEATED  avgt    4   3.392 Â±  0.030  ms/op
ArraysSort.Int.testSort             1000000   STAGGER  avgt    4   5.237 Â±  0.019  ms/op
ArraysSort.Int.testSort             1000000   SHUFFLE  avgt    4  27.714 Â±  1.317  ms/op
ArraysSort.Long.testParallelSort        100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort        100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort        100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort        100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000    RANDOM  avgt    4   0.044 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000  REPEATED  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000   STAGGER  avgt    4   0.006 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort       1000   SHUFFLE  avgt    4   0.022 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort      10000    RANDOM  avgt    4   0.381 Â±  0.004  ms/op
ArraysSort.Long.testParallelSort      10000  REPEATED  avgt    4   0.051 Â±  0.002  ms/op
ArraysSort.Long.testParallelSort      10000   STAGGER  avgt    4   0.049 Â±  0.001  ms/op
ArraysSort.Long.testParallelSort      10000   SHUFFLE  avgt    4   0.196 Â±  0.003  ms/op
ArraysSort.Long.testParallelSort     100000    RANDOM  avgt    4   2.776 Â±  0.031  ms/op
ArraysSort.Long.testParallelSort     100000  REPEATED  avgt    4   0.447 Â±  0.002  ms/op
ArraysSort.Long.testParallelSort     100000   STAGGER  avgt    4   0.809 Â±  0.078  ms/op
ArraysSort.Long.testParallelSort     100000   SHUFFLE  avgt    4   1.201 Â±  0.007  ms/op
ArraysSort.Long.testParallelSort    1000000    RANDOM  avgt    4  29.819 Â±  1.305  ms/op
ArraysSort.Long.testParallelSort    1000000  REPEATED  avgt    4   2.822 Â±  0.052  ms/op
ArraysSort.Long.testParallelSort    1000000   STAGGER  avgt    4   4.388 Â±  0.032  ms/op
ArraysSort.Long.testParallelSort    1000000   SHUFFLE  avgt    4  11.008 Â±  0.159  ms/op
ArraysSort.Long.testSort                100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Long.testSort                100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Long.testSort                100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Long.testSort                100   SHUFFLE  avgt    4   0.002 Â±  0.001  ms/op
ArraysSort.Long.testSort               1000    RANDOM  avgt    4   0.044 Â±  0.001  ms/op
ArraysSort.Long.testSort               1000  REPEATED  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Long.testSort               1000   STAGGER  avgt    4   0.005 Â±  0.001  ms/op
ArraysSort.Long.testSort               1000   SHUFFLE  avgt    4   0.022 Â±  0.001  ms/op
ArraysSort.Long.testSort              10000    RANDOM  avgt    4   0.585 Â±  0.007  ms/op
ArraysSort.Long.testSort              10000  REPEATED  avgt    4   0.048 Â±  0.001  ms/op
ArraysSort.Long.testSort              10000   STAGGER  avgt    4   0.055 Â±  0.001  ms/op
ArraysSort.Long.testSort              10000   SHUFFLE  avgt    4   0.263 Â±  0.003  ms/op
ArraysSort.Long.testSort             100000    RANDOM  avgt    4   7.392 Â±  0.070  ms/op
ArraysSort.Long.testSort             100000  REPEATED  avgt    4   0.488 Â±  0.007  ms/op
ArraysSort.Long.testSort             100000   STAGGER  avgt    4   0.551 Â±  0.006  ms/op
ArraysSort.Long.testSort             100000   SHUFFLE  avgt    4   2.689 Â±  0.160  ms/op
ArraysSort.Long.testSort            1000000    RANDOM  avgt    4  87.203 Â±  0.891  ms/op
ArraysSort.Long.testSort            1000000  REPEATED  avgt    4   3.627 Â±  0.005  ms/op
ArraysSort.Long.testSort            1000000   STAGGER  avgt    4   5.909 Â±  0.353  ms/op
ArraysSort.Long.testSort            1000000   SHUFFLE  avgt    4  28.146 Â±  2.884  ms/op
ArraysSort.Short.testParallelSort       100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort       100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort       100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort       100   SHUFFLE  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000    RANDOM  avgt    4   0.045 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000  REPEATED  avgt    4   0.004 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000   STAGGER  avgt    4   0.014 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort      1000   SHUFFLE  avgt    4   0.023 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort     10000    RANDOM  avgt    4   0.176 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort     10000  REPEATED  avgt    4   0.044 Â±  0.004  ms/op
ArraysSort.Short.testParallelSort     10000   STAGGER  avgt    4   0.056 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort     10000   SHUFFLE  avgt    4   0.047 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000    RANDOM  avgt    4   0.921 Â±  0.017  ms/op
ArraysSort.Short.testParallelSort    100000  REPEATED  avgt    4   0.192 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000   STAGGER  avgt    4   0.218 Â±  0.001  ms/op
ArraysSort.Short.testParallelSort    100000   SHUFFLE  avgt    4   0.253 Â±  0.036  ms/op
ArraysSort.Short.testParallelSort   1000000    RANDOM  avgt    4   2.503 Â±  0.038  ms/op
ArraysSort.Short.testParallelSort   1000000  REPEATED  avgt    4   0.796 Â±  0.002  ms/op
ArraysSort.Short.testParallelSort   1000000   STAGGER  avgt    4   1.232 Â±  0.104  ms/op
ArraysSort.Short.testParallelSort   1000000   SHUFFLE  avgt    4   1.138 Â±  0.080  ms/op
ArraysSort.Short.testSort               100    RANDOM  avgt    4   0.003 Â±  0.001  ms/op
ArraysSort.Short.testSort               100  REPEATED  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Short.testSort               100   STAGGER  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Short.testSort               100   SHUFFLE  avgt    4   0.001 Â±  0.001  ms/op
ArraysSort.Short.testSort              1000    RANDOM  avgt    4   0.045 Â±  0.001  ms/op
ArraysSort.Short.testSort              1000  REPEATED  avgt    4   0.004 Â±  0.001  ms/op
ArraysSort.Short.testSort              1000   STAGGER  avgt    4   0.013 Â±  0.001  ms/op
ArraysSort.Short.testSort              1000   SHUFFLE  avgt    4   0.023 Â±  0.001  ms/op
ArraysSort.Short.testSort             10000    RANDOM  avgt    4   0.175 Â±  0.001  ms/op
ArraysSort.Short.testSort             10000  REPEATED  avgt    4   0.044 Â±  0.004  ms/op
ArraysSort.Short.testSort             10000   STAGGER  avgt    4   0.057 Â±  0.006  ms/op
ArraysSort.Short.testSort             10000   SHUFFLE  avgt    4   0.047 Â±  0.001  ms/op
ArraysSort.Short.testSort            100000    RANDOM  avgt    4   0.921 Â±  0.006  ms/op
ArraysSort.Short.testSort            100000  REPEATED  avgt    4   0.192 Â±  0.001  ms/op
ArraysSort.Short.testSort            100000   STAGGER  avgt    4   0.218 Â±  0.001  ms/op
ArraysSort.Short.testSort            100000   SHUFFLE  avgt    4   0.253 Â±  0.034  ms/op
ArraysSort.Short.testSort           1000000    RANDOM  avgt    4   2.514 Â±  0.047  ms/op
ArraysSort.Short.testSort           1000000  REPEATED  avgt    4   0.794 Â±  0.009  ms/op
ArraysSort.Short.testSort           1000000   STAGGER  avgt    4   1.230 Â±  0.088  ms/op
ArraysSort.Short.testSort           1000000   SHUFFLE  avgt    4   1.125 Â±  0.210  ms/op

Benchmark result is saved to /home/graphics-rasterizer/jdk/jdk-gh/build/linux-x86_64-server-release/test-results/micro_java_util_ArraysSort/jmh-result.json
Finished running test 'micro:java.util.ArraysSort'
Test report is stored in build/linux-x86_64-server-release/test-results/micro_java_util_ArraysSort

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR   
   micro:java.util.ArraysSort                            1     1     0     0   
==============================
TEST SUCCESS

Finished building target 'test' in configuration 'linux-x86_64-server-release'

