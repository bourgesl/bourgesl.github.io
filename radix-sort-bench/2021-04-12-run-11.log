OPTS: -p size=1000 -p bits=23
JAVA_OPTS: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
Running JMH ...
# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = UNIFORM, seed = 0, size = 1000)

# Run progress: 0,00% complete, ETA 00:05:15
# Fork: 1 of 1
# Warmup Iteration   1: 22333,784 ops/s
# Warmup Iteration   2: 26715,127 ops/s
# Warmup Iteration   3: 26733,319 ops/s
# Warmup Iteration   4: 26862,635 ops/s
# Warmup Iteration   5: 26799,064 ops/s
Iteration   1: 26782,841 ops/s
Iteration   2: 26922,406 ops/s
Iteration   3: 26879,849 ops/s
Iteration   4: 26943,698 ops/s
Iteration   5: 26810,144 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  26867,788 ±(99.9%) 268,371 ops/s [Average]
  (min, avg, max) = (26782,841, 26867,788, 26943,698), stdev = 69,695
  CI (99.9%): [26599,417, 27136,159] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = CONTIGUOUS, seed = 0, size = 1000)

# Run progress: 4,76% complete, ETA 00:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 1160634,486 ops/s
# Warmup Iteration   2: 1492155,871 ops/s
# Warmup Iteration   3: 1514404,318 ops/s
# Warmup Iteration   4: 1514516,804 ops/s
# Warmup Iteration   5: 1506952,509 ops/s
Iteration   1: 1474661,755 ops/s
Iteration   2: 1513552,008 ops/s
Iteration   3: 1511264,011 ops/s
Iteration   4: 1516117,437 ops/s
Iteration   5: 1516329,955 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  1506385,033 ±(99.9%) 68751,991 ops/s [Average]
  (min, avg, max) = (1474661,755, 1506385,033, 1516329,955), stdev = 17854,674
  CI (99.9%): [1437633,043, 1575137,024] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = CONTIGUOUS_REVERSE, seed = 0, size = 1000)

# Run progress: 9,52% complete, ETA 00:05:02
# Fork: 1 of 1
# Warmup Iteration   1: 496671,995 ops/s
# Warmup Iteration   2: 584518,516 ops/s
# Warmup Iteration   3: 645259,231 ops/s
# Warmup Iteration   4: 641994,102 ops/s
# Warmup Iteration   5: 644588,448 ops/s
Iteration   1: 645050,077 ops/s
Iteration   2: 646200,126 ops/s
Iteration   3: 645226,816 ops/s
Iteration   4: 629534,467 ops/s
Iteration   5: 645290,066 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  642260,310 ±(99.9%) 27447,259 ops/s [Average]
  (min, avg, max) = (629534,467, 642260,310, 646200,126), stdev = 7127,966
  CI (99.9%): [614813,051, 669707,570] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = ALMOST_CONTIGUOUS, seed = 0, size = 1000)

# Run progress: 14,29% complete, ETA 00:04:46
# Fork: 1 of 1
# Warmup Iteration   1: 528424,654 ops/s
# Warmup Iteration   2: 622717,515 ops/s
# Warmup Iteration   3: 681490,237 ops/s
# Warmup Iteration   4: 678085,522 ops/s
# Warmup Iteration   5: 678810,807 ops/s
Iteration   1: 680907,218 ops/s
Iteration   2: 681094,123 ops/s
Iteration   3: 676788,232 ops/s
Iteration   4: 669288,817 ops/s
Iteration   5: 681396,201 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  677894,918 ±(99.9%) 19902,427 ops/s [Average]
  (min, avg, max) = (669288,817, 677894,918, 681396,201), stdev = 5168,597
  CI (99.9%): [657992,491, 697797,345] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = SORTED, seed = 0, size = 1000)

# Run progress: 19,05% complete, ETA 00:04:29
# Fork: 1 of 1
# Warmup Iteration   1: 1163918,478 ops/s
# Warmup Iteration   2: 1483342,335 ops/s
# Warmup Iteration   3: 1514227,912 ops/s
# Warmup Iteration   4: 1502988,150 ops/s
# Warmup Iteration   5: 1505277,585 ops/s
Iteration   1: 1475287,262 ops/s
Iteration   2: 1515199,485 ops/s
Iteration   3: 1515790,929 ops/s
Iteration   4: 1517656,043 ops/s
Iteration   5: 1514445,959 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  1507675,936 ±(99.9%) 69868,735 ops/s [Average]
  (min, avg, max) = (1475287,262, 1507675,936, 1517656,043), stdev = 18144,688
  CI (99.9%): [1437807,201, 1577544,670] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = ALMOST_SORTED, seed = 0, size = 1000)

# Run progress: 23,81% complete, ETA 00:04:13
# Fork: 1 of 1
# Warmup Iteration   1: 115770,671 ops/s
# Warmup Iteration   2: 137509,542 ops/s
# Warmup Iteration   3: 137791,351 ops/s
# Warmup Iteration   4: 137709,398 ops/s
# Warmup Iteration   5: 137776,567 ops/s
Iteration   1: 137452,694 ops/s
Iteration   2: 140939,386 ops/s
Iteration   3: 140958,590 ops/s
Iteration   4: 140966,412 ops/s
Iteration   5: 140533,433 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  140170,103 ±(99.9%) 5891,591 ops/s [Average]
  (min, avg, max) = (137452,694, 140170,103, 140966,412), stdev = 1530,027
  CI (99.9%): [134278,512, 146061,693] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort
# Parameters: (bits = 23, padding = 7, scenario = EXP, seed = 0, size = 1000)

# Run progress: 28,57% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 26664,328 ops/s
# Warmup Iteration   2: 32191,686 ops/s
# Warmup Iteration   3: 32444,557 ops/s
# Warmup Iteration   4: 32387,706 ops/s
# Warmup Iteration   5: 32383,310 ops/s
Iteration   1: 32448,100 ops/s
Iteration   2: 32416,841 ops/s
Iteration   3: 32439,503 ops/s
Iteration   4: 32382,886 ops/s
Iteration   5: 32409,290 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.arraysSort":
  32419,324 ±(99.9%) 99,482 ops/s [Average]
  (min, avg, max) = (32382,886, 32419,324, 32448,100), stdev = 25,835
  CI (99.9%): [32319,842, 32518,807] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = UNIFORM, seed = 0, size = 1000)

# Run progress: 33,33% complete, ETA 00:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 47471,131 ops/s
# Warmup Iteration   2: 54382,422 ops/s
# Warmup Iteration   3: 55855,013 ops/s
# Warmup Iteration   4: 52305,605 ops/s
# Warmup Iteration   5: 52001,671 ops/s
Iteration   1: 53060,015 ops/s
Iteration   2: 53096,860 ops/s
Iteration   3: 52928,163 ops/s
Iteration   4: 52835,495 ops/s
Iteration   5: 52695,916 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  52923,290 ±(99.9%) 633,461 ops/s [Average]
  (min, avg, max) = (52695,916, 52923,290, 53096,860), stdev = 164,508
  CI (99.9%): [52289,829, 53556,751] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = CONTIGUOUS, seed = 0, size = 1000)

# Run progress: 38,10% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: 41062,686 ops/s
# Warmup Iteration   2: 45615,827 ops/s
# Warmup Iteration   3: 46527,346 ops/s
# Warmup Iteration   4: 44746,548 ops/s
# Warmup Iteration   5: 44690,546 ops/s
Iteration   1: 44719,578 ops/s
Iteration   2: 45302,985 ops/s
Iteration   3: 45316,350 ops/s
Iteration   4: 45298,988 ops/s
Iteration   5: 45140,180 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  45155,616 ±(99.9%) 978,844 ops/s [Average]
  (min, avg, max) = (44719,578, 45155,616, 45316,350), stdev = 254,203
  CI (99.9%): [44176,772, 46134,460] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = CONTIGUOUS_REVERSE, seed = 0, size = 1000)

# Run progress: 42,86% complete, ETA 00:03:10
# Fork: 1 of 1
# Warmup Iteration   1: 41175,629 ops/s
# Warmup Iteration   2: 45673,245 ops/s
# Warmup Iteration   3: 46590,188 ops/s
# Warmup Iteration   4: 44797,903 ops/s
# Warmup Iteration   5: 44584,731 ops/s
Iteration   1: 44945,371 ops/s
Iteration   2: 45263,669 ops/s
Iteration   3: 45251,278 ops/s
Iteration   4: 44925,994 ops/s
Iteration   5: 44855,203 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  45048,303 ±(99.9%) 746,726 ops/s [Average]
  (min, avg, max) = (44855,203, 45048,303, 45263,669), stdev = 193,922
  CI (99.9%): [44301,577, 45795,029] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = ALMOST_CONTIGUOUS, seed = 0, size = 1000)

# Run progress: 47,62% complete, ETA 00:02:54
# Fork: 1 of 1
# Warmup Iteration   1: 40723,881 ops/s
# Warmup Iteration   2: 45494,685 ops/s
# Warmup Iteration   3: 46447,079 ops/s
# Warmup Iteration   4: 44876,922 ops/s
# Warmup Iteration   5: 44869,277 ops/s
Iteration   1: 44948,120 ops/s
Iteration   2: 45398,016 ops/s
Iteration   3: 45405,102 ops/s
Iteration   4: 45868,135 ops/s
Iteration   5: 45889,257 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  45501,726 ±(99.9%) 1504,965 ops/s [Average]
  (min, avg, max) = (44948,120, 45501,726, 45889,257), stdev = 390,835
  CI (99.9%): [43996,761, 47006,692] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = SORTED, seed = 0, size = 1000)

# Run progress: 52,38% complete, ETA 00:02:38
# Fork: 1 of 1
# Warmup Iteration   1: 47112,129 ops/s
# Warmup Iteration   2: 54043,211 ops/s
# Warmup Iteration   3: 55318,700 ops/s
# Warmup Iteration   4: 51891,848 ops/s
# Warmup Iteration   5: 51669,665 ops/s
Iteration   1: 52512,678 ops/s
Iteration   2: 52463,359 ops/s
Iteration   3: 52396,156 ops/s
Iteration   4: 52606,795 ops/s
Iteration   5: 52646,836 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  52525,165 ±(99.9%) 394,980 ops/s [Average]
  (min, avg, max) = (52396,156, 52525,165, 52646,836), stdev = 102,575
  CI (99.9%): [52130,184, 52920,145] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = ALMOST_SORTED, seed = 0, size = 1000)

# Run progress: 57,14% complete, ETA 00:02:22
# Fork: 1 of 1
# Warmup Iteration   1: 47281,791 ops/s
# Warmup Iteration   2: 54210,980 ops/s
# Warmup Iteration   3: 55486,334 ops/s
# Warmup Iteration   4: 52160,735 ops/s
# Warmup Iteration   5: 51549,007 ops/s
Iteration   1: 52657,876 ops/s
Iteration   2: 52681,860 ops/s
Iteration   3: 51482,970 ops/s
Iteration   4: 51100,669 ops/s
Iteration   5: 51611,830 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  51907,041 ±(99.9%) 2777,619 ops/s [Average]
  (min, avg, max) = (51100,669, 51907,041, 52681,860), stdev = 721,339
  CI (99.9%): [49129,422, 54684,660] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer
# Parameters: (bits = 23, padding = 7, scenario = EXP, seed = 0, size = 1000)

# Run progress: 61,90% complete, ETA 00:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 40625,934 ops/s
# Warmup Iteration   2: 45523,426 ops/s
# Warmup Iteration   3: 46762,773 ops/s
# Warmup Iteration   4: 44754,607 ops/s
# Warmup Iteration   5: 44757,424 ops/s
Iteration   1: 44826,493 ops/s
Iteration   2: 45153,526 ops/s
Iteration   3: 45266,291 ops/s
Iteration   4: 44156,572 ops/s
Iteration   5: 44037,432 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.basicBuffer":
  44688,062 ±(99.9%) 2174,821 ops/s [Average]
  (min, avg, max) = (44037,432, 44688,062, 45266,291), stdev = 564,794
  CI (99.9%): [42513,241, 46862,883] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = UNIFORM, seed = 0, size = 1000)

# Run progress: 66,67% complete, ETA 00:01:50
# Fork: 1 of 1
# Warmup Iteration   1: 60387,325 ops/s
# Warmup Iteration   2: 81646,190 ops/s
# Warmup Iteration   3: 83128,795 ops/s
# Warmup Iteration   4: 83853,455 ops/s
# Warmup Iteration   5: 77088,892 ops/s
Iteration   1: 81861,686 ops/s
Iteration   2: 83720,676 ops/s
Iteration   3: 83975,730 ops/s
Iteration   4: 83874,752 ops/s
Iteration   5: 83813,397 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  83449,248 ±(99.9%) 3435,968 ops/s [Average]
  (min, avg, max) = (81861,686, 83449,248, 83975,730), stdev = 892,310
  CI (99.9%): [80013,280, 86885,216] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = CONTIGUOUS, seed = 0, size = 1000)

# Run progress: 71,43% complete, ETA 00:01:35
# Fork: 1 of 1
# Warmup Iteration   1: 83441,260 ops/s
# Warmup Iteration   2: 110306,178 ops/s
# Warmup Iteration   3: 110677,350 ops/s
# Warmup Iteration   4: 110152,456 ops/s
# Warmup Iteration   5: 106300,398 ops/s
Iteration   1: 110725,809 ops/s
Iteration   2: 110606,923 ops/s
Iteration   3: 110669,489 ops/s
Iteration   4: 110790,535 ops/s
Iteration   5: 110785,727 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  110715,697 ±(99.9%) 301,815 ops/s [Average]
  (min, avg, max) = (110606,923, 110715,697, 110790,535), stdev = 78,381
  CI (99.9%): [110413,881, 111017,512] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = CONTIGUOUS_REVERSE, seed = 0, size = 1000)

# Run progress: 76,19% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 83792,852 ops/s
# Warmup Iteration   2: 110051,358 ops/s
# Warmup Iteration   3: 110689,266 ops/s
# Warmup Iteration   4: 110434,915 ops/s
# Warmup Iteration   5: 105757,850 ops/s
Iteration   1: 109530,206 ops/s
Iteration   2: 109428,306 ops/s
Iteration   3: 109287,255 ops/s
Iteration   4: 109113,329 ops/s
Iteration   5: 109469,779 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  109365,775 ±(99.9%) 643,354 ops/s [Average]
  (min, avg, max) = (109113,329, 109365,775, 109530,206), stdev = 167,077
  CI (99.9%): [108722,421, 110009,129] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = ALMOST_CONTIGUOUS, seed = 0, size = 1000)

# Run progress: 80,95% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 80120,356 ops/s
# Warmup Iteration   2: 109919,555 ops/s
# Warmup Iteration   3: 110130,335 ops/s
# Warmup Iteration   4: 110083,710 ops/s
# Warmup Iteration   5: 106197,205 ops/s
Iteration   1: 110510,597 ops/s
Iteration   2: 110629,189 ops/s
Iteration   3: 110577,336 ops/s
Iteration   4: 110327,500 ops/s
Iteration   5: 110392,206 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  110487,366 ±(99.9%) 484,633 ops/s [Average]
  (min, avg, max) = (110327,500, 110487,366, 110629,189), stdev = 125,858
  CI (99.9%): [110002,733, 110971,999] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = SORTED, seed = 0, size = 1000)

# Run progress: 85,71% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 58242,589 ops/s
# Warmup Iteration   2: 78199,190 ops/s
# Warmup Iteration   3: 80082,156 ops/s
# Warmup Iteration   4: 80913,303 ops/s
# Warmup Iteration   5: 80311,239 ops/s
Iteration   1: 78765,737 ops/s
Iteration   2: 80652,535 ops/s
Iteration   3: 80917,906 ops/s
Iteration   4: 80911,382 ops/s
Iteration   5: 80920,682 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  80433,649 ±(99.9%) 3617,236 ops/s [Average]
  (min, avg, max) = (78765,737, 80433,649, 80920,682), stdev = 939,385
  CI (99.9%): [76816,412, 84050,885] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = ALMOST_SORTED, seed = 0, size = 1000)

# Run progress: 90,48% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 56545,055 ops/s
# Warmup Iteration   2: 78381,288 ops/s
# Warmup Iteration   3: 78164,262 ops/s
# Warmup Iteration   4: 76143,298 ops/s
# Warmup Iteration   5: 75463,881 ops/s
Iteration   1: 77295,749 ops/s
Iteration   2: 80833,166 ops/s
Iteration   3: 80902,238 ops/s
Iteration   4: 80808,212 ops/s
Iteration   5: 80769,891 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  80121,851 ±(99.9%) 6086,233 ops/s [Average]
  (min, avg, max) = (77295,749, 80121,851, 80902,238), stdev = 1580,575
  CI (99.9%): [74035,618, 86208,085] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-LTS
# VM invoker: /home/bourgesl/apps/jdk-11.0.10-full/bin/java
# VM options: -Xms1g -Xmx1g -XX:+UseParallelGC -XX:-BackgroundCompilation
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection
# Parameters: (bits = 23, padding = 7, scenario = EXP, seed = 0, size = 1000)

# Run progress: 95,24% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 53296,649 ops/s
# Warmup Iteration   2: 70949,516 ops/s
# Warmup Iteration   3: 72670,726 ops/s
# Warmup Iteration   4: 71677,224 ops/s
# Warmup Iteration   5: 72343,292 ops/s
Iteration   1: 70564,984 ops/s
Iteration   2: 72530,361 ops/s
Iteration   3: 72422,992 ops/s
Iteration   4: 72457,999 ops/s
Iteration   5: 72449,152 ops/s


Result "io.github.richardstartin.radixsort.RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection":
  72085,098 ±(99.9%) 3275,747 ops/s [Average]
  (min, avg, max) = (70564,984, 72085,098, 72530,361), stdev = 850,701
  CI (99.9%): [68809,351, 75360,844] (assumes normal distribution)


# Run complete. Total time: 00:05:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      (bits)  (padding)          (scenario)  (seed)  (size)   Mode  Cnt        Score       Error  Units
RadixSortBenchmark.arraysSort                                      23          7             UNIFORM       0    1000  thrpt    5    26867,788 ±   268,371  ops/s
RadixSortBenchmark.arraysSort                                      23          7          CONTIGUOUS       0    1000  thrpt    5  1506385,033 ± 68751,991  ops/s
RadixSortBenchmark.arraysSort                                      23          7  CONTIGUOUS_REVERSE       0    1000  thrpt    5   642260,310 ± 27447,259  ops/s
RadixSortBenchmark.arraysSort                                      23          7   ALMOST_CONTIGUOUS       0    1000  thrpt    5   677894,918 ± 19902,427  ops/s
RadixSortBenchmark.arraysSort                                      23          7              SORTED       0    1000  thrpt    5  1507675,936 ± 69868,735  ops/s
RadixSortBenchmark.arraysSort                                      23          7       ALMOST_SORTED       0    1000  thrpt    5   140170,103 ±  5891,591  ops/s
RadixSortBenchmark.arraysSort                                      23          7                 EXP       0    1000  thrpt    5    32419,324 ±    99,482  ops/s
RadixSortBenchmark.basicBuffer                                     23          7             UNIFORM       0    1000  thrpt    5    52923,290 ±   633,461  ops/s
RadixSortBenchmark.basicBuffer                                     23          7          CONTIGUOUS       0    1000  thrpt    5    45155,616 ±   978,844  ops/s
RadixSortBenchmark.basicBuffer                                     23          7  CONTIGUOUS_REVERSE       0    1000  thrpt    5    45048,303 ±   746,726  ops/s
RadixSortBenchmark.basicBuffer                                     23          7   ALMOST_CONTIGUOUS       0    1000  thrpt    5    45501,726 ±  1504,965  ops/s
RadixSortBenchmark.basicBuffer                                     23          7              SORTED       0    1000  thrpt    5    52525,165 ±   394,980  ops/s
RadixSortBenchmark.basicBuffer                                     23          7       ALMOST_SORTED       0    1000  thrpt    5    51907,041 ±  2777,619  ops/s
RadixSortBenchmark.basicBuffer                                     23          7                 EXP       0    1000  thrpt    5    44688,062 ±  2174,821  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7             UNIFORM       0    1000  thrpt    5    83449,248 ±  3435,968  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7          CONTIGUOUS       0    1000  thrpt    5   110715,697 ±   301,815  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7  CONTIGUOUS_REVERSE       0    1000  thrpt    5   109365,775 ±   643,354  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7   ALMOST_CONTIGUOUS       0    1000  thrpt    5   110487,366 ±   484,633  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7              SORTED       0    1000  thrpt    5    80433,649 ±  3617,236  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7       ALMOST_SORTED       0    1000  thrpt    5    80121,851 ±  6086,233  ops/s
RadixSortBenchmark.unrollOnePassSkipLevelsBufferWithDetection      23          7                 EXP       0    1000  thrpt    5    72085,098 ±  3275,747  ops/s
